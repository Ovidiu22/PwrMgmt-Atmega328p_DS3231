
PwrMgmt-Atmega328p_DS3231.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000770  00800100  000016f4  00001788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800870  00800870  00001ef8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000443d  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011eb  00000000  00000000  000066f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003450  00000000  00000000  000078e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cb4  00000000  00000000  0000ad34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013052  00000000  00000000  0000b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004519  00000000  00000000  0001ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00022f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003d84  00000000  00000000  000231fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	e3 c6       	rjmp	.+3526   	; 0xdcc <__vector_1>
       6:	00 00       	nop
       8:	4b c0       	rjmp	.+150    	; 0xa0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c0       	rjmp	.+134    	; 0xa0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c0       	rjmp	.+102    	; 0xa0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c0       	rjmp	.+74     	; 0xa0 <__bad_interrupt>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	18 e0       	ldi	r17, 0x08	; 8
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ef       	ldi	r30, 0xF4	; 244
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 37       	cpi	r26, 0x70	; 112
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	28 e0       	ldi	r18, 0x08	; 8
      8c:	a0 e7       	ldi	r26, 0x70	; 112
      8e:	b8 e0       	ldi	r27, 0x08	; 8
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 37       	cpi	r26, 0x7F	; 127
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	c5 d6       	rcall	.+3466   	; 0xe26 <main>
      9c:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <a_ds3231_iic_write>:
        
        return 1;                                                                            /* return error */
    }
    
    return 0;                                                                                /* success return 0 */
}
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	1f 92       	push	r1
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	49 83       	std	Y+1, r20	; 0x01
      ae:	dc 01       	movw	r26, r24
      b0:	14 96       	adiw	r26, 0x04	; 4
      b2:	ed 91       	ld	r30, X+
      b4:	fc 91       	ld	r31, X
      b6:	15 97       	sbiw	r26, 0x05	; 5
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	ae 01       	movw	r20, r28
      be:	4f 5f       	subi	r20, 0xFF	; 255
      c0:	5f 4f       	sbci	r21, 0xFF	; 255
      c2:	88 e6       	ldi	r24, 0x68	; 104
      c4:	09 95       	icall
      c6:	91 e0       	ldi	r25, 0x01	; 1
      c8:	81 11       	cpse	r24, r1
      ca:	01 c0       	rjmp	.+2      	; 0xce <a_ds3231_iic_write+0x2c>
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	89 2f       	mov	r24, r25
      d0:	0f 90       	pop	r0
      d2:	df 91       	pop	r29
      d4:	cf 91       	pop	r28
      d6:	08 95       	ret

000000d8 <a_ds3231_iic_multiple_read>:
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	dc 01       	movw	r26, r24
      dc:	16 96       	adiw	r26, 0x06	; 6
      de:	ed 91       	ld	r30, X+
      e0:	fc 91       	ld	r31, X
      e2:	17 97       	sbiw	r26, 0x07	; 7
      e4:	88 e6       	ldi	r24, 0x68	; 104
      e6:	09 95       	icall
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	81 11       	cpse	r24, r1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <a_ds3231_iic_multiple_read+0x18>
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	89 2f       	mov	r24, r25
      f2:	08 95       	ret

000000f4 <ds3231_set_oscillator>:
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	1f 92       	push	r1
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
     106:	00 97       	sbiw	r24, 0x00	; 0
     108:	b9 f1       	breq	.+110    	; 0x178 <ds3231_set_oscillator+0x84>
     10a:	dc 01       	movw	r26, r24
     10c:	1e 96       	adiw	r26, 0x0e	; 14
     10e:	1c 91       	ld	r17, X
     110:	11 30       	cpi	r17, 0x01	; 1
     112:	a1 f5       	brne	.+104    	; 0x17c <ds3231_set_oscillator+0x88>
     114:	06 2f       	mov	r16, r22
     116:	7c 01       	movw	r14, r24
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	ae 01       	movw	r20, r28
     11c:	4f 5f       	subi	r20, 0xFF	; 255
     11e:	5f 4f       	sbci	r21, 0xFF	; 255
     120:	6e e0       	ldi	r22, 0x0E	; 14
     122:	da df       	rcall	.-76     	; 0xd8 <a_ds3231_iic_multiple_read>
     124:	88 23       	and	r24, r24
     126:	69 f0       	breq	.+26     	; 0x142 <ds3231_set_oscillator+0x4e>
     128:	81 e8       	ldi	r24, 0x81	; 129
     12a:	94 e0       	ldi	r25, 0x04	; 4
     12c:	9f 93       	push	r25
     12e:	8f 93       	push	r24
     130:	d7 01       	movw	r26, r14
     132:	18 96       	adiw	r26, 0x08	; 8
     134:	ed 91       	ld	r30, X+
     136:	fc 91       	ld	r31, X
     138:	19 97       	sbiw	r26, 0x09	; 9
     13a:	09 95       	icall
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	20 c0       	rjmp	.+64     	; 0x182 <ds3231_set_oscillator+0x8e>
     142:	49 81       	ldd	r20, Y+1	; 0x01
     144:	4f 77       	andi	r20, 0x7F	; 127
     146:	00 23       	and	r16, r16
     148:	11 f0       	breq	.+4      	; 0x14e <ds3231_set_oscillator+0x5a>
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	01 c0       	rjmp	.+2      	; 0x150 <ds3231_set_oscillator+0x5c>
     14e:	80 e8       	ldi	r24, 0x80	; 128
     150:	48 2b       	or	r20, r24
     152:	49 83       	std	Y+1, r20	; 0x01
     154:	6e e0       	ldi	r22, 0x0E	; 14
     156:	c7 01       	movw	r24, r14
     158:	a4 df       	rcall	.-184    	; 0xa2 <a_ds3231_iic_write>
     15a:	88 23       	and	r24, r24
     15c:	89 f0       	breq	.+34     	; 0x180 <ds3231_set_oscillator+0x8c>
     15e:	8f e9       	ldi	r24, 0x9F	; 159
     160:	94 e0       	ldi	r25, 0x04	; 4
     162:	9f 93       	push	r25
     164:	8f 93       	push	r24
     166:	d7 01       	movw	r26, r14
     168:	18 96       	adiw	r26, 0x08	; 8
     16a:	ed 91       	ld	r30, X+
     16c:	fc 91       	ld	r31, X
     16e:	19 97       	sbiw	r26, 0x09	; 9
     170:	09 95       	icall
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	05 c0       	rjmp	.+10     	; 0x182 <ds3231_set_oscillator+0x8e>
     178:	12 e0       	ldi	r17, 0x02	; 2
     17a:	03 c0       	rjmp	.+6      	; 0x182 <ds3231_set_oscillator+0x8e>
     17c:	13 e0       	ldi	r17, 0x03	; 3
     17e:	01 c0       	rjmp	.+2      	; 0x182 <ds3231_set_oscillator+0x8e>
     180:	10 e0       	ldi	r17, 0x00	; 0
     182:	81 2f       	mov	r24, r17
     184:	0f 90       	pop	r0
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	ff 90       	pop	r15
     190:	ef 90       	pop	r14
     192:	08 95       	ret

00000194 <ds3231_set_alarm_interrupt>:
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	1f 92       	push	r1
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	00 97       	sbiw	r24, 0x00	; 0
     1aa:	09 f4       	brne	.+2      	; 0x1ae <ds3231_set_alarm_interrupt+0x1a>
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <ds3231_set_alarm_interrupt+0xa2>
     1ae:	dc 01       	movw	r26, r24
     1b0:	1e 96       	adiw	r26, 0x0e	; 14
     1b2:	1c 91       	ld	r17, X
     1b4:	11 30       	cpi	r17, 0x01	; 1
     1b6:	09 f0       	breq	.+2      	; 0x1ba <ds3231_set_alarm_interrupt+0x26>
     1b8:	40 c0       	rjmp	.+128    	; 0x23a <ds3231_set_alarm_interrupt+0xa6>
     1ba:	04 2f       	mov	r16, r20
     1bc:	d6 2e       	mov	r13, r22
     1be:	7c 01       	movw	r14, r24
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	ae 01       	movw	r20, r28
     1c4:	4f 5f       	subi	r20, 0xFF	; 255
     1c6:	5f 4f       	sbci	r21, 0xFF	; 255
     1c8:	6e e0       	ldi	r22, 0x0E	; 14
     1ca:	86 df       	rcall	.-244    	; 0xd8 <a_ds3231_iic_multiple_read>
     1cc:	88 23       	and	r24, r24
     1ce:	69 f0       	breq	.+26     	; 0x1ea <ds3231_set_alarm_interrupt+0x56>
     1d0:	81 e8       	ldi	r24, 0x81	; 129
     1d2:	94 e0       	ldi	r25, 0x04	; 4
     1d4:	9f 93       	push	r25
     1d6:	8f 93       	push	r24
     1d8:	d7 01       	movw	r26, r14
     1da:	18 96       	adiw	r26, 0x08	; 8
     1dc:	ed 91       	ld	r30, X+
     1de:	fc 91       	ld	r31, X
     1e0:	19 97       	sbiw	r26, 0x09	; 9
     1e2:	09 95       	icall
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	2b c0       	rjmp	.+86     	; 0x240 <ds3231_set_alarm_interrupt+0xac>
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0d 2c       	mov	r0, r13
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <ds3231_set_alarm_interrupt+0x62>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <ds3231_set_alarm_interrupt+0x5e>
     1fa:	80 95       	com	r24
     1fc:	49 81       	ldd	r20, Y+1	; 0x01
     1fe:	48 23       	and	r20, r24
     200:	80 2f       	mov	r24, r16
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <ds3231_set_alarm_interrupt+0x76>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	da 94       	dec	r13
     20c:	e2 f7       	brpl	.-8      	; 0x206 <ds3231_set_alarm_interrupt+0x72>
     20e:	48 2b       	or	r20, r24
     210:	49 83       	std	Y+1, r20	; 0x01
     212:	6e e0       	ldi	r22, 0x0E	; 14
     214:	c7 01       	movw	r24, r14
     216:	45 df       	rcall	.-374    	; 0xa2 <a_ds3231_iic_write>
     218:	88 23       	and	r24, r24
     21a:	89 f0       	breq	.+34     	; 0x23e <ds3231_set_alarm_interrupt+0xaa>
     21c:	8f e9       	ldi	r24, 0x9F	; 159
     21e:	94 e0       	ldi	r25, 0x04	; 4
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	d7 01       	movw	r26, r14
     226:	18 96       	adiw	r26, 0x08	; 8
     228:	ed 91       	ld	r30, X+
     22a:	fc 91       	ld	r31, X
     22c:	19 97       	sbiw	r26, 0x09	; 9
     22e:	09 95       	icall
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	05 c0       	rjmp	.+10     	; 0x240 <ds3231_set_alarm_interrupt+0xac>
     236:	12 e0       	ldi	r17, 0x02	; 2
     238:	03 c0       	rjmp	.+6      	; 0x240 <ds3231_set_alarm_interrupt+0xac>
     23a:	13 e0       	ldi	r17, 0x03	; 3
     23c:	01 c0       	rjmp	.+2      	; 0x240 <ds3231_set_alarm_interrupt+0xac>
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	81 2f       	mov	r24, r17
     242:	0f 90       	pop	r0
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	ff 90       	pop	r15
     24e:	ef 90       	pop	r14
     250:	df 90       	pop	r13
     252:	08 95       	ret

00000254 <ds3231_set_pin>:
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	1f 92       	push	r1
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	a9 f1       	breq	.+106    	; 0x2d4 <ds3231_set_pin+0x80>
     26a:	dc 01       	movw	r26, r24
     26c:	1e 96       	adiw	r26, 0x0e	; 14
     26e:	1c 91       	ld	r17, X
     270:	11 30       	cpi	r17, 0x01	; 1
     272:	91 f5       	brne	.+100    	; 0x2d8 <ds3231_set_pin+0x84>
     274:	06 2f       	mov	r16, r22
     276:	7c 01       	movw	r14, r24
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	ae 01       	movw	r20, r28
     27c:	4f 5f       	subi	r20, 0xFF	; 255
     27e:	5f 4f       	sbci	r21, 0xFF	; 255
     280:	6e e0       	ldi	r22, 0x0E	; 14
     282:	2a df       	rcall	.-428    	; 0xd8 <a_ds3231_iic_multiple_read>
     284:	88 23       	and	r24, r24
     286:	69 f0       	breq	.+26     	; 0x2a2 <ds3231_set_pin+0x4e>
     288:	81 e8       	ldi	r24, 0x81	; 129
     28a:	94 e0       	ldi	r25, 0x04	; 4
     28c:	9f 93       	push	r25
     28e:	8f 93       	push	r24
     290:	d7 01       	movw	r26, r14
     292:	18 96       	adiw	r26, 0x08	; 8
     294:	ed 91       	ld	r30, X+
     296:	fc 91       	ld	r31, X
     298:	19 97       	sbiw	r26, 0x09	; 9
     29a:	09 95       	icall
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	1e c0       	rjmp	.+60     	; 0x2de <ds3231_set_pin+0x8a>
     2a2:	49 81       	ldd	r20, Y+1	; 0x01
     2a4:	4b 7f       	andi	r20, 0xFB	; 251
     2a6:	60 2f       	mov	r22, r16
     2a8:	66 0f       	add	r22, r22
     2aa:	66 0f       	add	r22, r22
     2ac:	46 2b       	or	r20, r22
     2ae:	49 83       	std	Y+1, r20	; 0x01
     2b0:	6e e0       	ldi	r22, 0x0E	; 14
     2b2:	c7 01       	movw	r24, r14
     2b4:	f6 de       	rcall	.-532    	; 0xa2 <a_ds3231_iic_write>
     2b6:	88 23       	and	r24, r24
     2b8:	89 f0       	breq	.+34     	; 0x2dc <ds3231_set_pin+0x88>
     2ba:	8f e9       	ldi	r24, 0x9F	; 159
     2bc:	94 e0       	ldi	r25, 0x04	; 4
     2be:	9f 93       	push	r25
     2c0:	8f 93       	push	r24
     2c2:	d7 01       	movw	r26, r14
     2c4:	18 96       	adiw	r26, 0x08	; 8
     2c6:	ed 91       	ld	r30, X+
     2c8:	fc 91       	ld	r31, X
     2ca:	19 97       	sbiw	r26, 0x09	; 9
     2cc:	09 95       	icall
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <ds3231_set_pin+0x8a>
     2d4:	12 e0       	ldi	r17, 0x02	; 2
     2d6:	03 c0       	rjmp	.+6      	; 0x2de <ds3231_set_pin+0x8a>
     2d8:	13 e0       	ldi	r17, 0x03	; 3
     2da:	01 c0       	rjmp	.+2      	; 0x2de <ds3231_set_pin+0x8a>
     2dc:	10 e0       	ldi	r17, 0x00	; 0
     2de:	81 2f       	mov	r24, r17
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	08 95       	ret

000002f0 <ds3231_set_square_wave>:
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	1f 92       	push	r1
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	00 97       	sbiw	r24, 0x00	; 0
     304:	b1 f1       	breq	.+108    	; 0x372 <ds3231_set_square_wave+0x82>
     306:	dc 01       	movw	r26, r24
     308:	1e 96       	adiw	r26, 0x0e	; 14
     30a:	1c 91       	ld	r17, X
     30c:	11 30       	cpi	r17, 0x01	; 1
     30e:	99 f5       	brne	.+102    	; 0x376 <ds3231_set_square_wave+0x86>
     310:	06 2f       	mov	r16, r22
     312:	7c 01       	movw	r14, r24
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	ae 01       	movw	r20, r28
     318:	4f 5f       	subi	r20, 0xFF	; 255
     31a:	5f 4f       	sbci	r21, 0xFF	; 255
     31c:	6e e0       	ldi	r22, 0x0E	; 14
     31e:	dc de       	rcall	.-584    	; 0xd8 <a_ds3231_iic_multiple_read>
     320:	88 23       	and	r24, r24
     322:	69 f0       	breq	.+26     	; 0x33e <ds3231_set_square_wave+0x4e>
     324:	81 e8       	ldi	r24, 0x81	; 129
     326:	94 e0       	ldi	r25, 0x04	; 4
     328:	9f 93       	push	r25
     32a:	8f 93       	push	r24
     32c:	d7 01       	movw	r26, r14
     32e:	18 96       	adiw	r26, 0x08	; 8
     330:	ed 91       	ld	r30, X+
     332:	fc 91       	ld	r31, X
     334:	19 97       	sbiw	r26, 0x09	; 9
     336:	09 95       	icall
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	1f c0       	rjmp	.+62     	; 0x37c <ds3231_set_square_wave+0x8c>
     33e:	49 81       	ldd	r20, Y+1	; 0x01
     340:	4f 7b       	andi	r20, 0xBF	; 191
     342:	b0 e4       	ldi	r27, 0x40	; 64
     344:	0b 9f       	mul	r16, r27
     346:	c0 01       	movw	r24, r0
     348:	11 24       	eor	r1, r1
     34a:	48 2b       	or	r20, r24
     34c:	49 83       	std	Y+1, r20	; 0x01
     34e:	6e e0       	ldi	r22, 0x0E	; 14
     350:	c7 01       	movw	r24, r14
     352:	a7 de       	rcall	.-690    	; 0xa2 <a_ds3231_iic_write>
     354:	88 23       	and	r24, r24
     356:	89 f0       	breq	.+34     	; 0x37a <ds3231_set_square_wave+0x8a>
     358:	8f e9       	ldi	r24, 0x9F	; 159
     35a:	94 e0       	ldi	r25, 0x04	; 4
     35c:	9f 93       	push	r25
     35e:	8f 93       	push	r24
     360:	d7 01       	movw	r26, r14
     362:	18 96       	adiw	r26, 0x08	; 8
     364:	ed 91       	ld	r30, X+
     366:	fc 91       	ld	r31, X
     368:	19 97       	sbiw	r26, 0x09	; 9
     36a:	09 95       	icall
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	05 c0       	rjmp	.+10     	; 0x37c <ds3231_set_square_wave+0x8c>
     372:	12 e0       	ldi	r17, 0x02	; 2
     374:	03 c0       	rjmp	.+6      	; 0x37c <ds3231_set_square_wave+0x8c>
     376:	13 e0       	ldi	r17, 0x03	; 3
     378:	01 c0       	rjmp	.+2      	; 0x37c <ds3231_set_square_wave+0x8c>
     37a:	10 e0       	ldi	r17, 0x00	; 0
     37c:	81 2f       	mov	r24, r17
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	08 95       	ret

0000038e <ds3231_set_aging_offset>:
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	c1 f0       	breq	.+48     	; 0x3c8 <ds3231_set_aging_offset+0x3a>
     398:	dc 01       	movw	r26, r24
     39a:	1e 96       	adiw	r26, 0x0e	; 14
     39c:	cc 91       	ld	r28, X
     39e:	c1 30       	cpi	r28, 0x01	; 1
     3a0:	a9 f4       	brne	.+42     	; 0x3cc <ds3231_set_aging_offset+0x3e>
     3a2:	46 2f       	mov	r20, r22
     3a4:	8c 01       	movw	r16, r24
     3a6:	60 e1       	ldi	r22, 0x10	; 16
     3a8:	7c de       	rcall	.-776    	; 0xa2 <a_ds3231_iic_write>
     3aa:	88 23       	and	r24, r24
     3ac:	89 f0       	breq	.+34     	; 0x3d0 <ds3231_set_aging_offset+0x42>
     3ae:	84 e1       	ldi	r24, 0x14	; 20
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	d8 01       	movw	r26, r16
     3b8:	18 96       	adiw	r26, 0x08	; 8
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	19 97       	sbiw	r26, 0x09	; 9
     3c0:	09 95       	icall
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <ds3231_set_aging_offset+0x44>
     3c8:	c2 e0       	ldi	r28, 0x02	; 2
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <ds3231_set_aging_offset+0x44>
     3cc:	c3 e0       	ldi	r28, 0x03	; 3
     3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <ds3231_set_aging_offset+0x44>
     3d0:	c0 e0       	ldi	r28, 0x00	; 0
     3d2:	8c 2f       	mov	r24, r28
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <ds3231_aging_offset_convert_to_register>:
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	00 97       	sbiw	r24, 0x00	; 0
     3e2:	81 f0       	breq	.+32     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3e4:	fc 01       	movw	r30, r24
     3e6:	86 85       	ldd	r24, Z+14	; 0x0e
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	71 f4       	brne	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3ec:	e9 01       	movw	r28, r18
     3ee:	cb 01       	movw	r24, r22
     3f0:	ba 01       	movw	r22, r20
     3f2:	2f e8       	ldi	r18, 0x8F	; 143
     3f4:	32 ec       	ldi	r19, 0xC2	; 194
     3f6:	45 ef       	ldi	r20, 0xF5	; 245
     3f8:	5d e3       	ldi	r21, 0x3D	; 61
     3fa:	6e d5       	rcall	.+2780   	; 0xed8 <__divsf3>
     3fc:	d5 d5       	rcall	.+2986   	; 0xfa8 <__fixsfsi>
     3fe:	68 83       	st	Y, r22
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	03 c0       	rjmp	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <ds3231_init>:
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	09 f4       	brne	.+2      	; 0x426 <ds3231_init+0x16>
     424:	d1 c0       	rjmp	.+418    	; 0x5c8 <ds3231_init+0x1b8>
     426:	dc 01       	movw	r26, r24
     428:	18 96       	adiw	r26, 0x08	; 8
     42a:	2d 91       	ld	r18, X+
     42c:	3c 91       	ld	r19, X
     42e:	19 97       	sbiw	r26, 0x09	; 9
     430:	21 15       	cp	r18, r1
     432:	31 05       	cpc	r19, r1
     434:	09 f4       	brne	.+2      	; 0x438 <ds3231_init+0x28>
     436:	cc c0       	rjmp	.+408    	; 0x5d0 <ds3231_init+0x1c0>
     438:	8c 01       	movw	r16, r24
     43a:	ed 91       	ld	r30, X+
     43c:	fc 91       	ld	r31, X
     43e:	30 97       	sbiw	r30, 0x00	; 0
     440:	69 f4       	brne	.+26     	; 0x45c <ds3231_init+0x4c>
     442:	8f e4       	ldi	r24, 0x4F	; 79
     444:	95 e0       	ldi	r25, 0x05	; 5
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	f9 01       	movw	r30, r18
     44c:	09 95       	icall
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 2e       	mov	r0, r31
     454:	f3 e0       	ldi	r31, 0x03	; 3
     456:	ff 2e       	mov	r15, r31
     458:	f0 2d       	mov	r31, r0
     45a:	be c0       	rjmp	.+380    	; 0x5d8 <ds3231_init+0x1c8>
     45c:	dc 01       	movw	r26, r24
     45e:	12 96       	adiw	r26, 0x02	; 2
     460:	8d 91       	ld	r24, X+
     462:	9c 91       	ld	r25, X
     464:	13 97       	sbiw	r26, 0x03	; 3
     466:	89 2b       	or	r24, r25
     468:	69 f4       	brne	.+26     	; 0x484 <ds3231_init+0x74>
     46a:	8a e6       	ldi	r24, 0x6A	; 106
     46c:	95 e0       	ldi	r25, 0x05	; 5
     46e:	9f 93       	push	r25
     470:	8f 93       	push	r24
     472:	f9 01       	movw	r30, r18
     474:	09 95       	icall
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 2e       	mov	r0, r31
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	ff 2e       	mov	r15, r31
     480:	f0 2d       	mov	r31, r0
     482:	aa c0       	rjmp	.+340    	; 0x5d8 <ds3231_init+0x1c8>
     484:	d8 01       	movw	r26, r16
     486:	14 96       	adiw	r26, 0x04	; 4
     488:	8d 91       	ld	r24, X+
     48a:	9c 91       	ld	r25, X
     48c:	15 97       	sbiw	r26, 0x05	; 5
     48e:	89 2b       	or	r24, r25
     490:	69 f4       	brne	.+26     	; 0x4ac <ds3231_init+0x9c>
     492:	87 e8       	ldi	r24, 0x87	; 135
     494:	95 e0       	ldi	r25, 0x05	; 5
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	f9 01       	movw	r30, r18
     49c:	09 95       	icall
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f3 e0       	ldi	r31, 0x03	; 3
     4a6:	ff 2e       	mov	r15, r31
     4a8:	f0 2d       	mov	r31, r0
     4aa:	96 c0       	rjmp	.+300    	; 0x5d8 <ds3231_init+0x1c8>
     4ac:	d8 01       	movw	r26, r16
     4ae:	16 96       	adiw	r26, 0x06	; 6
     4b0:	8d 91       	ld	r24, X+
     4b2:	9c 91       	ld	r25, X
     4b4:	17 97       	sbiw	r26, 0x07	; 7
     4b6:	89 2b       	or	r24, r25
     4b8:	69 f4       	brne	.+26     	; 0x4d4 <ds3231_init+0xc4>
     4ba:	83 ea       	ldi	r24, 0xA3	; 163
     4bc:	95 e0       	ldi	r25, 0x05	; 5
     4be:	9f 93       	push	r25
     4c0:	8f 93       	push	r24
     4c2:	f9 01       	movw	r30, r18
     4c4:	09 95       	icall
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f3 e0       	ldi	r31, 0x03	; 3
     4ce:	ff 2e       	mov	r15, r31
     4d0:	f0 2d       	mov	r31, r0
     4d2:	82 c0       	rjmp	.+260    	; 0x5d8 <ds3231_init+0x1c8>
     4d4:	d8 01       	movw	r26, r16
     4d6:	1c 96       	adiw	r26, 0x0c	; 12
     4d8:	8d 91       	ld	r24, X+
     4da:	9c 91       	ld	r25, X
     4dc:	1d 97       	sbiw	r26, 0x0d	; 13
     4de:	89 2b       	or	r24, r25
     4e0:	69 f4       	brne	.+26     	; 0x4fc <ds3231_init+0xec>
     4e2:	8e eb       	ldi	r24, 0xBE	; 190
     4e4:	95 e0       	ldi	r25, 0x05	; 5
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	f9 01       	movw	r30, r18
     4ec:	09 95       	icall
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f3 e0       	ldi	r31, 0x03	; 3
     4f6:	ff 2e       	mov	r15, r31
     4f8:	f0 2d       	mov	r31, r0
     4fa:	6e c0       	rjmp	.+220    	; 0x5d8 <ds3231_init+0x1c8>
     4fc:	d8 01       	movw	r26, r16
     4fe:	1a 96       	adiw	r26, 0x0a	; 10
     500:	8d 91       	ld	r24, X+
     502:	9c 91       	ld	r25, X
     504:	1b 97       	sbiw	r26, 0x0b	; 11
     506:	89 2b       	or	r24, r25
     508:	69 f4       	brne	.+26     	; 0x524 <ds3231_init+0x114>
     50a:	89 ed       	ldi	r24, 0xD9	; 217
     50c:	95 e0       	ldi	r25, 0x05	; 5
     50e:	9f 93       	push	r25
     510:	8f 93       	push	r24
     512:	f9 01       	movw	r30, r18
     514:	09 95       	icall
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 2e       	mov	r0, r31
     51c:	f3 e0       	ldi	r31, 0x03	; 3
     51e:	ff 2e       	mov	r15, r31
     520:	f0 2d       	mov	r31, r0
     522:	5a c0       	rjmp	.+180    	; 0x5d8 <ds3231_init+0x1c8>
     524:	09 95       	icall
     526:	f8 2e       	mov	r15, r24
     528:	88 23       	and	r24, r24
     52a:	79 f0       	breq	.+30     	; 0x54a <ds3231_init+0x13a>
     52c:	8c ef       	ldi	r24, 0xFC	; 252
     52e:	95 e0       	ldi	r25, 0x05	; 5
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	d8 01       	movw	r26, r16
     536:	18 96       	adiw	r26, 0x08	; 8
     538:	ed 91       	ld	r30, X+
     53a:	fc 91       	ld	r31, X
     53c:	19 97       	sbiw	r26, 0x09	; 9
     53e:	09 95       	icall
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	ff 24       	eor	r15, r15
     546:	f3 94       	inc	r15
     548:	47 c0       	rjmp	.+142    	; 0x5d8 <ds3231_init+0x1c8>
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	ae 01       	movw	r20, r28
     54e:	4f 5f       	subi	r20, 0xFF	; 255
     550:	5f 4f       	sbci	r21, 0xFF	; 255
     552:	6f e0       	ldi	r22, 0x0F	; 15
     554:	c8 01       	movw	r24, r16
     556:	c0 dd       	rcall	.-1152   	; 0xd8 <a_ds3231_iic_multiple_read>
     558:	88 23       	and	r24, r24
     55a:	a9 f0       	breq	.+42     	; 0x586 <ds3231_init+0x176>
     55c:	8e eb       	ldi	r24, 0xBE	; 190
     55e:	94 e0       	ldi	r25, 0x04	; 4
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	d8 01       	movw	r26, r16
     566:	18 96       	adiw	r26, 0x08	; 8
     568:	ed 91       	ld	r30, X+
     56a:	fc 91       	ld	r31, X
     56c:	19 97       	sbiw	r26, 0x09	; 9
     56e:	09 95       	icall
     570:	d8 01       	movw	r26, r16
     572:	12 96       	adiw	r26, 0x02	; 2
     574:	ed 91       	ld	r30, X+
     576:	fc 91       	ld	r31, X
     578:	13 97       	sbiw	r26, 0x03	; 3
     57a:	09 95       	icall
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	ff 24       	eor	r15, r15
     582:	f3 94       	inc	r15
     584:	29 c0       	rjmp	.+82     	; 0x5d8 <ds3231_init+0x1c8>
     586:	49 81       	ldd	r20, Y+1	; 0x01
     588:	4f 77       	andi	r20, 0x7F	; 127
     58a:	49 83       	std	Y+1, r20	; 0x01
     58c:	6f e0       	ldi	r22, 0x0F	; 15
     58e:	c8 01       	movw	r24, r16
     590:	88 dd       	rcall	.-1264   	; 0xa2 <a_ds3231_iic_write>
     592:	88 23       	and	r24, r24
     594:	a9 f0       	breq	.+42     	; 0x5c0 <ds3231_init+0x1b0>
     596:	86 e1       	ldi	r24, 0x16	; 22
     598:	96 e0       	ldi	r25, 0x06	; 6
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	d8 01       	movw	r26, r16
     5a0:	18 96       	adiw	r26, 0x08	; 8
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	19 97       	sbiw	r26, 0x09	; 9
     5a8:	09 95       	icall
     5aa:	d8 01       	movw	r26, r16
     5ac:	12 96       	adiw	r26, 0x02	; 2
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	13 97       	sbiw	r26, 0x03	; 3
     5b4:	09 95       	icall
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	ff 24       	eor	r15, r15
     5bc:	f3 94       	inc	r15
     5be:	0c c0       	rjmp	.+24     	; 0x5d8 <ds3231_init+0x1c8>
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	f8 01       	movw	r30, r16
     5c4:	86 87       	std	Z+14, r24	; 0x0e
     5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <ds3231_init+0x1c8>
     5c8:	68 94       	set
     5ca:	ff 24       	eor	r15, r15
     5cc:	f1 f8       	bld	r15, 1
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <ds3231_init+0x1c8>
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f3 e0       	ldi	r31, 0x03	; 3
     5d4:	ff 2e       	mov	r15, r31
     5d6:	f0 2d       	mov	r31, r0
     5d8:	8f 2d       	mov	r24, r15
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	08 95       	ret

000005e8 <ds3231_deinit>:
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	c1 f0       	breq	.+48     	; 0x622 <ds3231_deinit+0x3a>
     5f2:	fc 01       	movw	r30, r24
     5f4:	16 85       	ldd	r17, Z+14	; 0x0e
     5f6:	11 30       	cpi	r17, 0x01	; 1
     5f8:	b1 f4       	brne	.+44     	; 0x626 <ds3231_deinit+0x3e>
     5fa:	ec 01       	movw	r28, r24
     5fc:	02 80       	ldd	r0, Z+2	; 0x02
     5fe:	f3 81       	ldd	r31, Z+3	; 0x03
     600:	e0 2d       	mov	r30, r0
     602:	09 95       	icall
     604:	88 23       	and	r24, r24
     606:	59 f0       	breq	.+22     	; 0x61e <ds3231_deinit+0x36>
     608:	84 e3       	ldi	r24, 0x34	; 52
     60a:	96 e0       	ldi	r25, 0x06	; 6
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	e8 85       	ldd	r30, Y+8	; 0x08
     612:	f9 85       	ldd	r31, Y+9	; 0x09
     614:	09 95       	icall
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	81 2f       	mov	r24, r17
     61c:	05 c0       	rjmp	.+10     	; 0x628 <ds3231_deinit+0x40>
     61e:	1e 86       	std	Y+14, r1	; 0x0e
     620:	03 c0       	rjmp	.+6      	; 0x628 <ds3231_deinit+0x40>
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	01 c0       	rjmp	.+2      	; 0x628 <ds3231_deinit+0x40>
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	08 95       	ret

00000630 <ds3231_set_32khz_output>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t ds3231_set_32khz_output(ds3231_handle_t *handle, ds3231_bool_t enable)
{
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	1f 92       	push	r1
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                      /* check handle */
     642:	00 97       	sbiw	r24, 0x00	; 0
     644:	b1 f1       	breq	.+108    	; 0x6b2 <ds3231_set_32khz_output+0x82>
    {
        return 2;                                                                            /* return error */
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
     646:	dc 01       	movw	r26, r24
     648:	1e 96       	adiw	r26, 0x0e	; 14
     64a:	1c 91       	ld	r17, X
     64c:	11 30       	cpi	r17, 0x01	; 1
     64e:	99 f5       	brne	.+102    	; 0x6b6 <ds3231_set_32khz_output+0x86>
     650:	06 2f       	mov	r16, r22
     652:	7c 01       	movw	r14, r24
    {
        return 3;                                                                            /* return error */
    }
    
    res = a_ds3231_iic_multiple_read(handle, DS3231_REG_STATUS, (uint8_t *)&prev, 1);        /* multiple read */
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	ae 01       	movw	r20, r28
     658:	4f 5f       	subi	r20, 0xFF	; 255
     65a:	5f 4f       	sbci	r21, 0xFF	; 255
     65c:	6f e0       	ldi	r22, 0x0F	; 15
     65e:	3c dd       	rcall	.-1416   	; 0xd8 <a_ds3231_iic_multiple_read>
    if (res != 0)                                                                            /* check result */
     660:	88 23       	and	r24, r24
     662:	69 f0       	breq	.+26     	; 0x67e <ds3231_set_32khz_output+0x4e>
    {
        handle->debug_print("ds3231: read status failed.\n");                                /* read status failed */
     664:	8e eb       	ldi	r24, 0xBE	; 190
     666:	94 e0       	ldi	r25, 0x04	; 4
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	d7 01       	movw	r26, r14
     66e:	18 96       	adiw	r26, 0x08	; 8
     670:	ed 91       	ld	r30, X+
     672:	fc 91       	ld	r31, X
     674:	19 97       	sbiw	r26, 0x09	; 9
     676:	09 95       	icall
        
        return 1;                                                                            /* return error */
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	1f c0       	rjmp	.+62     	; 0x6bc <ds3231_set_32khz_output+0x8c>
    }
    prev &= ~(1 << 3);                                                                       /* clear config */
    prev |= enable << 3;                                                                     /* set enable */
     67e:	49 81       	ldd	r20, Y+1	; 0x01
     680:	47 7f       	andi	r20, 0xF7	; 247
     682:	60 2f       	mov	r22, r16
     684:	66 0f       	add	r22, r22
     686:	66 0f       	add	r22, r22
     688:	66 0f       	add	r22, r22
     68a:	46 2b       	or	r20, r22
     68c:	49 83       	std	Y+1, r20	; 0x01
    res = a_ds3231_iic_write(handle, DS3231_REG_STATUS, prev);                               /* write status */
     68e:	6f e0       	ldi	r22, 0x0F	; 15
     690:	c7 01       	movw	r24, r14
     692:	07 dd       	rcall	.-1522   	; 0xa2 <a_ds3231_iic_write>
    if (res != 0)                                                                            /* check result */
     694:	88 23       	and	r24, r24
     696:	89 f0       	breq	.+34     	; 0x6ba <ds3231_set_32khz_output+0x8a>
    {
        handle->debug_print("ds3231: write status failed.\n");                               /* write status failed */
     698:	86 e1       	ldi	r24, 0x16	; 22
     69a:	96 e0       	ldi	r25, 0x06	; 6
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	d7 01       	movw	r26, r14
     6a2:	18 96       	adiw	r26, 0x08	; 8
     6a4:	ed 91       	ld	r30, X+
     6a6:	fc 91       	ld	r31, X
     6a8:	19 97       	sbiw	r26, 0x09	; 9
     6aa:	09 95       	icall
        
        return 1;                                                                            /* return error */
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <ds3231_set_32khz_output+0x8c>
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                      /* check handle */
    {
        return 2;                                                                            /* return error */
     6b2:	12 e0       	ldi	r17, 0x02	; 2
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <ds3231_set_32khz_output+0x8c>
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
    {
        return 3;                                                                            /* return error */
     6b6:	13 e0       	ldi	r17, 0x03	; 3
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <ds3231_set_32khz_output+0x8c>
        handle->debug_print("ds3231: write status failed.\n");                               /* write status failed */
        
        return 1;                                                                            /* return error */
    }
    
    return 0;                                                                                /* success return 0 */
     6ba:	10 e0       	ldi	r17, 0x00	; 0
}
     6bc:	81 2f       	mov	r24, r17
     6be:	0f 90       	pop	r0
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <ds3231_basic_init>:
 *         - 0 success
 *         - 1 init failed
 * @note   none
 */
uint8_t ds3231_basic_init(void)
{
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	1f 92       	push	r1
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
    uint8_t res;
    int8_t reg;
    
    /* link functions */
    DRIVER_DS3231_LINK_INIT(&gs_handle, ds3231_handle_t);
     6d8:	e0 e7       	ldi	r30, 0x70	; 112
     6da:	f8 e0       	ldi	r31, 0x08	; 8
     6dc:	8f e0       	ldi	r24, 0x0F	; 15
     6de:	df 01       	movw	r26, r30
     6e0:	1d 92       	st	X+, r1
     6e2:	8a 95       	dec	r24
     6e4:	e9 f7       	brne	.-6      	; 0x6e0 <ds3231_basic_init+0x12>
    DRIVER_DS3231_LINK_IIC_INIT(&gs_handle, ds3231_interface_iic_init);
     6e6:	88 e3       	ldi	r24, 0x38	; 56
     6e8:	94 e0       	ldi	r25, 0x04	; 4
     6ea:	91 83       	std	Z+1, r25	; 0x01
     6ec:	80 83       	st	Z, r24
    DRIVER_DS3231_LINK_IIC_DEINIT(&gs_handle, ds3231_interface_iic_deinit);
     6ee:	8f e3       	ldi	r24, 0x3F	; 63
     6f0:	94 e0       	ldi	r25, 0x04	; 4
     6f2:	93 83       	std	Z+3, r25	; 0x03
     6f4:	82 83       	std	Z+2, r24	; 0x02
    DRIVER_DS3231_LINK_IIC_READ(&gs_handle, ds3231_interface_iic_read);
     6f6:	81 e4       	ldi	r24, 0x41	; 65
     6f8:	94 e0       	ldi	r25, 0x04	; 4
     6fa:	97 83       	std	Z+7, r25	; 0x07
     6fc:	86 83       	std	Z+6, r24	; 0x06
    DRIVER_DS3231_LINK_IIC_WRITE(&gs_handle, ds3231_interface_iic_write);
     6fe:	86 e7       	ldi	r24, 0x76	; 118
     700:	94 e0       	ldi	r25, 0x04	; 4
     702:	95 83       	std	Z+5, r25	; 0x05
     704:	84 83       	std	Z+4, r24	; 0x04
    DRIVER_DS3231_LINK_DELAY_MS(&gs_handle, ds3231_interface_delay_ms);
     706:	86 e8       	ldi	r24, 0x86	; 134
     708:	94 e0       	ldi	r25, 0x04	; 4
     70a:	95 87       	std	Z+13, r25	; 0x0d
     70c:	84 87       	std	Z+12, r24	; 0x0c
    DRIVER_DS3231_LINK_DEBUG_PRINT(&gs_handle, ds3231_interface_debug_print);
     70e:	87 e8       	ldi	r24, 0x87	; 135
     710:	94 e0       	ldi	r25, 0x04	; 4
     712:	91 87       	std	Z+9, r25	; 0x09
     714:	80 87       	std	Z+8, r24	; 0x08
    DRIVER_DS3231_LINK_RECEIVE_CALLBACK(&gs_handle, ds3231_interface_receive_callback);
     716:	8e e8       	ldi	r24, 0x8E	; 142
     718:	94 e0       	ldi	r25, 0x04	; 4
     71a:	93 87       	std	Z+11, r25	; 0x0b
     71c:	82 87       	std	Z+10, r24	; 0x0a

    /* init ds3231 */
    res = ds3231_init(&gs_handle);
     71e:	cf 01       	movw	r24, r30
     720:	77 de       	rcall	.-786    	; 0x410 <ds3231_init>
    if (res != 0)
     722:	88 23       	and	r24, r24
     724:	49 f0       	breq	.+18     	; 0x738 <ds3231_basic_init+0x6a>
    {
        ds3231_interface_debug_print("ds3231: init failed.\n");
     726:	8d e7       	ldi	r24, 0x7D	; 125
     728:	96 e0       	ldi	r25, 0x06	; 6
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	ef d0       	rcall	.+478    	; 0x90e <ds3231_interface_debug_print>
        
        return 1;
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	98 c0       	rjmp	.+304    	; 0x868 <ds3231_basic_init+0x19a>
    }
    
    /* set oscillator */
    res = ds3231_set_oscillator(&gs_handle, DS3231_BOOL_TRUE);
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	80 e7       	ldi	r24, 0x70	; 112
     73c:	98 e0       	ldi	r25, 0x08	; 8
     73e:	da dc       	rcall	.-1612   	; 0xf4 <ds3231_set_oscillator>
    if (res != 0)
     740:	88 23       	and	r24, r24
     742:	61 f0       	breq	.+24     	; 0x75c <ds3231_basic_init+0x8e>
    {
        ds3231_interface_debug_print("ds3231: set oscillator failed.\n");
     744:	83 e9       	ldi	r24, 0x93	; 147
     746:	96 e0       	ldi	r25, 0x06	; 6
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
     74c:	e0 d0       	rcall	.+448    	; 0x90e <ds3231_interface_debug_print>
     74e:	80 e7       	ldi	r24, 0x70	; 112
     750:	98 e0       	ldi	r25, 0x08	; 8
     752:	4a df       	rcall	.-364    	; 0x5e8 <ds3231_deinit>
        
        return 1;
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    /* disable alarm1 */
    res = ds3231_set_alarm_interrupt(&gs_handle, DS3231_ALARM_1, DS3231_BOOL_FALSE);
     75a:	86 c0       	rjmp	.+268    	; 0x868 <ds3231_basic_init+0x19a>
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	80 e7       	ldi	r24, 0x70	; 112
     762:	98 e0       	ldi	r25, 0x08	; 8
     764:	17 dd       	rcall	.-1490   	; 0x194 <ds3231_set_alarm_interrupt>
    if (res != 0)
     766:	88 23       	and	r24, r24
    {
        ds3231_interface_debug_print("ds3231: set alarm1 interrupt failed.\n");
     768:	61 f0       	breq	.+24     	; 0x782 <ds3231_basic_init+0xb4>
     76a:	83 eb       	ldi	r24, 0xB3	; 179
     76c:	96 e0       	ldi	r25, 0x06	; 6
     76e:	9f 93       	push	r25
     770:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
     772:	cd d0       	rcall	.+410    	; 0x90e <ds3231_interface_debug_print>
     774:	80 e7       	ldi	r24, 0x70	; 112
     776:	98 e0       	ldi	r25, 0x08	; 8
     778:	37 df       	rcall	.-402    	; 0x5e8 <ds3231_deinit>
        
        return 1;
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    /* disable alarm2 */
    res = ds3231_set_alarm_interrupt(&gs_handle, DS3231_ALARM_2, DS3231_BOOL_FALSE);
     780:	73 c0       	rjmp	.+230    	; 0x868 <ds3231_basic_init+0x19a>
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	80 e7       	ldi	r24, 0x70	; 112
     788:	98 e0       	ldi	r25, 0x08	; 8
    if (res != 0)
     78a:	04 dd       	rcall	.-1528   	; 0x194 <ds3231_set_alarm_interrupt>
    {
        ds3231_interface_debug_print("ds3231: set alarm2 interrupt failed.\n");
     78c:	88 23       	and	r24, r24
     78e:	61 f0       	breq	.+24     	; 0x7a8 <ds3231_basic_init+0xda>
     790:	89 ed       	ldi	r24, 0xD9	; 217
     792:	96 e0       	ldi	r25, 0x06	; 6
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
     798:	ba d0       	rcall	.+372    	; 0x90e <ds3231_interface_debug_print>
     79a:	80 e7       	ldi	r24, 0x70	; 112
     79c:	98 e0       	ldi	r25, 0x08	; 8
        
        return 1;
     79e:	24 df       	rcall	.-440    	; 0x5e8 <ds3231_deinit>
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
    }
    
    /* set square wave */
    res = ds3231_set_pin(&gs_handle, DS3231_PIN_SQUARE_WAVE);
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	60 c0       	rjmp	.+192    	; 0x868 <ds3231_basic_init+0x19a>
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	80 e7       	ldi	r24, 0x70	; 112
    if (res != 0)
     7ac:	98 e0       	ldi	r25, 0x08	; 8
     7ae:	52 dd       	rcall	.-1372   	; 0x254 <ds3231_set_pin>
    {
        ds3231_interface_debug_print("ds3231: set pin failed.\n");
     7b0:	88 23       	and	r24, r24
     7b2:	61 f0       	breq	.+24     	; 0x7cc <ds3231_basic_init+0xfe>
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	96 e0       	ldi	r25, 0x06	; 6
     7b8:	9f 93       	push	r25
        (void)ds3231_deinit(&gs_handle);
     7ba:	8f 93       	push	r24
     7bc:	a8 d0       	rcall	.+336    	; 0x90e <ds3231_interface_debug_print>
     7be:	80 e7       	ldi	r24, 0x70	; 112
     7c0:	98 e0       	ldi	r25, 0x08	; 8
        
        return 1;
     7c2:	12 df       	rcall	.-476    	; 0x5e8 <ds3231_deinit>
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
    }
    
    /* disable square wave */
    res = ds3231_set_square_wave(&gs_handle, DS3231_BOOL_FALSE);
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	4e c0       	rjmp	.+156    	; 0x868 <ds3231_basic_init+0x19a>
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	80 e7       	ldi	r24, 0x70	; 112
     7d0:	98 e0       	ldi	r25, 0x08	; 8
    if (res != 0)
     7d2:	8e dd       	rcall	.-1252   	; 0x2f0 <ds3231_set_square_wave>
     7d4:	88 23       	and	r24, r24
    {
        ds3231_interface_debug_print("ds3231: set square wave failed.\n");
     7d6:	61 f0       	breq	.+24     	; 0x7f0 <ds3231_basic_init+0x122>
     7d8:	88 e1       	ldi	r24, 0x18	; 24
     7da:	97 e0       	ldi	r25, 0x07	; 7
     7dc:	9f 93       	push	r25
     7de:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
     7e0:	96 d0       	rcall	.+300    	; 0x90e <ds3231_interface_debug_print>
     7e2:	80 e7       	ldi	r24, 0x70	; 112
     7e4:	98 e0       	ldi	r25, 0x08	; 8
        
        return 1;
     7e6:	00 df       	rcall	.-512    	; 0x5e8 <ds3231_deinit>
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
    }
    
    /* disable 32khz output */
    res = ds3231_set_32khz_output(&gs_handle, DS3231_BOOL_FALSE);
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	3c c0       	rjmp	.+120    	; 0x868 <ds3231_basic_init+0x19a>
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	80 e7       	ldi	r24, 0x70	; 112
     7f4:	98 e0       	ldi	r25, 0x08	; 8
    if (res != 0)
     7f6:	1c df       	rcall	.-456    	; 0x630 <ds3231_set_32khz_output>
     7f8:	88 23       	and	r24, r24
    {
        ds3231_interface_debug_print("ds3231: set 32khz output failed.\n");
     7fa:	61 f0       	breq	.+24     	; 0x814 <ds3231_basic_init+0x146>
     7fc:	89 e3       	ldi	r24, 0x39	; 57
     7fe:	97 e0       	ldi	r25, 0x07	; 7
     800:	9f 93       	push	r25
     802:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
     804:	84 d0       	rcall	.+264    	; 0x90e <ds3231_interface_debug_print>
     806:	80 e7       	ldi	r24, 0x70	; 112
     808:	98 e0       	ldi	r25, 0x08	; 8
        
        return 1;
     80a:	ee de       	rcall	.-548    	; 0x5e8 <ds3231_deinit>
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
    }
    
    /* convert to register */
    res = ds3231_aging_offset_convert_to_register(&gs_handle, DS3231_BASIC_DEFAULT_AGING_OFFSET, (int8_t *)&reg);
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	2a c0       	rjmp	.+84     	; 0x868 <ds3231_basic_init+0x19a>
     814:	9e 01       	movw	r18, r28
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	ba 01       	movw	r22, r20
     820:	80 e7       	ldi	r24, 0x70	; 112
    if (res != 0)
     822:	98 e0       	ldi	r25, 0x08	; 8
     824:	db dd       	rcall	.-1098   	; 0x3dc <ds3231_aging_offset_convert_to_register>
    {
        ds3231_interface_debug_print("ds3231: convert to register failed.\n");
     826:	88 23       	and	r24, r24
     828:	61 f0       	breq	.+24     	; 0x842 <ds3231_basic_init+0x174>
     82a:	8b e5       	ldi	r24, 0x5B	; 91
     82c:	97 e0       	ldi	r25, 0x07	; 7
        (void)ds3231_deinit(&gs_handle);
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	6d d0       	rcall	.+218    	; 0x90e <ds3231_interface_debug_print>
     834:	80 e7       	ldi	r24, 0x70	; 112
        
        return 1;
     836:	98 e0       	ldi	r25, 0x08	; 8
     838:	d7 de       	rcall	.-594    	; 0x5e8 <ds3231_deinit>
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
    }
    
    /* set aging offset */
    res = ds3231_set_aging_offset(&gs_handle, reg);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	13 c0       	rjmp	.+38     	; 0x868 <ds3231_basic_init+0x19a>
     842:	69 81       	ldd	r22, Y+1	; 0x01
     844:	80 e7       	ldi	r24, 0x70	; 112
     846:	98 e0       	ldi	r25, 0x08	; 8
    if (res != 0)
     848:	a2 dd       	rcall	.-1212   	; 0x38e <ds3231_set_aging_offset>
     84a:	88 23       	and	r24, r24
    {
        ds3231_interface_debug_print("ds3231: set aging offset failed.\n");
     84c:	61 f0       	breq	.+24     	; 0x866 <ds3231_basic_init+0x198>
     84e:	80 e8       	ldi	r24, 0x80	; 128
     850:	97 e0       	ldi	r25, 0x07	; 7
     852:	9f 93       	push	r25
     854:	8f 93       	push	r24
     856:	5b d0       	rcall	.+182    	; 0x90e <ds3231_interface_debug_print>
        (void)ds3231_deinit(&gs_handle);
     858:	80 e7       	ldi	r24, 0x70	; 112
     85a:	98 e0       	ldi	r25, 0x08	; 8
     85c:	c5 de       	rcall	.-630    	; 0x5e8 <ds3231_deinit>
     85e:	0f 90       	pop	r0
        
        return 1;
     860:	0f 90       	pop	r0
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	01 c0       	rjmp	.+2      	; 0x868 <ds3231_basic_init+0x19a>
     866:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    return 0;
     868:	0f 90       	pop	r0
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <ds3231_interface_iic_init>:
 * @note   none
 */
uint8_t ds3231_interface_iic_init(void)
{
	/* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	TWSR = 0;                         /* no prescaler */
     870:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     874:	88 e4       	ldi	r24, 0x48	; 72
     876:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

    return 0;
}
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	08 95       	ret

0000087e <ds3231_interface_iic_deinit>:
 */
uint8_t ds3231_interface_iic_deinit(void)
{
	
    return 0;
}
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret

00000882 <ds3231_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
	for (uint8_t i = 0; i < len; i++)
     896:	21 15       	cp	r18, r1
     898:	31 05       	cpc	r19, r1
     89a:	e1 f0       	breq	.+56     	; 0x8d4 <ds3231_interface_iic_read+0x52>
     89c:	79 01       	movw	r14, r18
     89e:	6a 01       	movw	r12, r20
     8a0:	b6 2e       	mov	r11, r22
	{
		i2c_rep_start((addr<<1)+I2C_WRITE);
     8a2:	08 2f       	mov	r16, r24
     8a4:	00 0f       	add	r16, r16
		i2c_write(reg);
		/* Send START condition with SLA+R */
		i2c_rep_start((addr<<1)+I2C_READ);
     8a6:	aa 24       	eor	r10, r10
     8a8:	a3 94       	inc	r10
     8aa:	a0 0e       	add	r10, r16
     8ac:	16 2f       	mov	r17, r22
     8ae:	c0 e0       	ldi	r28, 0x00	; 0
     8b0:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
	for (uint8_t i = 0; i < len; i++)
	{
		i2c_rep_start((addr<<1)+I2C_WRITE);
     8b2:	80 2f       	mov	r24, r16
     8b4:	5b d0       	rcall	.+182    	; 0x96c <i2c_rep_start>
		i2c_write(reg);
     8b6:	81 2f       	mov	r24, r17
     8b8:	5b d0       	rcall	.+182    	; 0x970 <i2c_write>
		/* Send START condition with SLA+R */
		i2c_rep_start((addr<<1)+I2C_READ);
     8ba:	8a 2d       	mov	r24, r10
     8bc:	57 d0       	rcall	.+174    	; 0x96c <i2c_rep_start>
		/* Receive data */
		buf[i] = i2c_readNak();
     8be:	cc 0d       	add	r28, r12
     8c0:	dd 1d       	adc	r29, r13
     8c2:	68 d0       	rcall	.+208    	; 0x994 <i2c_readNak>
     8c4:	88 83       	st	Y, r24
     8c6:	1f 5f       	subi	r17, 0xFF	; 255
		reg += 1;
     8c8:	c1 2f       	mov	r28, r17
 *             - 1 read failed
 * @note       none
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
	for (uint8_t i = 0; i < len; i++)
     8ca:	cb 19       	sub	r28, r11
     8cc:	d0 e0       	ldi	r29, 0x00	; 0
     8ce:	ce 15       	cp	r28, r14
     8d0:	df 05       	cpc	r29, r15
     8d2:	78 f3       	brcs	.-34     	; 0x8b2 <ds3231_interface_iic_read+0x30>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
		/* Receive data */
		buf[i] = i2c_readNak();
		reg += 1;
	}
    return 0;
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	08 95       	ret

000008ec <ds3231_interface_iic_write>:
     8ec:	1f 93       	push	r17
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t ds3231_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	16 2f       	mov	r17, r22
     8f4:	ea 01       	movw	r28, r20
	i2c_rep_start((addr<<1)+I2C_WRITE);
     8f6:	88 0f       	add	r24, r24
     8f8:	39 d0       	rcall	.+114    	; 0x96c <i2c_rep_start>
	i2c_write(reg);
     8fa:	81 2f       	mov	r24, r17
     8fc:	39 d0       	rcall	.+114    	; 0x970 <i2c_write>
	/* Write data */
	i2c_write(*buf);
     8fe:	88 81       	ld	r24, Y
     900:	37 d0       	rcall	.+110    	; 0x970 <i2c_write>
     902:	80 e0       	ldi	r24, 0x00	; 0
	
    return 0;
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	08 95       	ret

0000090c <ds3231_interface_delay_ms>:
     90c:	08 95       	ret

0000090e <ds3231_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void ds3231_interface_debug_print(const char *const fmt, ...)
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
    
}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <ds3231_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the interrupt type
 * @note      none
 */
void ds3231_interface_receive_callback(uint8_t type)
{
     91c:	08 95       	ret

0000091e <i2c_start>:
		if( twst == TW_SR_DATA_ACK)
		{
			return TWDR;
		}
	}
}
     91e:	94 ea       	ldi	r25, 0xA4	; 164
     920:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     924:	ec eb       	ldi	r30, 0xBC	; 188
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	90 81       	ld	r25, Z
     92a:	99 23       	and	r25, r25
     92c:	ec f7       	brge	.-6      	; 0x928 <i2c_start+0xa>
     92e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     932:	98 7f       	andi	r25, 0xF8	; 248
     934:	98 30       	cpi	r25, 0x08	; 8
     936:	11 f0       	breq	.+4      	; 0x93c <i2c_start+0x1e>
     938:	90 31       	cpi	r25, 0x10	; 16
     93a:	a1 f4       	brne	.+40     	; 0x964 <i2c_start+0x46>
     93c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     940:	84 e8       	ldi	r24, 0x84	; 132
     942:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     946:	ec eb       	ldi	r30, 0xBC	; 188
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	88 23       	and	r24, r24
     94e:	ec f7       	brge	.-6      	; 0x94a <i2c_start+0x2c>
     950:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     954:	98 7f       	andi	r25, 0xF8	; 248
     956:	98 31       	cpi	r25, 0x18	; 24
     958:	39 f0       	breq	.+14     	; 0x968 <i2c_start+0x4a>
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 34       	cpi	r25, 0x40	; 64
     95e:	29 f4       	brne	.+10     	; 0x96a <i2c_start+0x4c>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	08 95       	ret
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	08 95       	ret
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	08 95       	ret

0000096c <i2c_rep_start>:
     96c:	d8 cf       	rjmp	.-80     	; 0x91e <i2c_start>
     96e:	08 95       	ret

00000970 <i2c_write>:
     970:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     974:	84 e8       	ldi	r24, 0x84	; 132
     976:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     97a:	ec eb       	ldi	r30, 0xBC	; 188
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	88 23       	and	r24, r24
     982:	ec f7       	brge	.-6      	; 0x97e <i2c_write+0xe>
     984:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     988:	98 7f       	andi	r25, 0xF8	; 248
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	98 32       	cpi	r25, 0x28	; 40
     98e:	09 f4       	brne	.+2      	; 0x992 <i2c_write+0x22>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret

00000994 <i2c_readNak>:
Outputs:	Data received from I2C device
Description:Receives and returns the data from I2C device.
******************************************************************** */
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     994:	84 e8       	ldi	r24, 0x84	; 132
     996:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     99a:	ec eb       	ldi	r30, 0xBC	; 188
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	88 23       	and	r24, r24
     9a2:	ec f7       	brge	.-6      	; 0x99e <i2c_readNak+0xa>
	
	return TWDR;
     9a4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
     9a8:	08 95       	ret

000009aa <enable_interrupts>:
 Outputs:	none
 Description:enables interrupt INT0 (pin D2 and sets falling condition for firing) 
 ******************************************************************** */
 void enable_interrupts()
 {
	 EIMSK |= (1<<INT0);	// Interrupt on pin D2
     9aa:	e8 9a       	sbi	0x1d, 0	; 29
	 EICRA |= (1<<ISC01);	// Falling condition
     9ac:	e9 e6       	ldi	r30, 0x69	; 105
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	82 60       	ori	r24, 0x02	; 2
     9b4:	80 83       	st	Z, r24
	 sei();
     9b6:	78 94       	sei
     9b8:	08 95       	ret

000009ba <interruptConfig>:
 Outputs:	none
 Description:sets PIND2 as input 
 ******************************************************************** */
 void interruptConfig()
 {
	 DDRD &= ~(1<<PIND2);	// Input
     9ba:	52 98       	cbi	0x0a, 2	; 10
     9bc:	08 95       	ret

000009be <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
     9be:	8a b1       	in	r24, 0x0a	; 10
     9c0:	80 6f       	ori	r24, 0xF0	; 240
     9c2:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
     9c4:	8a b1       	in	r24, 0x0a	; 10
     9c6:	8b 60       	ori	r24, 0x0B	; 11
     9c8:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
     9ca:	20 9a       	sbi	0x04, 0	; 4
     9cc:	08 95       	ret

000009ce <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <lcd_write_4+0x6>
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <lcd_write_4+0x8>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
     9da:	19 82       	std	Y+1, r1	; 0x01
     9dc:	1a 82       	std	Y+2, r1	; 0x02
     9de:	1b 82       	std	Y+3, r1	; 0x03
     9e0:	1c 82       	std	Y+4, r1	; 0x04
     9e2:	fe 01       	movw	r30, r28
     9e4:	31 96       	adiw	r30, 0x01	; 1
     9e6:	27 e0       	ldi	r18, 0x07	; 7
     9e8:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     9ea:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
     9ec:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     9ee:	ac 01       	movw	r20, r24
     9f0:	02 2e       	mov	r0, r18
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <lcd_write_4+0x2a>
     9f4:	55 95       	asr	r21
     9f6:	47 95       	ror	r20
     9f8:	0a 94       	dec	r0
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <lcd_write_4+0x26>
     9fc:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
     9fe:	60 83       	st	Z, r22
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	31 09       	sbc	r19, r1
     a04:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
     a06:	23 30       	cpi	r18, 0x03	; 3
     a08:	31 05       	cpc	r19, r1
     a0a:	89 f7       	brne	.-30     	; 0x9ee <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
     a0c:	8b b1       	in	r24, 0x0b	; 11
     a0e:	8f 70       	andi	r24, 0x0F	; 15
     a10:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
     a12:	2b b1       	in	r18, 0x0b	; 11
     a14:	49 81       	ldd	r20, Y+1	; 0x01
     a16:	30 e8       	ldi	r19, 0x80	; 128
     a18:	43 9f       	mul	r20, r19
     a1a:	c0 01       	movw	r24, r0
     a1c:	11 24       	eor	r1, r1
     a1e:	9a 81       	ldd	r25, Y+2	; 0x02
     a20:	30 e4       	ldi	r19, 0x40	; 64
     a22:	93 9f       	mul	r25, r19
     a24:	a0 01       	movw	r20, r0
     a26:	11 24       	eor	r1, r1
     a28:	48 2b       	or	r20, r24
     a2a:	42 2b       	or	r20, r18
     a2c:	9b 81       	ldd	r25, Y+3	; 0x03
     a2e:	80 e2       	ldi	r24, 0x20	; 32
     a30:	98 9f       	mul	r25, r24
     a32:	90 01       	movw	r18, r0
     a34:	11 24       	eor	r1, r1
     a36:	24 2b       	or	r18, r20
     a38:	9c 81       	ldd	r25, Y+4	; 0x04
     a3a:	30 e1       	ldi	r19, 0x10	; 16
     a3c:	93 9f       	mul	r25, r19
     a3e:	c0 01       	movw	r24, r0
     a40:	11 24       	eor	r1, r1
     a42:	82 2b       	or	r24, r18
     a44:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
     a46:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a48:	85 e0       	ldi	r24, 0x05	; 5
     a4a:	8a 95       	dec	r24
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <lcd_write_4+0x7c>
     a4e:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
     a50:	5b 98       	cbi	0x0b, 3	; 11
     a52:	35 e0       	ldi	r19, 0x05	; 5
     a54:	3a 95       	dec	r19
     a56:	f1 f7       	brne	.-4      	; 0xa54 <lcd_write_4+0x86>
     a58:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
     a68:	cf 93       	push	r28
     a6a:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     a6c:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
     a6e:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     a70:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
     a72:	ad df       	rcall	.-166    	; 0x9ce <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
     a74:	8c 2f       	mov	r24, r28
     a76:	82 95       	swap	r24
     a78:	80 7f       	andi	r24, 0xF0	; 240
     a7a:	a9 df       	rcall	.-174    	; 0x9ce <lcd_write_4>
}
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
     a80:	cf 93       	push	r28
     a82:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     a84:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
     a86:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     a88:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
     a8a:	a1 df       	rcall	.-190    	; 0x9ce <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
     a8c:	8c 2f       	mov	r24, r28
     a8e:	82 95       	swap	r24
     a90:	80 7f       	andi	r24, 0xF0	; 240
     a92:	9d df       	rcall	.-198    	; 0x9ce <lcd_write_4>
}
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
     a98:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
     a9a:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
     a9c:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     a9e:	5b 9a       	sbi	0x0b, 3	; 11
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	8a 95       	dec	r24
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <lcd_check_BF_4+0xa>
     aa6:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
     aa8:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     aaa:	5b 98       	cbi	0x0b, 3	; 11
     aac:	95 e0       	ldi	r25, 0x05	; 5
     aae:	9a 95       	dec	r25
     ab0:	f1 f7       	brne	.-4      	; 0xaae <lcd_check_BF_4+0x16>
     ab2:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     ab4:	5b 9a       	sbi	0x0b, 3	; 11
     ab6:	95 e0       	ldi	r25, 0x05	; 5
     ab8:	9a 95       	dec	r25
     aba:	f1 f7       	brne	.-4      	; 0xab8 <lcd_check_BF_4+0x20>
     abc:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     abe:	5b 98       	cbi	0x0b, 3	; 11
     ac0:	95 e0       	ldi	r25, 0x05	; 5
     ac2:	9a 95       	dec	r25
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <lcd_check_BF_4+0x2a>
     ac6:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
     ac8:	88 23       	and	r24, r24
     aca:	4c f3       	brlt	.-46     	; 0xa9e <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
     acc:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
     ace:	57 9a       	sbi	0x0a, 7	; 10
     ad0:	08 95       	ret

00000ad2 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad2:	2f ef       	ldi	r18, 0xFF	; 255
     ad4:	80 e7       	ldi	r24, 0x70	; 112
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	21 50       	subi	r18, 0x01	; 1
     ada:	80 40       	sbci	r24, 0x00	; 0
     adc:	90 40       	sbci	r25, 0x00	; 0
     ade:	e1 f7       	brne	.-8      	; 0xad8 <lcd_init_4f+0x6>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <lcd_init_4f+0x10>
     ae2:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
     ae4:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
     ae6:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
     ae8:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
     aea:	80 e3       	ldi	r24, 0x30	; 48
     aec:	70 df       	rcall	.-288    	; 0x9ce <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aee:	25 e3       	ldi	r18, 0x35	; 53
     af0:	2a 95       	dec	r18
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <lcd_init_4f+0x1e>
     af4:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
     af6:	80 e3       	ldi	r24, 0x30	; 48
     af8:	6a df       	rcall	.-300    	; 0x9ce <lcd_write_4>
     afa:	8f e1       	ldi	r24, 0x1F	; 31
     afc:	93 e0       	ldi	r25, 0x03	; 3
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <lcd_init_4f+0x2c>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
     b04:	00 00       	nop
     b06:	80 e3       	ldi	r24, 0x30	; 48
     b08:	62 df       	rcall	.-316    	; 0x9ce <lcd_write_4>
     b0a:	8f e3       	ldi	r24, 0x3F	; 63
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <lcd_init_4f+0x3c>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
     b14:	00 00       	nop
     b16:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
     b18:	5a df       	rcall	.-332    	; 0x9ce <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
     b1a:	be df       	rcall	.-132    	; 0xa98 <lcd_check_BF_4>
     b1c:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     b1e:	b0 df       	rcall	.-160    	; 0xa80 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
     b20:	bb df       	rcall	.-138    	; 0xa98 <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
     b22:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
     b24:	ad df       	rcall	.-166    	; 0xa80 <lcd_write_instruction_4f>
     b26:	b8 df       	rcall	.-144    	; 0xa98 <lcd_check_BF_4>
     b28:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
     b2a:	aa df       	rcall	.-172    	; 0xa80 <lcd_write_instruction_4f>
     b2c:	b5 df       	rcall	.-150    	; 0xa98 <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	a7 df       	rcall	.-178    	; 0xa80 <lcd_write_instruction_4f>
     b32:	b2 df       	rcall	.-156    	; 0xa98 <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     b34:	8c e0       	ldi	r24, 0x0C	; 12
     b36:	a4 cf       	rjmp	.-184    	; 0xa80 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
     b38:	08 95       	ret

00000b3a <initLCD>:
     b3a:	41 df       	rcall	.-382    	; 0x9be <configLCDPorts>
     b3c:	ca cf       	rjmp	.-108    	; 0xad2 <lcd_init_4f>
     b3e:	08 95       	ret

00000b40 <lcd_write_string_4f>:
{
	/* Configure the data ports and pins */
	configLCDPorts();

	/* Initialize the LCD controller as determined by instructions */
	lcd_init_4f();
     b40:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	00 d0       	rcall	.+0      	; 0xb4a <lcd_write_string_4f+0xa>
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	e8 0f       	add	r30, r24
     b5a:	f9 1f       	adc	r31, r25
     b5c:	80 81       	ld	r24, Z
     b5e:	88 23       	and	r24, r24
     b60:	99 f0       	breq	.+38     	; 0xb88 <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
     b62:	9a df       	rcall	.-204    	; 0xa98 <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
     b64:	e9 81       	ldd	r30, Y+1	; 0x01
     b66:	fa 81       	ldd	r31, Y+2	; 0x02
     b68:	e0 0f       	add	r30, r16
     b6a:	f1 1f       	adc	r31, r17
     b6c:	80 81       	ld	r24, Z
     b6e:	7c df       	rcall	.-264    	; 0xa68 <lcd_write_character_4f>
        i++;
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
     b7a:	e9 81       	ldd	r30, Y+1	; 0x01
     b7c:	fa 81       	ldd	r31, Y+2	; 0x02
     b7e:	e0 0f       	add	r30, r16
     b80:	f1 1f       	adc	r31, r17
     b82:	80 81       	ld	r24, Z
     b84:	81 11       	cpse	r24, r1
     b86:	ed cf       	rjmp	.-38     	; 0xb62 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	af 97       	sbiw	r28, 0x2f	; 47
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	18 2f       	mov	r17, r24
     bb6:	d6 2e       	mov	r13, r22
     bb8:	07 2f       	mov	r16, r23
     bba:	84 2f       	mov	r24, r20
     bbc:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
     bbe:	20 e2       	ldi	r18, 0x20	; 32
     bc0:	30 e2       	ldi	r19, 0x20	; 32
     bc2:	3a 83       	std	Y+2, r19	; 0x02
     bc4:	29 83       	std	Y+1, r18	; 0x01
     bc6:	20 e2       	ldi	r18, 0x20	; 32
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	3c 83       	std	Y+4, r19	; 0x04
     bcc:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
     bce:	96 e1       	ldi	r25, 0x16	; 22
     bd0:	e5 e0       	ldi	r30, 0x05	; 5
     bd2:	f8 e0       	ldi	r31, 0x08	; 8
     bd4:	de 01       	movw	r26, r28
     bd6:	5a 96       	adiw	r26, 0x1a	; 26
     bd8:	01 90       	ld	r0, Z+
     bda:	0d 92       	st	X+, r0
     bdc:	9a 95       	dec	r25
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
     be0:	4f 3f       	cpi	r20, 0xFF	; 255
     be2:	31 f0       	breq	.+12     	; 0xbf0 <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     be4:	4a e0       	ldi	r20, 0x0A	; 10
     be6:	be 01       	movw	r22, r28
     be8:	6f 5f       	subi	r22, 0xFF	; 255
     bea:	7f 4f       	sbci	r23, 0xFF	; 255
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	67 d2       	rcall	.+1230   	; 0x10be <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
     bf0:	61 ef       	ldi	r22, 0xF1	; 241
     bf2:	77 e0       	ldi	r23, 0x07	; 7
     bf4:	8d 2d       	mov	r24, r13
     bf6:	90 2f       	mov	r25, r16
     bf8:	59 d2       	rcall	.+1202   	; 0x10ac <strcmp>
     bfa:	89 2b       	or	r24, r25
     bfc:	09 f4       	brne	.+2      	; 0xc00 <updateLCDScreen+0x6a>
     bfe:	7f c0       	rjmp	.+254    	; 0xcfe <updateLCDScreen+0x168>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     c00:	61 ef       	ldi	r22, 0xF1	; 241
     c02:	77 e0       	ldi	r23, 0x07	; 7
     c04:	c7 01       	movw	r24, r14
     c06:	52 d2       	rcall	.+1188   	; 0x10ac <strcmp>
     c08:	89 2b       	or	r24, r25
     c0a:	31 f4       	brne	.+12     	; 0xc18 <updateLCDScreen+0x82>
     c0c:	0f 2e       	mov	r0, r31
     c0e:	fc e4       	ldi	r31, 0x4C	; 76
     c10:	ef 2e       	mov	r14, r31
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	ff 2e       	mov	r15, r31
     c16:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     c18:	ce 01       	movw	r24, r28
     c1a:	4a 96       	adiw	r24, 0x1a	; 26
     c1c:	9f 93       	push	r25
     c1e:	8f 93       	push	r24
     c20:	ff 92       	push	r15
     c22:	ef 92       	push	r14
     c24:	49 97       	sbiw	r24, 0x19	; 25
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0f 93       	push	r16
     c2c:	df 92       	push	r13
     c2e:	86 ef       	ldi	r24, 0xF6	; 246
     c30:	97 e0       	ldi	r25, 0x07	; 7
     c32:	9f 93       	push	r25
     c34:	8f 93       	push	r24
     c36:	1f 92       	push	r1
     c38:	85 e1       	ldi	r24, 0x15	; 21
     c3a:	8f 93       	push	r24
     c3c:	ce 01       	movw	r24, r28
     c3e:	05 96       	adiw	r24, 0x05	; 5
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	5f d2       	rcall	.+1214   	; 0x1104 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
     c46:	6f ef       	ldi	r22, 0xFF	; 255
     c48:	77 e0       	ldi	r23, 0x07	; 7
     c4a:	8d 2d       	mov	r24, r13
     c4c:	90 2f       	mov	r25, r16
     c4e:	2e d2       	rcall	.+1116   	; 0x10ac <strcmp>
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	89 2b       	or	r24, r25
     c5c:	a9 f4       	brne	.+42     	; 0xc88 <updateLCDScreen+0xf2>
     c5e:	ce 01       	movw	r24, r28
     c60:	4a 96       	adiw	r24, 0x1a	; 26
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	8c ef       	ldi	r24, 0xFC	; 252
     c68:	97 e0       	ldi	r25, 0x07	; 7
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	1f 92       	push	r1
     c70:	85 e1       	ldi	r24, 0x15	; 21
     c72:	8f 93       	push	r24
     c74:	ce 01       	movw	r24, r28
     c76:	05 96       	adiw	r24, 0x05	; 5
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	43 d2       	rcall	.+1158   	; 0x1104 <snprintf>
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
     c88:	12 30       	cpi	r17, 0x02	; 2
     c8a:	61 f0       	breq	.+24     	; 0xca4 <updateLCDScreen+0x10e>
     c8c:	18 f4       	brcc	.+6      	; 0xc94 <updateLCDScreen+0xfe>
     c8e:	11 30       	cpi	r17, 0x01	; 1
     c90:	31 f0       	breq	.+12     	; 0xc9e <updateLCDScreen+0x108>
     c92:	10 c0       	rjmp	.+32     	; 0xcb4 <updateLCDScreen+0x11e>
     c94:	13 30       	cpi	r17, 0x03	; 3
     c96:	49 f0       	breq	.+18     	; 0xcaa <updateLCDScreen+0x114>
     c98:	14 30       	cpi	r17, 0x04	; 4
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne);
     c9a:	51 f0       	breq	.+20     	; 0xcb0 <updateLCDScreen+0x11a>
     c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <updateLCDScreen+0x11e>
			break;
     c9e:	80 e8       	ldi	r24, 0x80	; 128
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo);
     ca0:	ef de       	rcall	.-546    	; 0xa80 <lcd_write_instruction_4f>
     ca2:	08 c0       	rjmp	.+16     	; 0xcb4 <updateLCDScreen+0x11e>
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree);
     ca4:	80 ec       	ldi	r24, 0xC0	; 192
     ca6:	ec de       	rcall	.-552    	; 0xa80 <lcd_write_instruction_4f>
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <updateLCDScreen+0x11e>
			break;
     caa:	84 e9       	ldi	r24, 0x94	; 148
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour);
     cac:	e9 de       	rcall	.-558    	; 0xa80 <lcd_write_instruction_4f>
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <updateLCDScreen+0x11e>
     cb0:	84 ed       	ldi	r24, 0xD4	; 212
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow);
     cb2:	e6 de       	rcall	.-564    	; 0xa80 <lcd_write_instruction_4f>
     cb4:	ce 01       	movw	r24, r28
     cb6:	05 96       	adiw	r24, 0x05	; 5
     cb8:	43 df       	rcall	.-378    	; 0xb40 <lcd_write_string_4f>
}
     cba:	46 c0       	rjmp	.+140    	; 0xd48 <updateLCDScreen+0x1b2>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     cbc:	ce 01       	movw	r24, r28
     cbe:	4a 96       	adiw	r24, 0x1a	; 26
     cc0:	9f 93       	push	r25
     cc2:	8f 93       	push	r24
     cc4:	8c e4       	ldi	r24, 0x4C	; 76
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	9e 01       	movw	r18, r28
     cce:	2f 5f       	subi	r18, 0xFF	; 255
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	3f 93       	push	r19
     cd4:	2f 93       	push	r18
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	86 ef       	ldi	r24, 0xF6	; 246
     cdc:	97 e0       	ldi	r25, 0x07	; 7
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	1f 92       	push	r1
     ce4:	85 e1       	ldi	r24, 0x15	; 21
     ce6:	8f 93       	push	r24
     ce8:	ce 01       	movw	r24, r28
     cea:	05 96       	adiw	r24, 0x05	; 5
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	09 d2       	rcall	.+1042   	; 0x1104 <snprintf>
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     cfc:	c5 cf       	rjmp	.-118    	; 0xc88 <updateLCDScreen+0xf2>
     cfe:	61 ef       	ldi	r22, 0xF1	; 241
     d00:	77 e0       	ldi	r23, 0x07	; 7
     d02:	c7 01       	movw	r24, r14
     d04:	d3 d1       	rcall	.+934    	; 0x10ac <strcmp>
     d06:	89 2b       	or	r24, r25
     d08:	c9 f2       	breq	.-78     	; 0xcbc <updateLCDScreen+0x126>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     d0a:	ce 01       	movw	r24, r28
     d0c:	4a 96       	adiw	r24, 0x1a	; 26
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	ff 92       	push	r15
     d14:	ef 92       	push	r14
     d16:	49 97       	sbiw	r24, 0x19	; 25
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	8c e4       	ldi	r24, 0x4C	; 76
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	86 ef       	ldi	r24, 0xF6	; 246
     d26:	97 e0       	ldi	r25, 0x07	; 7
     d28:	9f 93       	push	r25
     d2a:	8f 93       	push	r24
     d2c:	1f 92       	push	r1
     d2e:	85 e1       	ldi	r24, 0x15	; 21
     d30:	8f 93       	push	r24
     d32:	ce 01       	movw	r24, r28
     d34:	05 96       	adiw	r24, 0x05	; 5
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	e4 d1       	rcall	.+968    	; 0x1104 <snprintf>
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	a0 cf       	rjmp	.-192    	; 0xc88 <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow);
}
     d48:	af 96       	adiw	r28, 0x2f	; 47
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	08 95       	ret

00000d64 <clearScreen>:
Outputs:	none
Description:clears screen (all four lines)
******************************************************************** */
void clearScreen(void)
{
	updateLCDScreen(1, "CLEAR", NONE, "NONE" );
     d64:	21 ef       	ldi	r18, 0xF1	; 241
     d66:	37 e0       	ldi	r19, 0x07	; 7
     d68:	4f ef       	ldi	r20, 0xFF	; 255
     d6a:	6f ef       	ldi	r22, 0xFF	; 255
     d6c:	77 e0       	ldi	r23, 0x07	; 7
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	12 df       	rcall	.-476    	; 0xb96 <updateLCDScreen>
	updateLCDScreen(2, "CLEAR", NONE, "NONE" );
     d72:	21 ef       	ldi	r18, 0xF1	; 241
     d74:	37 e0       	ldi	r19, 0x07	; 7
     d76:	4f ef       	ldi	r20, 0xFF	; 255
     d78:	6f ef       	ldi	r22, 0xFF	; 255
     d7a:	77 e0       	ldi	r23, 0x07	; 7
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	0b df       	rcall	.-490    	; 0xb96 <updateLCDScreen>
	updateLCDScreen(3, "CLEAR", NONE, "NONE" );
     d80:	21 ef       	ldi	r18, 0xF1	; 241
     d82:	37 e0       	ldi	r19, 0x07	; 7
     d84:	4f ef       	ldi	r20, 0xFF	; 255
     d86:	6f ef       	ldi	r22, 0xFF	; 255
     d88:	77 e0       	ldi	r23, 0x07	; 7
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	04 df       	rcall	.-504    	; 0xb96 <updateLCDScreen>
	updateLCDScreen(4, "CLEAR", NONE, "NONE" );
     d8e:	21 ef       	ldi	r18, 0xF1	; 241
     d90:	37 e0       	ldi	r19, 0x07	; 7
     d92:	4f ef       	ldi	r20, 0xFF	; 255
     d94:	6f ef       	ldi	r22, 0xFF	; 255
     d96:	77 e0       	ldi	r23, 0x07	; 7
     d98:	84 e0       	ldi	r24, 0x04	; 4
     d9a:	fd ce       	rjmp	.-518    	; 0xb96 <updateLCDScreen>
     d9c:	08 95       	ret

00000d9e <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     d9e:	83 b7       	in	r24, 0x33	; 51
     da0:	81 7f       	andi	r24, 0xF1	; 241
     da2:	84 60       	ori	r24, 0x04	; 4
     da4:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
     da6:	83 b7       	in	r24, 0x33	; 51
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
     dac:	83 b7       	in	r24, 0x33	; 51
     dae:	81 60       	ori	r24, 0x01	; 1
     db0:	83 bf       	out	0x33, r24	; 51
     db2:	88 95       	sleep
     db4:	83 b7       	in	r24, 0x33	; 51
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
     dba:	83 b7       	in	r24, 0x33	; 51
     dbc:	8e 7f       	andi	r24, 0xFE	; 254
     dbe:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
     dc0:	e4 e6       	ldi	r30, 0x64	; 100
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 71       	andi	r24, 0x10	; 16
     dc8:	80 83       	st	Z, r24
     dca:	08 95       	ret

00000dcc <__vector_1>:
Inputs:		none
Outputs:	none
Description:wakes up MCU when an external interrupt on pin PIND2 occurs
******************************************************************** */
ISR(INT0_vect)
{
     dcc:	1f 92       	push	r1
     dce:	0f 92       	push	r0
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	0f 92       	push	r0
     dd4:	11 24       	eor	r1, r1
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
	toggle = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     de2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
     de6:	9f 91       	pop	r25
     de8:	8f 91       	pop	r24
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <setRegistersAlarm1>:


void setRegistersAlarm1(void)
{
/*------- Alarm 1 ---------- */
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     df4:	80 ed       	ldi	r24, 0xD0	; 208
     df6:	93 dd       	rcall	.-1242   	; 0x91e <i2c_start>
	i2c_write(DS3231_REG_ALARM1_SECOND);
     df8:	87 e0       	ldi	r24, 0x07	; 7
     dfa:	ba dd       	rcall	.-1164   	; 0x970 <i2c_write>
	i2c_write(dec2bcd(7));	// Seconds in dec
     dfc:	87 e0       	ldi	r24, 0x07	; 7
     dfe:	b8 dd       	rcall	.-1168   	; 0x970 <i2c_write>
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     e00:	80 ed       	ldi	r24, 0xD0	; 208
     e02:	8d dd       	rcall	.-1254   	; 0x91e <i2c_start>
	i2c_write(DS3231_REG_ALARM1_MINUTE);
     e04:	88 e0       	ldi	r24, 0x08	; 8
     e06:	b4 dd       	rcall	.-1176   	; 0x970 <i2c_write>
	i2c_write(128);
     e08:	80 e8       	ldi	r24, 0x80	; 128
     e0a:	b2 dd       	rcall	.-1180   	; 0x970 <i2c_write>
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     e0c:	80 ed       	ldi	r24, 0xD0	; 208
     e0e:	87 dd       	rcall	.-1266   	; 0x91e <i2c_start>
	i2c_write(DS3231_REG_ALARM1_HOUR);
     e10:	89 e0       	ldi	r24, 0x09	; 9
     e12:	ae dd       	rcall	.-1188   	; 0x970 <i2c_write>
	i2c_write(128);
     e14:	80 e8       	ldi	r24, 0x80	; 128
     e16:	ac dd       	rcall	.-1192   	; 0x970 <i2c_write>
     e18:	80 ed       	ldi	r24, 0xD0	; 208
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     e1a:	81 dd       	rcall	.-1278   	; 0x91e <i2c_start>
     e1c:	8a e0       	ldi	r24, 0x0A	; 10
     e1e:	a8 dd       	rcall	.-1200   	; 0x970 <i2c_write>
	i2c_write(DS3231_REG_ALARM1_WEEK);
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	a6 cd       	rjmp	.-1204   	; 0x970 <i2c_write>
     e24:	08 95       	ret

00000e26 <main>:
	i2c_write(128);
     e26:	89 de       	rcall	.-750    	; 0xb3a <initLCD>
     e28:	52 dc       	rcall	.-1884   	; 0x6ce <ds3231_basic_init>
     e2a:	c7 dd       	rcall	.-1138   	; 0x9ba <interruptConfig>
     e2c:	e3 df       	rcall	.-58     	; 0xdf4 <setRegistersAlarm1>
	interruptConfig();
	
	/* Set alarm */
	setRegistersAlarm1();
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     e2e:	80 ed       	ldi	r24, 0xD0	; 208
     e30:	76 dd       	rcall	.-1300   	; 0x91e <i2c_start>
	i2c_write(DS3231_REG_CONTROL);
     e32:	8e e0       	ldi	r24, 0x0E	; 14
     e34:	9d dd       	rcall	.-1222   	; 0x970 <i2c_write>
	i2c_write(0x5);		// Set bit 0 and 2 (alarm 1 and interrupt)
     e36:	85 e0       	ldi	r24, 0x05	; 5
     e38:	9b dd       	rcall	.-1226   	; 0x970 <i2c_write>

	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     e3a:	80 ed       	ldi	r24, 0xD0	; 208
     e3c:	70 dd       	rcall	.-1312   	; 0x91e <i2c_start>
     e3e:	8f e0       	ldi	r24, 0x0F	; 15
	i2c_write(DS3231_REG_STATUS);
     e40:	97 dd       	rcall	.-1234   	; 0x970 <i2c_write>
     e42:	80 e0       	ldi	r24, 0x00	; 0
	i2c_write(0x0);
     e44:	95 dd       	rcall	.-1238   	; 0x970 <i2c_write>
     e46:	21 ef       	ldi	r18, 0xF1	; 241
	/* Read and display current time */
		while(1)
		{
			
			//ds3231_basic_init();
			updateLCDScreen(1, "Basic init ", NONE, "NONE");
     e48:	37 e0       	ldi	r19, 0x07	; 7
     e4a:	4f ef       	ldi	r20, 0xFF	; 255
     e4c:	6b e1       	ldi	r22, 0x1B	; 27
     e4e:	78 e0       	ldi	r23, 0x08	; 8
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	a1 de       	rcall	.-702    	; 0xb96 <updateLCDScreen>
			
			setRegistersAlarm1();
     e54:	cf df       	rcall	.-98     	; 0xdf4 <setRegistersAlarm1>
			updateLCDScreen(2, "RegAlarm Set ", NONE, "NONE");
     e56:	21 ef       	ldi	r18, 0xF1	; 241
     e58:	37 e0       	ldi	r19, 0x07	; 7
     e5a:	4f ef       	ldi	r20, 0xFF	; 255
     e5c:	67 e2       	ldi	r22, 0x27	; 39
     e5e:	78 e0       	ldi	r23, 0x08	; 8
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	99 de       	rcall	.-718    	; 0xb96 <updateLCDScreen>
			
			i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     e64:	80 ed       	ldi	r24, 0xD0	; 208
     e66:	5b dd       	rcall	.-1354   	; 0x91e <i2c_start>
			i2c_write(DS3231_REG_CONTROL);
     e68:	8e e0       	ldi	r24, 0x0E	; 14
     e6a:	82 dd       	rcall	.-1276   	; 0x970 <i2c_write>
			i2c_write(0x5);		// Set bit 0 and 2 (alarm 1 and interrupt)
     e6c:	85 e0       	ldi	r24, 0x05	; 5
     e6e:	80 dd       	rcall	.-1280   	; 0x970 <i2c_write>
     e70:	21 ef       	ldi	r18, 0xF1	; 241

			updateLCDScreen(3, "Reg control set", NONE, "NONE");
     e72:	37 e0       	ldi	r19, 0x07	; 7
     e74:	4f ef       	ldi	r20, 0xFF	; 255
     e76:	65 e3       	ldi	r22, 0x35	; 53
     e78:	78 e0       	ldi	r23, 0x08	; 8
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	8c de       	rcall	.-744    	; 0xb96 <updateLCDScreen>
     e7e:	80 ed       	ldi	r24, 0xD0	; 208
			
			i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     e80:	4e dd       	rcall	.-1380   	; 0x91e <i2c_start>
     e82:	8f e0       	ldi	r24, 0x0F	; 15
			i2c_write(DS3231_REG_STATUS);
     e84:	75 dd       	rcall	.-1302   	; 0x970 <i2c_write>
     e86:	80 e0       	ldi	r24, 0x00	; 0
			i2c_write(0x0);
     e88:	73 dd       	rcall	.-1306   	; 0x970 <i2c_write>
     e8a:	21 ef       	ldi	r18, 0xF1	; 241
			
			updateLCDScreen(4, "Reg status set", NONE, "NONE");
     e8c:	37 e0       	ldi	r19, 0x07	; 7
     e8e:	4f ef       	ldi	r20, 0xFF	; 255
     e90:	65 e4       	ldi	r22, 0x45	; 69
     e92:	78 e0       	ldi	r23, 0x08	; 8
     e94:	84 e0       	ldi	r24, 0x04	; 4
			
			toggle = 0;
     e96:	7f de       	rcall	.-770    	; 0xb96 <updateLCDScreen>
     e98:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     e9c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			
			i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     ea0:	80 ed       	ldi	r24, 0xD0	; 208
     ea2:	3d dd       	rcall	.-1414   	; 0x91e <i2c_start>
			i2c_write(DS3231_REG_STATUS);
     ea4:	8f e0       	ldi	r24, 0x0F	; 15
			/* Send START condition with SLA+R */
			i2c_rep_start((DS3231_ADDRESS<<1)+I2C_READ);
     ea6:	64 dd       	rcall	.-1336   	; 0x970 <i2c_write>
     ea8:	81 ed       	ldi	r24, 0xD1	; 209
     eaa:	60 dd       	rcall	.-1344   	; 0x96c <i2c_rep_start>
			/* Receive data */
			uint8_t st_reg = i2c_readNak();
     eac:	73 dd       	rcall	.-1306   	; 0x994 <i2c_readNak>
     eae:	80 ff       	sbrs	r24, 0
		
			if ((st_reg & 0x01) > 0)
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <main+0x98>
     eb2:	80 ed       	ldi	r24, 0xD0	; 208
			{
				i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
     eb4:	34 dd       	rcall	.-1432   	; 0x91e <i2c_start>
     eb6:	8f e0       	ldi	r24, 0x0F	; 15
     eb8:	5b dd       	rcall	.-1354   	; 0x970 <i2c_write>
				i2c_write(DS3231_REG_STATUS);
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	59 dd       	rcall	.-1358   	; 0x970 <i2c_write>
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
				i2c_write(0x0);
     ec0:	8f e4       	ldi	r24, 0x4F	; 79
     ec2:	93 ec       	ldi	r25, 0xC3	; 195
     ec4:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ec6:	80 40       	sbci	r24, 0x00	; 0
     ec8:	90 40       	sbci	r25, 0x00	; 0
     eca:	e1 f7       	brne	.-8      	; 0xec4 <main+0x9e>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <main+0xa8>
     ece:	00 00       	nop
     ed0:	49 df       	rcall	.-366    	; 0xd64 <clearScreen>
     ed2:	6b dd       	rcall	.-1322   	; 0x9aa <enable_interrupts>
     ed4:	64 df       	rcall	.-312    	; 0xd9e <enterSleep>
     ed6:	b7 cf       	rjmp	.-146    	; 0xe46 <main+0x20>

00000ed8 <__divsf3>:
 			//updateLCDScreen(1, "ST: ", (st_reg & 0x01), "NONE");
//   			updateLCDScreen(2, "Hour: ", t.hour, "NONE");
//   			updateLCDScreen(3, "Minutes:", t.minute, "NONE");
//   			updateLCDScreen(4, "Second:", t.second, "NONE");
			_delay_ms(4000);
			clearScreen();
     ed8:	0c d0       	rcall	.+24     	; 0xef2 <__divsf3x>
     eda:	ae c0       	rjmp	.+348    	; 0x1038 <__fp_round>
			enable_interrupts();
     edc:	a6 d0       	rcall	.+332    	; 0x102a <__fp_pscB>
     ede:	40 f0       	brcs	.+16     	; 0xef0 <__divsf3+0x18>
			enterSleep();
     ee0:	9d d0       	rcall	.+314    	; 0x101c <__fp_pscA>
     ee2:	30 f0       	brcs	.+12     	; 0xef0 <__divsf3+0x18>
		}
     ee4:	21 f4       	brne	.+8      	; 0xeee <__divsf3+0x16>
     ee6:	5f 3f       	cpi	r21, 0xFF	; 255
     ee8:	19 f0       	breq	.+6      	; 0xef0 <__divsf3+0x18>
     eea:	8f c0       	rjmp	.+286    	; 0x100a <__fp_inf>
     eec:	51 11       	cpse	r21, r1
     eee:	d8 c0       	rjmp	.+432    	; 0x10a0 <__fp_szero>
     ef0:	92 c0       	rjmp	.+292    	; 0x1016 <__fp_nan>

00000ef2 <__divsf3x>:
     ef2:	b3 d0       	rcall	.+358    	; 0x105a <__fp_split3>
     ef4:	98 f3       	brcs	.-26     	; 0xedc <__divsf3+0x4>

00000ef6 <__divsf3_pse>:
     ef6:	99 23       	and	r25, r25
     ef8:	c9 f3       	breq	.-14     	; 0xeec <__divsf3+0x14>
     efa:	55 23       	and	r21, r21
     efc:	b1 f3       	breq	.-20     	; 0xeea <__divsf3+0x12>
     efe:	95 1b       	sub	r25, r21
     f00:	55 0b       	sbc	r21, r21
     f02:	bb 27       	eor	r27, r27
     f04:	aa 27       	eor	r26, r26
     f06:	62 17       	cp	r22, r18
     f08:	73 07       	cpc	r23, r19
     f0a:	84 07       	cpc	r24, r20
     f0c:	38 f0       	brcs	.+14     	; 0xf1c <__divsf3_pse+0x26>
     f0e:	9f 5f       	subi	r25, 0xFF	; 255
     f10:	5f 4f       	sbci	r21, 0xFF	; 255
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	44 1f       	adc	r20, r20
     f18:	aa 1f       	adc	r26, r26
     f1a:	a9 f3       	breq	.-22     	; 0xf06 <__divsf3_pse+0x10>
     f1c:	33 d0       	rcall	.+102    	; 0xf84 <__divsf3_pse+0x8e>
     f1e:	0e 2e       	mov	r0, r30
     f20:	3a f0       	brmi	.+14     	; 0xf30 <__divsf3_pse+0x3a>
     f22:	e0 e8       	ldi	r30, 0x80	; 128
     f24:	30 d0       	rcall	.+96     	; 0xf86 <__divsf3_pse+0x90>
     f26:	91 50       	subi	r25, 0x01	; 1
     f28:	50 40       	sbci	r21, 0x00	; 0
     f2a:	e6 95       	lsr	r30
     f2c:	00 1c       	adc	r0, r0
     f2e:	ca f7       	brpl	.-14     	; 0xf22 <__divsf3_pse+0x2c>
     f30:	29 d0       	rcall	.+82     	; 0xf84 <__divsf3_pse+0x8e>
     f32:	fe 2f       	mov	r31, r30
     f34:	27 d0       	rcall	.+78     	; 0xf84 <__divsf3_pse+0x8e>
     f36:	66 0f       	add	r22, r22
     f38:	77 1f       	adc	r23, r23
     f3a:	88 1f       	adc	r24, r24
     f3c:	bb 1f       	adc	r27, r27
     f3e:	26 17       	cp	r18, r22
     f40:	37 07       	cpc	r19, r23
     f42:	48 07       	cpc	r20, r24
     f44:	ab 07       	cpc	r26, r27
     f46:	b0 e8       	ldi	r27, 0x80	; 128
     f48:	09 f0       	breq	.+2      	; 0xf4c <__divsf3_pse+0x56>
     f4a:	bb 0b       	sbc	r27, r27
     f4c:	80 2d       	mov	r24, r0
     f4e:	bf 01       	movw	r22, r30
     f50:	ff 27       	eor	r31, r31
     f52:	93 58       	subi	r25, 0x83	; 131
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	2a f0       	brmi	.+10     	; 0xf62 <__divsf3_pse+0x6c>
     f58:	9e 3f       	cpi	r25, 0xFE	; 254
     f5a:	51 05       	cpc	r21, r1
     f5c:	68 f0       	brcs	.+26     	; 0xf78 <__divsf3_pse+0x82>
     f5e:	55 c0       	rjmp	.+170    	; 0x100a <__fp_inf>
     f60:	9f c0       	rjmp	.+318    	; 0x10a0 <__fp_szero>
     f62:	5f 3f       	cpi	r21, 0xFF	; 255
     f64:	ec f3       	brlt	.-6      	; 0xf60 <__divsf3_pse+0x6a>
     f66:	98 3e       	cpi	r25, 0xE8	; 232
     f68:	dc f3       	brlt	.-10     	; 0xf60 <__divsf3_pse+0x6a>
     f6a:	86 95       	lsr	r24
     f6c:	77 95       	ror	r23
     f6e:	67 95       	ror	r22
     f70:	b7 95       	ror	r27
     f72:	f7 95       	ror	r31
     f74:	9f 5f       	subi	r25, 0xFF	; 255
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__divsf3_pse+0x74>
     f78:	88 0f       	add	r24, r24
     f7a:	91 1d       	adc	r25, r1
     f7c:	96 95       	lsr	r25
     f7e:	87 95       	ror	r24
     f80:	97 f9       	bld	r25, 7
     f82:	08 95       	ret
     f84:	e1 e0       	ldi	r30, 0x01	; 1
     f86:	66 0f       	add	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	88 1f       	adc	r24, r24
     f8c:	bb 1f       	adc	r27, r27
     f8e:	62 17       	cp	r22, r18
     f90:	73 07       	cpc	r23, r19
     f92:	84 07       	cpc	r24, r20
     f94:	ba 07       	cpc	r27, r26
     f96:	20 f0       	brcs	.+8      	; 0xfa0 <__divsf3_pse+0xaa>
     f98:	62 1b       	sub	r22, r18
     f9a:	73 0b       	sbc	r23, r19
     f9c:	84 0b       	sbc	r24, r20
     f9e:	ba 0b       	sbc	r27, r26
     fa0:	ee 1f       	adc	r30, r30
     fa2:	88 f7       	brcc	.-30     	; 0xf86 <__divsf3_pse+0x90>
     fa4:	e0 95       	com	r30
     fa6:	08 95       	ret

00000fa8 <__fixsfsi>:
     fa8:	04 d0       	rcall	.+8      	; 0xfb2 <__fixunssfsi>
     faa:	68 94       	set
     fac:	b1 11       	cpse	r27, r1
     fae:	78 c0       	rjmp	.+240    	; 0x10a0 <__fp_szero>
     fb0:	08 95       	ret

00000fb2 <__fixunssfsi>:
     fb2:	5b d0       	rcall	.+182    	; 0x106a <__fp_splitA>
     fb4:	88 f0       	brcs	.+34     	; 0xfd8 <__fixunssfsi+0x26>
     fb6:	9f 57       	subi	r25, 0x7F	; 127
     fb8:	90 f0       	brcs	.+36     	; 0xfde <__fixunssfsi+0x2c>
     fba:	b9 2f       	mov	r27, r25
     fbc:	99 27       	eor	r25, r25
     fbe:	b7 51       	subi	r27, 0x17	; 23
     fc0:	a0 f0       	brcs	.+40     	; 0xfea <__fixunssfsi+0x38>
     fc2:	d1 f0       	breq	.+52     	; 0xff8 <__fixunssfsi+0x46>
     fc4:	66 0f       	add	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 1f       	adc	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	1a f0       	brmi	.+6      	; 0xfd4 <__fixunssfsi+0x22>
     fce:	ba 95       	dec	r27
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <__fixunssfsi+0x12>
     fd2:	12 c0       	rjmp	.+36     	; 0xff8 <__fixunssfsi+0x46>
     fd4:	b1 30       	cpi	r27, 0x01	; 1
     fd6:	81 f0       	breq	.+32     	; 0xff8 <__fixunssfsi+0x46>
     fd8:	62 d0       	rcall	.+196    	; 0x109e <__fp_zero>
     fda:	b1 e0       	ldi	r27, 0x01	; 1
     fdc:	08 95       	ret
     fde:	5f c0       	rjmp	.+190    	; 0x109e <__fp_zero>
     fe0:	67 2f       	mov	r22, r23
     fe2:	78 2f       	mov	r23, r24
     fe4:	88 27       	eor	r24, r24
     fe6:	b8 5f       	subi	r27, 0xF8	; 248
     fe8:	39 f0       	breq	.+14     	; 0xff8 <__fixunssfsi+0x46>
     fea:	b9 3f       	cpi	r27, 0xF9	; 249
     fec:	cc f3       	brlt	.-14     	; 0xfe0 <__fixunssfsi+0x2e>
     fee:	86 95       	lsr	r24
     ff0:	77 95       	ror	r23
     ff2:	67 95       	ror	r22
     ff4:	b3 95       	inc	r27
     ff6:	d9 f7       	brne	.-10     	; 0xfee <__fixunssfsi+0x3c>
     ff8:	3e f4       	brtc	.+14     	; 0x1008 <__fixunssfsi+0x56>
     ffa:	90 95       	com	r25
     ffc:	80 95       	com	r24
     ffe:	70 95       	com	r23
    1000:	61 95       	neg	r22
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	08 95       	ret

0000100a <__fp_inf>:
    100a:	97 f9       	bld	r25, 7
    100c:	9f 67       	ori	r25, 0x7F	; 127
    100e:	80 e8       	ldi	r24, 0x80	; 128
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	08 95       	ret

00001016 <__fp_nan>:
    1016:	9f ef       	ldi	r25, 0xFF	; 255
    1018:	80 ec       	ldi	r24, 0xC0	; 192
    101a:	08 95       	ret

0000101c <__fp_pscA>:
    101c:	00 24       	eor	r0, r0
    101e:	0a 94       	dec	r0
    1020:	16 16       	cp	r1, r22
    1022:	17 06       	cpc	r1, r23
    1024:	18 06       	cpc	r1, r24
    1026:	09 06       	cpc	r0, r25
    1028:	08 95       	ret

0000102a <__fp_pscB>:
    102a:	00 24       	eor	r0, r0
    102c:	0a 94       	dec	r0
    102e:	12 16       	cp	r1, r18
    1030:	13 06       	cpc	r1, r19
    1032:	14 06       	cpc	r1, r20
    1034:	05 06       	cpc	r0, r21
    1036:	08 95       	ret

00001038 <__fp_round>:
    1038:	09 2e       	mov	r0, r25
    103a:	03 94       	inc	r0
    103c:	00 0c       	add	r0, r0
    103e:	11 f4       	brne	.+4      	; 0x1044 <__fp_round+0xc>
    1040:	88 23       	and	r24, r24
    1042:	52 f0       	brmi	.+20     	; 0x1058 <__fp_round+0x20>
    1044:	bb 0f       	add	r27, r27
    1046:	40 f4       	brcc	.+16     	; 0x1058 <__fp_round+0x20>
    1048:	bf 2b       	or	r27, r31
    104a:	11 f4       	brne	.+4      	; 0x1050 <__fp_round+0x18>
    104c:	60 ff       	sbrs	r22, 0
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__fp_round+0x20>
    1050:	6f 5f       	subi	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	08 95       	ret

0000105a <__fp_split3>:
    105a:	57 fd       	sbrc	r21, 7
    105c:	90 58       	subi	r25, 0x80	; 128
    105e:	44 0f       	add	r20, r20
    1060:	55 1f       	adc	r21, r21
    1062:	59 f0       	breq	.+22     	; 0x107a <__fp_splitA+0x10>
    1064:	5f 3f       	cpi	r21, 0xFF	; 255
    1066:	71 f0       	breq	.+28     	; 0x1084 <__fp_splitA+0x1a>
    1068:	47 95       	ror	r20

0000106a <__fp_splitA>:
    106a:	88 0f       	add	r24, r24
    106c:	97 fb       	bst	r25, 7
    106e:	99 1f       	adc	r25, r25
    1070:	61 f0       	breq	.+24     	; 0x108a <__fp_splitA+0x20>
    1072:	9f 3f       	cpi	r25, 0xFF	; 255
    1074:	79 f0       	breq	.+30     	; 0x1094 <__fp_splitA+0x2a>
    1076:	87 95       	ror	r24
    1078:	08 95       	ret
    107a:	12 16       	cp	r1, r18
    107c:	13 06       	cpc	r1, r19
    107e:	14 06       	cpc	r1, r20
    1080:	55 1f       	adc	r21, r21
    1082:	f2 cf       	rjmp	.-28     	; 0x1068 <__fp_split3+0xe>
    1084:	46 95       	lsr	r20
    1086:	f1 df       	rcall	.-30     	; 0x106a <__fp_splitA>
    1088:	08 c0       	rjmp	.+16     	; 0x109a <__fp_splitA+0x30>
    108a:	16 16       	cp	r1, r22
    108c:	17 06       	cpc	r1, r23
    108e:	18 06       	cpc	r1, r24
    1090:	99 1f       	adc	r25, r25
    1092:	f1 cf       	rjmp	.-30     	; 0x1076 <__fp_splitA+0xc>
    1094:	86 95       	lsr	r24
    1096:	71 05       	cpc	r23, r1
    1098:	61 05       	cpc	r22, r1
    109a:	08 94       	sec
    109c:	08 95       	ret

0000109e <__fp_zero>:
    109e:	e8 94       	clt

000010a0 <__fp_szero>:
    10a0:	bb 27       	eor	r27, r27
    10a2:	66 27       	eor	r22, r22
    10a4:	77 27       	eor	r23, r23
    10a6:	cb 01       	movw	r24, r22
    10a8:	97 f9       	bld	r25, 7
    10aa:	08 95       	ret

000010ac <strcmp>:
    10ac:	fb 01       	movw	r30, r22
    10ae:	dc 01       	movw	r26, r24
    10b0:	8d 91       	ld	r24, X+
    10b2:	01 90       	ld	r0, Z+
    10b4:	80 19       	sub	r24, r0
    10b6:	01 10       	cpse	r0, r1
    10b8:	d9 f3       	breq	.-10     	; 0x10b0 <strcmp+0x4>
    10ba:	99 0b       	sbc	r25, r25
    10bc:	08 95       	ret

000010be <__itoa_ncheck>:
    10be:	bb 27       	eor	r27, r27
    10c0:	4a 30       	cpi	r20, 0x0A	; 10
    10c2:	31 f4       	brne	.+12     	; 0x10d0 <__itoa_ncheck+0x12>
    10c4:	99 23       	and	r25, r25
    10c6:	22 f4       	brpl	.+8      	; 0x10d0 <__itoa_ncheck+0x12>
    10c8:	bd e2       	ldi	r27, 0x2D	; 45
    10ca:	90 95       	com	r25
    10cc:	81 95       	neg	r24
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <__utoa_common>

000010d2 <__utoa_ncheck>:
    10d2:	bb 27       	eor	r27, r27

000010d4 <__utoa_common>:
    10d4:	fb 01       	movw	r30, r22
    10d6:	55 27       	eor	r21, r21
    10d8:	aa 27       	eor	r26, r26
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	aa 1f       	adc	r26, r26
    10e0:	a4 17       	cp	r26, r20
    10e2:	10 f0       	brcs	.+4      	; 0x10e8 <__utoa_common+0x14>
    10e4:	a4 1b       	sub	r26, r20
    10e6:	83 95       	inc	r24
    10e8:	50 51       	subi	r21, 0x10	; 16
    10ea:	b9 f7       	brne	.-18     	; 0x10da <__utoa_common+0x6>
    10ec:	a0 5d       	subi	r26, 0xD0	; 208
    10ee:	aa 33       	cpi	r26, 0x3A	; 58
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <__utoa_common+0x20>
    10f2:	a9 5d       	subi	r26, 0xD9	; 217
    10f4:	a1 93       	st	Z+, r26
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	79 f7       	brne	.-34     	; 0x10d8 <__utoa_common+0x4>
    10fa:	b1 11       	cpse	r27, r1
    10fc:	b1 93       	st	Z+, r27
    10fe:	11 92       	st	Z+, r1
    1100:	cb 01       	movw	r24, r22
    1102:	15 c2       	rjmp	.+1066   	; 0x152e <strrev>

00001104 <snprintf>:
    1104:	ae e0       	ldi	r26, 0x0E	; 14
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e7 e8       	ldi	r30, 0x87	; 135
    110a:	f8 e0       	ldi	r31, 0x08	; 8
    110c:	c8 c2       	rjmp	.+1424   	; 0x169e <__prologue_saves__+0x1c>
    110e:	0d 89       	ldd	r16, Y+21	; 0x15
    1110:	1e 89       	ldd	r17, Y+22	; 0x16
    1112:	8f 89       	ldd	r24, Y+23	; 0x17
    1114:	98 8d       	ldd	r25, Y+24	; 0x18
    1116:	26 e0       	ldi	r18, 0x06	; 6
    1118:	2c 83       	std	Y+4, r18	; 0x04
    111a:	1a 83       	std	Y+2, r17	; 0x02
    111c:	09 83       	std	Y+1, r16	; 0x01
    111e:	97 ff       	sbrs	r25, 7
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <snprintf+0x22>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e8       	ldi	r25, 0x80	; 128
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	ae 01       	movw	r20, r28
    112e:	45 5e       	subi	r20, 0xE5	; 229
    1130:	5f 4f       	sbci	r21, 0xFF	; 255
    1132:	69 8d       	ldd	r22, Y+25	; 0x19
    1134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1136:	ce 01       	movw	r24, r28
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	11 d0       	rcall	.+34     	; 0x115e <vfprintf>
    113c:	4d 81       	ldd	r20, Y+5	; 0x05
    113e:	5e 81       	ldd	r21, Y+6	; 0x06
    1140:	57 fd       	sbrc	r21, 7
    1142:	0a c0       	rjmp	.+20     	; 0x1158 <snprintf+0x54>
    1144:	2f 81       	ldd	r18, Y+7	; 0x07
    1146:	38 85       	ldd	r19, Y+8	; 0x08
    1148:	42 17       	cp	r20, r18
    114a:	53 07       	cpc	r21, r19
    114c:	0c f4       	brge	.+2      	; 0x1150 <snprintf+0x4c>
    114e:	9a 01       	movw	r18, r20
    1150:	f8 01       	movw	r30, r16
    1152:	e2 0f       	add	r30, r18
    1154:	f3 1f       	adc	r31, r19
    1156:	10 82       	st	Z, r1
    1158:	2e 96       	adiw	r28, 0x0e	; 14
    115a:	e4 e0       	ldi	r30, 0x04	; 4
    115c:	bc c2       	rjmp	.+1400   	; 0x16d6 <__epilogue_restores__+0x1c>

0000115e <vfprintf>:
    115e:	ab e0       	ldi	r26, 0x0B	; 11
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e4 eb       	ldi	r30, 0xB4	; 180
    1164:	f8 e0       	ldi	r31, 0x08	; 8
    1166:	8d c2       	rjmp	.+1306   	; 0x1682 <__prologue_saves__>
    1168:	6c 01       	movw	r12, r24
    116a:	7b 01       	movw	r14, r22
    116c:	8a 01       	movw	r16, r20
    116e:	fc 01       	movw	r30, r24
    1170:	17 82       	std	Z+7, r1	; 0x07
    1172:	16 82       	std	Z+6, r1	; 0x06
    1174:	83 81       	ldd	r24, Z+3	; 0x03
    1176:	81 ff       	sbrs	r24, 1
    1178:	bf c1       	rjmp	.+894    	; 0x14f8 <vfprintf+0x39a>
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	3c 01       	movw	r6, r24
    1180:	f6 01       	movw	r30, r12
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	f7 01       	movw	r30, r14
    1186:	93 fd       	sbrc	r25, 3
    1188:	85 91       	lpm	r24, Z+
    118a:	93 ff       	sbrs	r25, 3
    118c:	81 91       	ld	r24, Z+
    118e:	7f 01       	movw	r14, r30
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <vfprintf+0x38>
    1194:	ad c1       	rjmp	.+858    	; 0x14f0 <vfprintf+0x392>
    1196:	85 32       	cpi	r24, 0x25	; 37
    1198:	39 f4       	brne	.+14     	; 0x11a8 <vfprintf+0x4a>
    119a:	93 fd       	sbrc	r25, 3
    119c:	85 91       	lpm	r24, Z+
    119e:	93 ff       	sbrs	r25, 3
    11a0:	81 91       	ld	r24, Z+
    11a2:	7f 01       	movw	r14, r30
    11a4:	85 32       	cpi	r24, 0x25	; 37
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <vfprintf+0x52>
    11a8:	b6 01       	movw	r22, r12
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	d0 d1       	rcall	.+928    	; 0x154e <fputc>
    11ae:	e8 cf       	rjmp	.-48     	; 0x1180 <vfprintf+0x22>
    11b0:	91 2c       	mov	r9, r1
    11b2:	21 2c       	mov	r2, r1
    11b4:	31 2c       	mov	r3, r1
    11b6:	ff e1       	ldi	r31, 0x1F	; 31
    11b8:	f3 15       	cp	r31, r3
    11ba:	d8 f0       	brcs	.+54     	; 0x11f2 <vfprintf+0x94>
    11bc:	8b 32       	cpi	r24, 0x2B	; 43
    11be:	79 f0       	breq	.+30     	; 0x11de <vfprintf+0x80>
    11c0:	38 f4       	brcc	.+14     	; 0x11d0 <vfprintf+0x72>
    11c2:	80 32       	cpi	r24, 0x20	; 32
    11c4:	79 f0       	breq	.+30     	; 0x11e4 <vfprintf+0x86>
    11c6:	83 32       	cpi	r24, 0x23	; 35
    11c8:	a1 f4       	brne	.+40     	; 0x11f2 <vfprintf+0x94>
    11ca:	23 2d       	mov	r18, r3
    11cc:	20 61       	ori	r18, 0x10	; 16
    11ce:	1d c0       	rjmp	.+58     	; 0x120a <vfprintf+0xac>
    11d0:	8d 32       	cpi	r24, 0x2D	; 45
    11d2:	61 f0       	breq	.+24     	; 0x11ec <vfprintf+0x8e>
    11d4:	80 33       	cpi	r24, 0x30	; 48
    11d6:	69 f4       	brne	.+26     	; 0x11f2 <vfprintf+0x94>
    11d8:	23 2d       	mov	r18, r3
    11da:	21 60       	ori	r18, 0x01	; 1
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <vfprintf+0xac>
    11de:	83 2d       	mov	r24, r3
    11e0:	82 60       	ori	r24, 0x02	; 2
    11e2:	38 2e       	mov	r3, r24
    11e4:	e3 2d       	mov	r30, r3
    11e6:	e4 60       	ori	r30, 0x04	; 4
    11e8:	3e 2e       	mov	r3, r30
    11ea:	2a c0       	rjmp	.+84     	; 0x1240 <vfprintf+0xe2>
    11ec:	f3 2d       	mov	r31, r3
    11ee:	f8 60       	ori	r31, 0x08	; 8
    11f0:	1d c0       	rjmp	.+58     	; 0x122c <vfprintf+0xce>
    11f2:	37 fc       	sbrc	r3, 7
    11f4:	2d c0       	rjmp	.+90     	; 0x1250 <vfprintf+0xf2>
    11f6:	20 ed       	ldi	r18, 0xD0	; 208
    11f8:	28 0f       	add	r18, r24
    11fa:	2a 30       	cpi	r18, 0x0A	; 10
    11fc:	40 f0       	brcs	.+16     	; 0x120e <vfprintf+0xb0>
    11fe:	8e 32       	cpi	r24, 0x2E	; 46
    1200:	b9 f4       	brne	.+46     	; 0x1230 <vfprintf+0xd2>
    1202:	36 fc       	sbrc	r3, 6
    1204:	75 c1       	rjmp	.+746    	; 0x14f0 <vfprintf+0x392>
    1206:	23 2d       	mov	r18, r3
    1208:	20 64       	ori	r18, 0x40	; 64
    120a:	32 2e       	mov	r3, r18
    120c:	19 c0       	rjmp	.+50     	; 0x1240 <vfprintf+0xe2>
    120e:	36 fe       	sbrs	r3, 6
    1210:	06 c0       	rjmp	.+12     	; 0x121e <vfprintf+0xc0>
    1212:	8a e0       	ldi	r24, 0x0A	; 10
    1214:	98 9e       	mul	r9, r24
    1216:	20 0d       	add	r18, r0
    1218:	11 24       	eor	r1, r1
    121a:	92 2e       	mov	r9, r18
    121c:	11 c0       	rjmp	.+34     	; 0x1240 <vfprintf+0xe2>
    121e:	ea e0       	ldi	r30, 0x0A	; 10
    1220:	2e 9e       	mul	r2, r30
    1222:	20 0d       	add	r18, r0
    1224:	11 24       	eor	r1, r1
    1226:	22 2e       	mov	r2, r18
    1228:	f3 2d       	mov	r31, r3
    122a:	f0 62       	ori	r31, 0x20	; 32
    122c:	3f 2e       	mov	r3, r31
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <vfprintf+0xe2>
    1230:	8c 36       	cpi	r24, 0x6C	; 108
    1232:	21 f4       	brne	.+8      	; 0x123c <vfprintf+0xde>
    1234:	83 2d       	mov	r24, r3
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	38 2e       	mov	r3, r24
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0xe2>
    123c:	88 36       	cpi	r24, 0x68	; 104
    123e:	41 f4       	brne	.+16     	; 0x1250 <vfprintf+0xf2>
    1240:	f7 01       	movw	r30, r14
    1242:	93 fd       	sbrc	r25, 3
    1244:	85 91       	lpm	r24, Z+
    1246:	93 ff       	sbrs	r25, 3
    1248:	81 91       	ld	r24, Z+
    124a:	7f 01       	movw	r14, r30
    124c:	81 11       	cpse	r24, r1
    124e:	b3 cf       	rjmp	.-154    	; 0x11b6 <vfprintf+0x58>
    1250:	98 2f       	mov	r25, r24
    1252:	9f 7d       	andi	r25, 0xDF	; 223
    1254:	95 54       	subi	r25, 0x45	; 69
    1256:	93 30       	cpi	r25, 0x03	; 3
    1258:	28 f4       	brcc	.+10     	; 0x1264 <vfprintf+0x106>
    125a:	0c 5f       	subi	r16, 0xFC	; 252
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	9f e3       	ldi	r25, 0x3F	; 63
    1260:	99 83       	std	Y+1, r25	; 0x01
    1262:	0d c0       	rjmp	.+26     	; 0x127e <vfprintf+0x120>
    1264:	83 36       	cpi	r24, 0x63	; 99
    1266:	31 f0       	breq	.+12     	; 0x1274 <vfprintf+0x116>
    1268:	83 37       	cpi	r24, 0x73	; 115
    126a:	71 f0       	breq	.+28     	; 0x1288 <vfprintf+0x12a>
    126c:	83 35       	cpi	r24, 0x53	; 83
    126e:	09 f0       	breq	.+2      	; 0x1272 <vfprintf+0x114>
    1270:	55 c0       	rjmp	.+170    	; 0x131c <vfprintf+0x1be>
    1272:	20 c0       	rjmp	.+64     	; 0x12b4 <vfprintf+0x156>
    1274:	f8 01       	movw	r30, r16
    1276:	80 81       	ld	r24, Z
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	0e 5f       	subi	r16, 0xFE	; 254
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	88 24       	eor	r8, r8
    1280:	83 94       	inc	r8
    1282:	91 2c       	mov	r9, r1
    1284:	53 01       	movw	r10, r6
    1286:	12 c0       	rjmp	.+36     	; 0x12ac <vfprintf+0x14e>
    1288:	28 01       	movw	r4, r16
    128a:	f2 e0       	ldi	r31, 0x02	; 2
    128c:	4f 0e       	add	r4, r31
    128e:	51 1c       	adc	r5, r1
    1290:	f8 01       	movw	r30, r16
    1292:	a0 80       	ld	r10, Z
    1294:	b1 80       	ldd	r11, Z+1	; 0x01
    1296:	36 fe       	sbrs	r3, 6
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <vfprintf+0x142>
    129a:	69 2d       	mov	r22, r9
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x146>
    12a0:	6f ef       	ldi	r22, 0xFF	; 255
    12a2:	7f ef       	ldi	r23, 0xFF	; 255
    12a4:	c5 01       	movw	r24, r10
    12a6:	38 d1       	rcall	.+624    	; 0x1518 <strnlen>
    12a8:	4c 01       	movw	r8, r24
    12aa:	82 01       	movw	r16, r4
    12ac:	f3 2d       	mov	r31, r3
    12ae:	ff 77       	andi	r31, 0x7F	; 127
    12b0:	3f 2e       	mov	r3, r31
    12b2:	15 c0       	rjmp	.+42     	; 0x12de <vfprintf+0x180>
    12b4:	28 01       	movw	r4, r16
    12b6:	22 e0       	ldi	r18, 0x02	; 2
    12b8:	42 0e       	add	r4, r18
    12ba:	51 1c       	adc	r5, r1
    12bc:	f8 01       	movw	r30, r16
    12be:	a0 80       	ld	r10, Z
    12c0:	b1 80       	ldd	r11, Z+1	; 0x01
    12c2:	36 fe       	sbrs	r3, 6
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <vfprintf+0x16e>
    12c6:	69 2d       	mov	r22, r9
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <vfprintf+0x172>
    12cc:	6f ef       	ldi	r22, 0xFF	; 255
    12ce:	7f ef       	ldi	r23, 0xFF	; 255
    12d0:	c5 01       	movw	r24, r10
    12d2:	17 d1       	rcall	.+558    	; 0x1502 <strnlen_P>
    12d4:	4c 01       	movw	r8, r24
    12d6:	f3 2d       	mov	r31, r3
    12d8:	f0 68       	ori	r31, 0x80	; 128
    12da:	3f 2e       	mov	r3, r31
    12dc:	82 01       	movw	r16, r4
    12de:	33 fc       	sbrc	r3, 3
    12e0:	19 c0       	rjmp	.+50     	; 0x1314 <vfprintf+0x1b6>
    12e2:	82 2d       	mov	r24, r2
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	88 16       	cp	r8, r24
    12e8:	99 06       	cpc	r9, r25
    12ea:	a0 f4       	brcc	.+40     	; 0x1314 <vfprintf+0x1b6>
    12ec:	b6 01       	movw	r22, r12
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	2d d1       	rcall	.+602    	; 0x154e <fputc>
    12f4:	2a 94       	dec	r2
    12f6:	f5 cf       	rjmp	.-22     	; 0x12e2 <vfprintf+0x184>
    12f8:	f5 01       	movw	r30, r10
    12fa:	37 fc       	sbrc	r3, 7
    12fc:	85 91       	lpm	r24, Z+
    12fe:	37 fe       	sbrs	r3, 7
    1300:	81 91       	ld	r24, Z+
    1302:	5f 01       	movw	r10, r30
    1304:	b6 01       	movw	r22, r12
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	22 d1       	rcall	.+580    	; 0x154e <fputc>
    130a:	21 10       	cpse	r2, r1
    130c:	2a 94       	dec	r2
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	82 1a       	sub	r8, r18
    1312:	91 08       	sbc	r9, r1
    1314:	81 14       	cp	r8, r1
    1316:	91 04       	cpc	r9, r1
    1318:	79 f7       	brne	.-34     	; 0x12f8 <vfprintf+0x19a>
    131a:	e1 c0       	rjmp	.+450    	; 0x14de <vfprintf+0x380>
    131c:	84 36       	cpi	r24, 0x64	; 100
    131e:	11 f0       	breq	.+4      	; 0x1324 <vfprintf+0x1c6>
    1320:	89 36       	cpi	r24, 0x69	; 105
    1322:	39 f5       	brne	.+78     	; 0x1372 <vfprintf+0x214>
    1324:	f8 01       	movw	r30, r16
    1326:	37 fe       	sbrs	r3, 7
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <vfprintf+0x1da>
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	0c 5f       	subi	r16, 0xFC	; 252
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <vfprintf+0x1ea>
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	07 2e       	mov	r0, r23
    133e:	00 0c       	add	r0, r0
    1340:	88 0b       	sbc	r24, r24
    1342:	99 0b       	sbc	r25, r25
    1344:	0e 5f       	subi	r16, 0xFE	; 254
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	f3 2d       	mov	r31, r3
    134a:	ff 76       	andi	r31, 0x6F	; 111
    134c:	3f 2e       	mov	r3, r31
    134e:	97 ff       	sbrs	r25, 7
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <vfprintf+0x206>
    1352:	90 95       	com	r25
    1354:	80 95       	com	r24
    1356:	70 95       	com	r23
    1358:	61 95       	neg	r22
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	f0 68       	ori	r31, 0x80	; 128
    1362:	3f 2e       	mov	r3, r31
    1364:	2a e0       	ldi	r18, 0x0A	; 10
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	a3 01       	movw	r20, r6
    136a:	2d d1       	rcall	.+602    	; 0x15c6 <__ultoa_invert>
    136c:	88 2e       	mov	r8, r24
    136e:	86 18       	sub	r8, r6
    1370:	44 c0       	rjmp	.+136    	; 0x13fa <vfprintf+0x29c>
    1372:	85 37       	cpi	r24, 0x75	; 117
    1374:	31 f4       	brne	.+12     	; 0x1382 <vfprintf+0x224>
    1376:	23 2d       	mov	r18, r3
    1378:	2f 7e       	andi	r18, 0xEF	; 239
    137a:	b2 2e       	mov	r11, r18
    137c:	2a e0       	ldi	r18, 0x0A	; 10
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	25 c0       	rjmp	.+74     	; 0x13cc <vfprintf+0x26e>
    1382:	93 2d       	mov	r25, r3
    1384:	99 7f       	andi	r25, 0xF9	; 249
    1386:	b9 2e       	mov	r11, r25
    1388:	8f 36       	cpi	r24, 0x6F	; 111
    138a:	c1 f0       	breq	.+48     	; 0x13bc <vfprintf+0x25e>
    138c:	18 f4       	brcc	.+6      	; 0x1394 <vfprintf+0x236>
    138e:	88 35       	cpi	r24, 0x58	; 88
    1390:	79 f0       	breq	.+30     	; 0x13b0 <vfprintf+0x252>
    1392:	ae c0       	rjmp	.+348    	; 0x14f0 <vfprintf+0x392>
    1394:	80 37       	cpi	r24, 0x70	; 112
    1396:	19 f0       	breq	.+6      	; 0x139e <vfprintf+0x240>
    1398:	88 37       	cpi	r24, 0x78	; 120
    139a:	21 f0       	breq	.+8      	; 0x13a4 <vfprintf+0x246>
    139c:	a9 c0       	rjmp	.+338    	; 0x14f0 <vfprintf+0x392>
    139e:	e9 2f       	mov	r30, r25
    13a0:	e0 61       	ori	r30, 0x10	; 16
    13a2:	be 2e       	mov	r11, r30
    13a4:	b4 fe       	sbrs	r11, 4
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <vfprintf+0x264>
    13a8:	fb 2d       	mov	r31, r11
    13aa:	f4 60       	ori	r31, 0x04	; 4
    13ac:	bf 2e       	mov	r11, r31
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <vfprintf+0x264>
    13b0:	34 fe       	sbrs	r3, 4
    13b2:	0a c0       	rjmp	.+20     	; 0x13c8 <vfprintf+0x26a>
    13b4:	29 2f       	mov	r18, r25
    13b6:	26 60       	ori	r18, 0x06	; 6
    13b8:	b2 2e       	mov	r11, r18
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <vfprintf+0x26a>
    13bc:	28 e0       	ldi	r18, 0x08	; 8
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <vfprintf+0x26e>
    13c2:	20 e1       	ldi	r18, 0x10	; 16
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0x26e>
    13c8:	20 e1       	ldi	r18, 0x10	; 16
    13ca:	32 e0       	ldi	r19, 0x02	; 2
    13cc:	f8 01       	movw	r30, r16
    13ce:	b7 fe       	sbrs	r11, 7
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <vfprintf+0x282>
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	0c 5f       	subi	r16, 0xFC	; 252
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <vfprintf+0x28e>
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 5f       	subi	r16, 0xFE	; 254
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	a3 01       	movw	r20, r6
    13ee:	eb d0       	rcall	.+470    	; 0x15c6 <__ultoa_invert>
    13f0:	88 2e       	mov	r8, r24
    13f2:	86 18       	sub	r8, r6
    13f4:	fb 2d       	mov	r31, r11
    13f6:	ff 77       	andi	r31, 0x7F	; 127
    13f8:	3f 2e       	mov	r3, r31
    13fa:	36 fe       	sbrs	r3, 6
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <vfprintf+0x2ba>
    13fe:	23 2d       	mov	r18, r3
    1400:	2e 7f       	andi	r18, 0xFE	; 254
    1402:	a2 2e       	mov	r10, r18
    1404:	89 14       	cp	r8, r9
    1406:	58 f4       	brcc	.+22     	; 0x141e <vfprintf+0x2c0>
    1408:	34 fe       	sbrs	r3, 4
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <vfprintf+0x2c4>
    140c:	32 fc       	sbrc	r3, 2
    140e:	09 c0       	rjmp	.+18     	; 0x1422 <vfprintf+0x2c4>
    1410:	83 2d       	mov	r24, r3
    1412:	8e 7e       	andi	r24, 0xEE	; 238
    1414:	a8 2e       	mov	r10, r24
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <vfprintf+0x2c4>
    1418:	b8 2c       	mov	r11, r8
    141a:	a3 2c       	mov	r10, r3
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <vfprintf+0x2c6>
    141e:	b8 2c       	mov	r11, r8
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <vfprintf+0x2c6>
    1422:	b9 2c       	mov	r11, r9
    1424:	a4 fe       	sbrs	r10, 4
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <vfprintf+0x2e8>
    1428:	fe 01       	movw	r30, r28
    142a:	e8 0d       	add	r30, r8
    142c:	f1 1d       	adc	r31, r1
    142e:	80 81       	ld	r24, Z
    1430:	80 33       	cpi	r24, 0x30	; 48
    1432:	21 f4       	brne	.+8      	; 0x143c <vfprintf+0x2de>
    1434:	9a 2d       	mov	r25, r10
    1436:	99 7e       	andi	r25, 0xE9	; 233
    1438:	a9 2e       	mov	r10, r25
    143a:	09 c0       	rjmp	.+18     	; 0x144e <vfprintf+0x2f0>
    143c:	a2 fe       	sbrs	r10, 2
    143e:	06 c0       	rjmp	.+12     	; 0x144c <vfprintf+0x2ee>
    1440:	b3 94       	inc	r11
    1442:	b3 94       	inc	r11
    1444:	04 c0       	rjmp	.+8      	; 0x144e <vfprintf+0x2f0>
    1446:	8a 2d       	mov	r24, r10
    1448:	86 78       	andi	r24, 0x86	; 134
    144a:	09 f0       	breq	.+2      	; 0x144e <vfprintf+0x2f0>
    144c:	b3 94       	inc	r11
    144e:	a3 fc       	sbrc	r10, 3
    1450:	10 c0       	rjmp	.+32     	; 0x1472 <vfprintf+0x314>
    1452:	a0 fe       	sbrs	r10, 0
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0x304>
    1456:	b2 14       	cp	r11, r2
    1458:	80 f4       	brcc	.+32     	; 0x147a <vfprintf+0x31c>
    145a:	28 0c       	add	r2, r8
    145c:	92 2c       	mov	r9, r2
    145e:	9b 18       	sub	r9, r11
    1460:	0d c0       	rjmp	.+26     	; 0x147c <vfprintf+0x31e>
    1462:	b2 14       	cp	r11, r2
    1464:	58 f4       	brcc	.+22     	; 0x147c <vfprintf+0x31e>
    1466:	b6 01       	movw	r22, r12
    1468:	80 e2       	ldi	r24, 0x20	; 32
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	70 d0       	rcall	.+224    	; 0x154e <fputc>
    146e:	b3 94       	inc	r11
    1470:	f8 cf       	rjmp	.-16     	; 0x1462 <vfprintf+0x304>
    1472:	b2 14       	cp	r11, r2
    1474:	18 f4       	brcc	.+6      	; 0x147c <vfprintf+0x31e>
    1476:	2b 18       	sub	r2, r11
    1478:	02 c0       	rjmp	.+4      	; 0x147e <vfprintf+0x320>
    147a:	98 2c       	mov	r9, r8
    147c:	21 2c       	mov	r2, r1
    147e:	a4 fe       	sbrs	r10, 4
    1480:	0f c0       	rjmp	.+30     	; 0x14a0 <vfprintf+0x342>
    1482:	b6 01       	movw	r22, r12
    1484:	80 e3       	ldi	r24, 0x30	; 48
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	62 d0       	rcall	.+196    	; 0x154e <fputc>
    148a:	a2 fe       	sbrs	r10, 2
    148c:	16 c0       	rjmp	.+44     	; 0x14ba <vfprintf+0x35c>
    148e:	a1 fc       	sbrc	r10, 1
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <vfprintf+0x33a>
    1492:	88 e7       	ldi	r24, 0x78	; 120
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x33e>
    1498:	88 e5       	ldi	r24, 0x58	; 88
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	b6 01       	movw	r22, r12
    149e:	0c c0       	rjmp	.+24     	; 0x14b8 <vfprintf+0x35a>
    14a0:	8a 2d       	mov	r24, r10
    14a2:	86 78       	andi	r24, 0x86	; 134
    14a4:	51 f0       	breq	.+20     	; 0x14ba <vfprintf+0x35c>
    14a6:	a1 fe       	sbrs	r10, 1
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x350>
    14aa:	8b e2       	ldi	r24, 0x2B	; 43
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <vfprintf+0x352>
    14ae:	80 e2       	ldi	r24, 0x20	; 32
    14b0:	a7 fc       	sbrc	r10, 7
    14b2:	8d e2       	ldi	r24, 0x2D	; 45
    14b4:	b6 01       	movw	r22, r12
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	4a d0       	rcall	.+148    	; 0x154e <fputc>
    14ba:	89 14       	cp	r8, r9
    14bc:	30 f4       	brcc	.+12     	; 0x14ca <vfprintf+0x36c>
    14be:	b6 01       	movw	r22, r12
    14c0:	80 e3       	ldi	r24, 0x30	; 48
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	44 d0       	rcall	.+136    	; 0x154e <fputc>
    14c6:	9a 94       	dec	r9
    14c8:	f8 cf       	rjmp	.-16     	; 0x14ba <vfprintf+0x35c>
    14ca:	8a 94       	dec	r8
    14cc:	f3 01       	movw	r30, r6
    14ce:	e8 0d       	add	r30, r8
    14d0:	f1 1d       	adc	r31, r1
    14d2:	80 81       	ld	r24, Z
    14d4:	b6 01       	movw	r22, r12
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	3a d0       	rcall	.+116    	; 0x154e <fputc>
    14da:	81 10       	cpse	r8, r1
    14dc:	f6 cf       	rjmp	.-20     	; 0x14ca <vfprintf+0x36c>
    14de:	22 20       	and	r2, r2
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <vfprintf+0x386>
    14e2:	4e ce       	rjmp	.-868    	; 0x1180 <vfprintf+0x22>
    14e4:	b6 01       	movw	r22, r12
    14e6:	80 e2       	ldi	r24, 0x20	; 32
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	31 d0       	rcall	.+98     	; 0x154e <fputc>
    14ec:	2a 94       	dec	r2
    14ee:	f7 cf       	rjmp	.-18     	; 0x14de <vfprintf+0x380>
    14f0:	f6 01       	movw	r30, r12
    14f2:	86 81       	ldd	r24, Z+6	; 0x06
    14f4:	97 81       	ldd	r25, Z+7	; 0x07
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <vfprintf+0x39e>
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	2b 96       	adiw	r28, 0x0b	; 11
    14fe:	e2 e1       	ldi	r30, 0x12	; 18
    1500:	dc c0       	rjmp	.+440    	; 0x16ba <__epilogue_restores__>

00001502 <strnlen_P>:
    1502:	fc 01       	movw	r30, r24
    1504:	05 90       	lpm	r0, Z+
    1506:	61 50       	subi	r22, 0x01	; 1
    1508:	70 40       	sbci	r23, 0x00	; 0
    150a:	01 10       	cpse	r0, r1
    150c:	d8 f7       	brcc	.-10     	; 0x1504 <strnlen_P+0x2>
    150e:	80 95       	com	r24
    1510:	90 95       	com	r25
    1512:	8e 0f       	add	r24, r30
    1514:	9f 1f       	adc	r25, r31
    1516:	08 95       	ret

00001518 <strnlen>:
    1518:	fc 01       	movw	r30, r24
    151a:	61 50       	subi	r22, 0x01	; 1
    151c:	70 40       	sbci	r23, 0x00	; 0
    151e:	01 90       	ld	r0, Z+
    1520:	01 10       	cpse	r0, r1
    1522:	d8 f7       	brcc	.-10     	; 0x151a <strnlen+0x2>
    1524:	80 95       	com	r24
    1526:	90 95       	com	r25
    1528:	8e 0f       	add	r24, r30
    152a:	9f 1f       	adc	r25, r31
    152c:	08 95       	ret

0000152e <strrev>:
    152e:	dc 01       	movw	r26, r24
    1530:	fc 01       	movw	r30, r24
    1532:	67 2f       	mov	r22, r23
    1534:	71 91       	ld	r23, Z+
    1536:	77 23       	and	r23, r23
    1538:	e1 f7       	brne	.-8      	; 0x1532 <strrev+0x4>
    153a:	32 97       	sbiw	r30, 0x02	; 2
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <strrev+0x18>
    153e:	7c 91       	ld	r23, X
    1540:	6d 93       	st	X+, r22
    1542:	70 83       	st	Z, r23
    1544:	62 91       	ld	r22, -Z
    1546:	ae 17       	cp	r26, r30
    1548:	bf 07       	cpc	r27, r31
    154a:	c8 f3       	brcs	.-14     	; 0x153e <strrev+0x10>
    154c:	08 95       	ret

0000154e <fputc>:
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	fb 01       	movw	r30, r22
    1558:	23 81       	ldd	r18, Z+3	; 0x03
    155a:	21 fd       	sbrc	r18, 1
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <fputc+0x16>
    155e:	8f ef       	ldi	r24, 0xFF	; 255
    1560:	9f ef       	ldi	r25, 0xFF	; 255
    1562:	2c c0       	rjmp	.+88     	; 0x15bc <fputc+0x6e>
    1564:	22 ff       	sbrs	r18, 2
    1566:	16 c0       	rjmp	.+44     	; 0x1594 <fputc+0x46>
    1568:	46 81       	ldd	r20, Z+6	; 0x06
    156a:	57 81       	ldd	r21, Z+7	; 0x07
    156c:	24 81       	ldd	r18, Z+4	; 0x04
    156e:	35 81       	ldd	r19, Z+5	; 0x05
    1570:	42 17       	cp	r20, r18
    1572:	53 07       	cpc	r21, r19
    1574:	44 f4       	brge	.+16     	; 0x1586 <fputc+0x38>
    1576:	a0 81       	ld	r26, Z
    1578:	b1 81       	ldd	r27, Z+1	; 0x01
    157a:	9d 01       	movw	r18, r26
    157c:	2f 5f       	subi	r18, 0xFF	; 255
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
    1580:	31 83       	std	Z+1, r19	; 0x01
    1582:	20 83       	st	Z, r18
    1584:	8c 93       	st	X, r24
    1586:	26 81       	ldd	r18, Z+6	; 0x06
    1588:	37 81       	ldd	r19, Z+7	; 0x07
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	3f 4f       	sbci	r19, 0xFF	; 255
    158e:	37 83       	std	Z+7, r19	; 0x07
    1590:	26 83       	std	Z+6, r18	; 0x06
    1592:	14 c0       	rjmp	.+40     	; 0x15bc <fputc+0x6e>
    1594:	8b 01       	movw	r16, r22
    1596:	ec 01       	movw	r28, r24
    1598:	fb 01       	movw	r30, r22
    159a:	00 84       	ldd	r0, Z+8	; 0x08
    159c:	f1 85       	ldd	r31, Z+9	; 0x09
    159e:	e0 2d       	mov	r30, r0
    15a0:	09 95       	icall
    15a2:	89 2b       	or	r24, r25
    15a4:	e1 f6       	brne	.-72     	; 0x155e <fputc+0x10>
    15a6:	d8 01       	movw	r26, r16
    15a8:	16 96       	adiw	r26, 0x06	; 6
    15aa:	8d 91       	ld	r24, X+
    15ac:	9c 91       	ld	r25, X
    15ae:	17 97       	sbiw	r26, 0x07	; 7
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	17 96       	adiw	r26, 0x07	; 7
    15b4:	9c 93       	st	X, r25
    15b6:	8e 93       	st	-X, r24
    15b8:	16 97       	sbiw	r26, 0x06	; 6
    15ba:	ce 01       	movw	r24, r28
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	08 95       	ret

000015c6 <__ultoa_invert>:
    15c6:	fa 01       	movw	r30, r20
    15c8:	aa 27       	eor	r26, r26
    15ca:	28 30       	cpi	r18, 0x08	; 8
    15cc:	51 f1       	breq	.+84     	; 0x1622 <__ultoa_invert+0x5c>
    15ce:	20 31       	cpi	r18, 0x10	; 16
    15d0:	81 f1       	breq	.+96     	; 0x1632 <__ultoa_invert+0x6c>
    15d2:	e8 94       	clt
    15d4:	6f 93       	push	r22
    15d6:	6e 7f       	andi	r22, 0xFE	; 254
    15d8:	6e 5f       	subi	r22, 0xFE	; 254
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	8f 4f       	sbci	r24, 0xFF	; 255
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	af 4f       	sbci	r26, 0xFF	; 255
    15e2:	b1 e0       	ldi	r27, 0x01	; 1
    15e4:	3e d0       	rcall	.+124    	; 0x1662 <__ultoa_invert+0x9c>
    15e6:	b4 e0       	ldi	r27, 0x04	; 4
    15e8:	3c d0       	rcall	.+120    	; 0x1662 <__ultoa_invert+0x9c>
    15ea:	67 0f       	add	r22, r23
    15ec:	78 1f       	adc	r23, r24
    15ee:	89 1f       	adc	r24, r25
    15f0:	9a 1f       	adc	r25, r26
    15f2:	a1 1d       	adc	r26, r1
    15f4:	68 0f       	add	r22, r24
    15f6:	79 1f       	adc	r23, r25
    15f8:	8a 1f       	adc	r24, r26
    15fa:	91 1d       	adc	r25, r1
    15fc:	a1 1d       	adc	r26, r1
    15fe:	6a 0f       	add	r22, r26
    1600:	71 1d       	adc	r23, r1
    1602:	81 1d       	adc	r24, r1
    1604:	91 1d       	adc	r25, r1
    1606:	a1 1d       	adc	r26, r1
    1608:	20 d0       	rcall	.+64     	; 0x164a <__ultoa_invert+0x84>
    160a:	09 f4       	brne	.+2      	; 0x160e <__ultoa_invert+0x48>
    160c:	68 94       	set
    160e:	3f 91       	pop	r19
    1610:	2a e0       	ldi	r18, 0x0A	; 10
    1612:	26 9f       	mul	r18, r22
    1614:	11 24       	eor	r1, r1
    1616:	30 19       	sub	r19, r0
    1618:	30 5d       	subi	r19, 0xD0	; 208
    161a:	31 93       	st	Z+, r19
    161c:	de f6       	brtc	.-74     	; 0x15d4 <__ultoa_invert+0xe>
    161e:	cf 01       	movw	r24, r30
    1620:	08 95       	ret
    1622:	46 2f       	mov	r20, r22
    1624:	47 70       	andi	r20, 0x07	; 7
    1626:	40 5d       	subi	r20, 0xD0	; 208
    1628:	41 93       	st	Z+, r20
    162a:	b3 e0       	ldi	r27, 0x03	; 3
    162c:	0f d0       	rcall	.+30     	; 0x164c <__ultoa_invert+0x86>
    162e:	c9 f7       	brne	.-14     	; 0x1622 <__ultoa_invert+0x5c>
    1630:	f6 cf       	rjmp	.-20     	; 0x161e <__ultoa_invert+0x58>
    1632:	46 2f       	mov	r20, r22
    1634:	4f 70       	andi	r20, 0x0F	; 15
    1636:	40 5d       	subi	r20, 0xD0	; 208
    1638:	4a 33       	cpi	r20, 0x3A	; 58
    163a:	18 f0       	brcs	.+6      	; 0x1642 <__ultoa_invert+0x7c>
    163c:	49 5d       	subi	r20, 0xD9	; 217
    163e:	31 fd       	sbrc	r19, 1
    1640:	40 52       	subi	r20, 0x20	; 32
    1642:	41 93       	st	Z+, r20
    1644:	02 d0       	rcall	.+4      	; 0x164a <__ultoa_invert+0x84>
    1646:	a9 f7       	brne	.-22     	; 0x1632 <__ultoa_invert+0x6c>
    1648:	ea cf       	rjmp	.-44     	; 0x161e <__ultoa_invert+0x58>
    164a:	b4 e0       	ldi	r27, 0x04	; 4
    164c:	a6 95       	lsr	r26
    164e:	97 95       	ror	r25
    1650:	87 95       	ror	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	ba 95       	dec	r27
    1658:	c9 f7       	brne	.-14     	; 0x164c <__ultoa_invert+0x86>
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	61 05       	cpc	r22, r1
    165e:	71 05       	cpc	r23, r1
    1660:	08 95       	ret
    1662:	9b 01       	movw	r18, r22
    1664:	ac 01       	movw	r20, r24
    1666:	0a 2e       	mov	r0, r26
    1668:	06 94       	lsr	r0
    166a:	57 95       	ror	r21
    166c:	47 95       	ror	r20
    166e:	37 95       	ror	r19
    1670:	27 95       	ror	r18
    1672:	ba 95       	dec	r27
    1674:	c9 f7       	brne	.-14     	; 0x1668 <__ultoa_invert+0xa2>
    1676:	62 0f       	add	r22, r18
    1678:	73 1f       	adc	r23, r19
    167a:	84 1f       	adc	r24, r20
    167c:	95 1f       	adc	r25, r21
    167e:	a0 1d       	adc	r26, r0
    1680:	08 95       	ret

00001682 <__prologue_saves__>:
    1682:	2f 92       	push	r2
    1684:	3f 92       	push	r3
    1686:	4f 92       	push	r4
    1688:	5f 92       	push	r5
    168a:	6f 92       	push	r6
    168c:	7f 92       	push	r7
    168e:	8f 92       	push	r8
    1690:	9f 92       	push	r9
    1692:	af 92       	push	r10
    1694:	bf 92       	push	r11
    1696:	cf 92       	push	r12
    1698:	df 92       	push	r13
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	ca 1b       	sub	r28, r26
    16ac:	db 0b       	sbc	r29, r27
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	09 94       	ijmp

000016ba <__epilogue_restores__>:
    16ba:	2a 88       	ldd	r2, Y+18	; 0x12
    16bc:	39 88       	ldd	r3, Y+17	; 0x11
    16be:	48 88       	ldd	r4, Y+16	; 0x10
    16c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    16c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    16c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    16c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    16cc:	b9 84       	ldd	r11, Y+9	; 0x09
    16ce:	c8 84       	ldd	r12, Y+8	; 0x08
    16d0:	df 80       	ldd	r13, Y+7	; 0x07
    16d2:	ee 80       	ldd	r14, Y+6	; 0x06
    16d4:	fd 80       	ldd	r15, Y+5	; 0x05
    16d6:	0c 81       	ldd	r16, Y+4	; 0x04
    16d8:	1b 81       	ldd	r17, Y+3	; 0x03
    16da:	aa 81       	ldd	r26, Y+2	; 0x02
    16dc:	b9 81       	ldd	r27, Y+1	; 0x01
    16de:	ce 0f       	add	r28, r30
    16e0:	d1 1d       	adc	r29, r1
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	ed 01       	movw	r28, r26
    16ee:	08 95       	ret

000016f0 <_exit>:
    16f0:	f8 94       	cli

000016f2 <__stop_program>:
    16f2:	ff cf       	rjmp	.-2      	; 0x16f2 <__stop_program>
