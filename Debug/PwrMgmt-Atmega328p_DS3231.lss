
PwrMgmt-Atmega328p_DS3231.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006f2  00800100  00000c90  00000d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008007f2  008007f2  00001416  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003984  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f64  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002de7  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b98  00000000  00000000  00008e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012f20  00000000  00000000  000099b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e9e  00000000  00000000  0001c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0002076e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003c73  00000000  00000000  000209be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	f1 c4       	rjmp	.+2530   	; 0x9e8 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3f       	cpi	r26, 0xF2	; 242
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	a2 ef       	ldi	r26, 0xF2	; 242
  8e:	b7 e0       	ldi	r27, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	d3 d4       	rcall	.+2470   	; 0xa42 <main>
  9c:	f7 c5       	rjmp	.+3054   	; 0xc8c <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <a_ds3231_iic_write>:
        
        return 1;                                                                            /* return error */
    }
    
    return 0;                                                                                /* success return 0 */
}
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	49 83       	std	Y+1, r20	; 0x01
  ac:	dc 01       	movw	r26, r24
  ae:	14 96       	adiw	r26, 0x04	; 4
  b0:	ed 91       	ld	r30, X+
  b2:	fc 91       	ld	r31, X
  b4:	15 97       	sbiw	r26, 0x05	; 5
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	ae 01       	movw	r20, r28
  bc:	4f 5f       	subi	r20, 0xFF	; 255
  be:	5f 4f       	sbci	r21, 0xFF	; 255
  c0:	88 e6       	ldi	r24, 0x68	; 104
  c2:	09 95       	icall
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	81 11       	cpse	r24, r1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <a_ds3231_iic_write+0x2c>
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	89 2f       	mov	r24, r25
  ce:	0f 90       	pop	r0
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <a_ds3231_iic_multiple_read>:
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	dc 01       	movw	r26, r24
  da:	16 96       	adiw	r26, 0x06	; 6
  dc:	ed 91       	ld	r30, X+
  de:	fc 91       	ld	r31, X
  e0:	17 97       	sbiw	r26, 0x07	; 7
  e2:	88 e6       	ldi	r24, 0x68	; 104
  e4:	09 95       	icall
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	81 11       	cpse	r24, r1
  ea:	01 c0       	rjmp	.+2      	; 0xee <a_ds3231_iic_multiple_read+0x18>
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	89 2f       	mov	r24, r25
  f0:	08 95       	ret

000000f2 <ds3231_set_oscillator>:
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	1f 92       	push	r1
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	b9 f1       	breq	.+110    	; 0x176 <ds3231_set_oscillator+0x84>
 108:	dc 01       	movw	r26, r24
 10a:	1e 96       	adiw	r26, 0x0e	; 14
 10c:	1c 91       	ld	r17, X
 10e:	11 30       	cpi	r17, 0x01	; 1
 110:	a1 f5       	brne	.+104    	; 0x17a <ds3231_set_oscillator+0x88>
 112:	06 2f       	mov	r16, r22
 114:	7c 01       	movw	r14, r24
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	ae 01       	movw	r20, r28
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	6e e0       	ldi	r22, 0x0E	; 14
 120:	da df       	rcall	.-76     	; 0xd6 <a_ds3231_iic_multiple_read>
 122:	88 23       	and	r24, r24
 124:	69 f0       	breq	.+26     	; 0x140 <ds3231_set_oscillator+0x4e>
 126:	81 e8       	ldi	r24, 0x81	; 129
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	9f 93       	push	r25
 12c:	8f 93       	push	r24
 12e:	d7 01       	movw	r26, r14
 130:	18 96       	adiw	r26, 0x08	; 8
 132:	ed 91       	ld	r30, X+
 134:	fc 91       	ld	r31, X
 136:	19 97       	sbiw	r26, 0x09	; 9
 138:	09 95       	icall
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	20 c0       	rjmp	.+64     	; 0x180 <ds3231_set_oscillator+0x8e>
 140:	49 81       	ldd	r20, Y+1	; 0x01
 142:	4f 77       	andi	r20, 0x7F	; 127
 144:	00 23       	and	r16, r16
 146:	11 f0       	breq	.+4      	; 0x14c <ds3231_set_oscillator+0x5a>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	01 c0       	rjmp	.+2      	; 0x14e <ds3231_set_oscillator+0x5c>
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	48 2b       	or	r20, r24
 150:	49 83       	std	Y+1, r20	; 0x01
 152:	6e e0       	ldi	r22, 0x0E	; 14
 154:	c7 01       	movw	r24, r14
 156:	a4 df       	rcall	.-184    	; 0xa0 <a_ds3231_iic_write>
 158:	88 23       	and	r24, r24
 15a:	89 f0       	breq	.+34     	; 0x17e <ds3231_set_oscillator+0x8c>
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	9f 93       	push	r25
 162:	8f 93       	push	r24
 164:	d7 01       	movw	r26, r14
 166:	18 96       	adiw	r26, 0x08	; 8
 168:	ed 91       	ld	r30, X+
 16a:	fc 91       	ld	r31, X
 16c:	19 97       	sbiw	r26, 0x09	; 9
 16e:	09 95       	icall
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	05 c0       	rjmp	.+10     	; 0x180 <ds3231_set_oscillator+0x8e>
 176:	12 e0       	ldi	r17, 0x02	; 2
 178:	03 c0       	rjmp	.+6      	; 0x180 <ds3231_set_oscillator+0x8e>
 17a:	13 e0       	ldi	r17, 0x03	; 3
 17c:	01 c0       	rjmp	.+2      	; 0x180 <ds3231_set_oscillator+0x8e>
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	81 2f       	mov	r24, r17
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	08 95       	ret

00000192 <ds3231_set_alarm_interrupt>:
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	1f 92       	push	r1
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	09 f4       	brne	.+2      	; 0x1ac <ds3231_set_alarm_interrupt+0x1a>
 1aa:	44 c0       	rjmp	.+136    	; 0x234 <ds3231_set_alarm_interrupt+0xa2>
 1ac:	dc 01       	movw	r26, r24
 1ae:	1e 96       	adiw	r26, 0x0e	; 14
 1b0:	1c 91       	ld	r17, X
 1b2:	11 30       	cpi	r17, 0x01	; 1
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <ds3231_set_alarm_interrupt+0x26>
 1b6:	40 c0       	rjmp	.+128    	; 0x238 <ds3231_set_alarm_interrupt+0xa6>
 1b8:	04 2f       	mov	r16, r20
 1ba:	d6 2e       	mov	r13, r22
 1bc:	7c 01       	movw	r14, r24
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	ae 01       	movw	r20, r28
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	6e e0       	ldi	r22, 0x0E	; 14
 1c8:	86 df       	rcall	.-244    	; 0xd6 <a_ds3231_iic_multiple_read>
 1ca:	88 23       	and	r24, r24
 1cc:	69 f0       	breq	.+26     	; 0x1e8 <ds3231_set_alarm_interrupt+0x56>
 1ce:	81 e8       	ldi	r24, 0x81	; 129
 1d0:	94 e0       	ldi	r25, 0x04	; 4
 1d2:	9f 93       	push	r25
 1d4:	8f 93       	push	r24
 1d6:	d7 01       	movw	r26, r14
 1d8:	18 96       	adiw	r26, 0x08	; 8
 1da:	ed 91       	ld	r30, X+
 1dc:	fc 91       	ld	r31, X
 1de:	19 97       	sbiw	r26, 0x09	; 9
 1e0:	09 95       	icall
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	2b c0       	rjmp	.+86     	; 0x23e <ds3231_set_alarm_interrupt+0xac>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0d 2c       	mov	r0, r13
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <ds3231_set_alarm_interrupt+0x62>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <ds3231_set_alarm_interrupt+0x5e>
 1f8:	80 95       	com	r24
 1fa:	49 81       	ldd	r20, Y+1	; 0x01
 1fc:	48 23       	and	r20, r24
 1fe:	80 2f       	mov	r24, r16
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <ds3231_set_alarm_interrupt+0x76>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	da 94       	dec	r13
 20a:	e2 f7       	brpl	.-8      	; 0x204 <ds3231_set_alarm_interrupt+0x72>
 20c:	48 2b       	or	r20, r24
 20e:	49 83       	std	Y+1, r20	; 0x01
 210:	6e e0       	ldi	r22, 0x0E	; 14
 212:	c7 01       	movw	r24, r14
 214:	45 df       	rcall	.-374    	; 0xa0 <a_ds3231_iic_write>
 216:	88 23       	and	r24, r24
 218:	89 f0       	breq	.+34     	; 0x23c <ds3231_set_alarm_interrupt+0xaa>
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	94 e0       	ldi	r25, 0x04	; 4
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	d7 01       	movw	r26, r14
 224:	18 96       	adiw	r26, 0x08	; 8
 226:	ed 91       	ld	r30, X+
 228:	fc 91       	ld	r31, X
 22a:	19 97       	sbiw	r26, 0x09	; 9
 22c:	09 95       	icall
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	05 c0       	rjmp	.+10     	; 0x23e <ds3231_set_alarm_interrupt+0xac>
 234:	12 e0       	ldi	r17, 0x02	; 2
 236:	03 c0       	rjmp	.+6      	; 0x23e <ds3231_set_alarm_interrupt+0xac>
 238:	13 e0       	ldi	r17, 0x03	; 3
 23a:	01 c0       	rjmp	.+2      	; 0x23e <ds3231_set_alarm_interrupt+0xac>
 23c:	10 e0       	ldi	r17, 0x00	; 0
 23e:	81 2f       	mov	r24, r17
 240:	0f 90       	pop	r0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	08 95       	ret

00000252 <ds3231_set_pin>:
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	1f 92       	push	r1
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	a9 f1       	breq	.+106    	; 0x2d2 <ds3231_set_pin+0x80>
 268:	dc 01       	movw	r26, r24
 26a:	1e 96       	adiw	r26, 0x0e	; 14
 26c:	1c 91       	ld	r17, X
 26e:	11 30       	cpi	r17, 0x01	; 1
 270:	91 f5       	brne	.+100    	; 0x2d6 <ds3231_set_pin+0x84>
 272:	06 2f       	mov	r16, r22
 274:	7c 01       	movw	r14, r24
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	ae 01       	movw	r20, r28
 27a:	4f 5f       	subi	r20, 0xFF	; 255
 27c:	5f 4f       	sbci	r21, 0xFF	; 255
 27e:	6e e0       	ldi	r22, 0x0E	; 14
 280:	2a df       	rcall	.-428    	; 0xd6 <a_ds3231_iic_multiple_read>
 282:	88 23       	and	r24, r24
 284:	69 f0       	breq	.+26     	; 0x2a0 <ds3231_set_pin+0x4e>
 286:	81 e8       	ldi	r24, 0x81	; 129
 288:	94 e0       	ldi	r25, 0x04	; 4
 28a:	9f 93       	push	r25
 28c:	8f 93       	push	r24
 28e:	d7 01       	movw	r26, r14
 290:	18 96       	adiw	r26, 0x08	; 8
 292:	ed 91       	ld	r30, X+
 294:	fc 91       	ld	r31, X
 296:	19 97       	sbiw	r26, 0x09	; 9
 298:	09 95       	icall
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	1e c0       	rjmp	.+60     	; 0x2dc <ds3231_set_pin+0x8a>
 2a0:	49 81       	ldd	r20, Y+1	; 0x01
 2a2:	4b 7f       	andi	r20, 0xFB	; 251
 2a4:	60 2f       	mov	r22, r16
 2a6:	66 0f       	add	r22, r22
 2a8:	66 0f       	add	r22, r22
 2aa:	46 2b       	or	r20, r22
 2ac:	49 83       	std	Y+1, r20	; 0x01
 2ae:	6e e0       	ldi	r22, 0x0E	; 14
 2b0:	c7 01       	movw	r24, r14
 2b2:	f6 de       	rcall	.-532    	; 0xa0 <a_ds3231_iic_write>
 2b4:	88 23       	and	r24, r24
 2b6:	89 f0       	breq	.+34     	; 0x2da <ds3231_set_pin+0x88>
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	94 e0       	ldi	r25, 0x04	; 4
 2bc:	9f 93       	push	r25
 2be:	8f 93       	push	r24
 2c0:	d7 01       	movw	r26, r14
 2c2:	18 96       	adiw	r26, 0x08	; 8
 2c4:	ed 91       	ld	r30, X+
 2c6:	fc 91       	ld	r31, X
 2c8:	19 97       	sbiw	r26, 0x09	; 9
 2ca:	09 95       	icall
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <ds3231_set_pin+0x8a>
 2d2:	12 e0       	ldi	r17, 0x02	; 2
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <ds3231_set_pin+0x8a>
 2d6:	13 e0       	ldi	r17, 0x03	; 3
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <ds3231_set_pin+0x8a>
 2da:	10 e0       	ldi	r17, 0x00	; 0
 2dc:	81 2f       	mov	r24, r17
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	08 95       	ret

000002ee <ds3231_set_square_wave>:
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	1f 92       	push	r1
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	b1 f1       	breq	.+108    	; 0x370 <ds3231_set_square_wave+0x82>
 304:	dc 01       	movw	r26, r24
 306:	1e 96       	adiw	r26, 0x0e	; 14
 308:	1c 91       	ld	r17, X
 30a:	11 30       	cpi	r17, 0x01	; 1
 30c:	99 f5       	brne	.+102    	; 0x374 <ds3231_set_square_wave+0x86>
 30e:	06 2f       	mov	r16, r22
 310:	7c 01       	movw	r14, r24
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	ae 01       	movw	r20, r28
 316:	4f 5f       	subi	r20, 0xFF	; 255
 318:	5f 4f       	sbci	r21, 0xFF	; 255
 31a:	6e e0       	ldi	r22, 0x0E	; 14
 31c:	dc de       	rcall	.-584    	; 0xd6 <a_ds3231_iic_multiple_read>
 31e:	88 23       	and	r24, r24
 320:	69 f0       	breq	.+26     	; 0x33c <ds3231_set_square_wave+0x4e>
 322:	81 e8       	ldi	r24, 0x81	; 129
 324:	94 e0       	ldi	r25, 0x04	; 4
 326:	9f 93       	push	r25
 328:	8f 93       	push	r24
 32a:	d7 01       	movw	r26, r14
 32c:	18 96       	adiw	r26, 0x08	; 8
 32e:	ed 91       	ld	r30, X+
 330:	fc 91       	ld	r31, X
 332:	19 97       	sbiw	r26, 0x09	; 9
 334:	09 95       	icall
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	1f c0       	rjmp	.+62     	; 0x37a <ds3231_set_square_wave+0x8c>
 33c:	49 81       	ldd	r20, Y+1	; 0x01
 33e:	4f 7b       	andi	r20, 0xBF	; 191
 340:	b0 e4       	ldi	r27, 0x40	; 64
 342:	0b 9f       	mul	r16, r27
 344:	c0 01       	movw	r24, r0
 346:	11 24       	eor	r1, r1
 348:	48 2b       	or	r20, r24
 34a:	49 83       	std	Y+1, r20	; 0x01
 34c:	6e e0       	ldi	r22, 0x0E	; 14
 34e:	c7 01       	movw	r24, r14
 350:	a7 de       	rcall	.-690    	; 0xa0 <a_ds3231_iic_write>
 352:	88 23       	and	r24, r24
 354:	89 f0       	breq	.+34     	; 0x378 <ds3231_set_square_wave+0x8a>
 356:	8f e9       	ldi	r24, 0x9F	; 159
 358:	94 e0       	ldi	r25, 0x04	; 4
 35a:	9f 93       	push	r25
 35c:	8f 93       	push	r24
 35e:	d7 01       	movw	r26, r14
 360:	18 96       	adiw	r26, 0x08	; 8
 362:	ed 91       	ld	r30, X+
 364:	fc 91       	ld	r31, X
 366:	19 97       	sbiw	r26, 0x09	; 9
 368:	09 95       	icall
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	05 c0       	rjmp	.+10     	; 0x37a <ds3231_set_square_wave+0x8c>
 370:	12 e0       	ldi	r17, 0x02	; 2
 372:	03 c0       	rjmp	.+6      	; 0x37a <ds3231_set_square_wave+0x8c>
 374:	13 e0       	ldi	r17, 0x03	; 3
 376:	01 c0       	rjmp	.+2      	; 0x37a <ds3231_set_square_wave+0x8c>
 378:	10 e0       	ldi	r17, 0x00	; 0
 37a:	81 2f       	mov	r24, r17
 37c:	0f 90       	pop	r0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	08 95       	ret

0000038c <ds3231_set_aging_offset>:
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	00 97       	sbiw	r24, 0x00	; 0
 394:	c1 f0       	breq	.+48     	; 0x3c6 <ds3231_set_aging_offset+0x3a>
 396:	dc 01       	movw	r26, r24
 398:	1e 96       	adiw	r26, 0x0e	; 14
 39a:	cc 91       	ld	r28, X
 39c:	c1 30       	cpi	r28, 0x01	; 1
 39e:	a9 f4       	brne	.+42     	; 0x3ca <ds3231_set_aging_offset+0x3e>
 3a0:	46 2f       	mov	r20, r22
 3a2:	8c 01       	movw	r16, r24
 3a4:	60 e1       	ldi	r22, 0x10	; 16
 3a6:	7c de       	rcall	.-776    	; 0xa0 <a_ds3231_iic_write>
 3a8:	88 23       	and	r24, r24
 3aa:	89 f0       	breq	.+34     	; 0x3ce <ds3231_set_aging_offset+0x42>
 3ac:	84 e1       	ldi	r24, 0x14	; 20
 3ae:	95 e0       	ldi	r25, 0x05	; 5
 3b0:	9f 93       	push	r25
 3b2:	8f 93       	push	r24
 3b4:	d8 01       	movw	r26, r16
 3b6:	18 96       	adiw	r26, 0x08	; 8
 3b8:	ed 91       	ld	r30, X+
 3ba:	fc 91       	ld	r31, X
 3bc:	19 97       	sbiw	r26, 0x09	; 9
 3be:	09 95       	icall
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <ds3231_set_aging_offset+0x44>
 3c6:	c2 e0       	ldi	r28, 0x02	; 2
 3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <ds3231_set_aging_offset+0x44>
 3ca:	c3 e0       	ldi	r28, 0x03	; 3
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <ds3231_set_aging_offset+0x44>
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
 3d0:	8c 2f       	mov	r24, r28
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	08 95       	ret

000003da <ds3231_aging_offset_convert_to_register>:
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	00 97       	sbiw	r24, 0x00	; 0
 3e0:	81 f0       	breq	.+32     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e2:	fc 01       	movw	r30, r24
 3e4:	86 85       	ldd	r24, Z+14	; 0x0e
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	71 f4       	brne	.+28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ea:	e9 01       	movw	r28, r18
 3ec:	cb 01       	movw	r24, r22
 3ee:	ba 01       	movw	r22, r20
 3f0:	2f e8       	ldi	r18, 0x8F	; 143
 3f2:	32 ec       	ldi	r19, 0xC2	; 194
 3f4:	45 ef       	ldi	r20, 0xF5	; 245
 3f6:	5d e3       	ldi	r21, 0x3D	; 61
 3f8:	5f d3       	rcall	.+1726   	; 0xab8 <__divsf3>
 3fa:	c6 d3       	rcall	.+1932   	; 0xb88 <__fixsfsi>
 3fc:	68 83       	st	Y, r22
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	03 c0       	rjmp	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	01 c0       	rjmp	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <ds3231_init>:
 40e:	ff 92       	push	r15
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	1f 92       	push	r1
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	00 97       	sbiw	r24, 0x00	; 0
 420:	09 f4       	brne	.+2      	; 0x424 <ds3231_init+0x16>
 422:	d1 c0       	rjmp	.+418    	; 0x5c6 <ds3231_init+0x1b8>
 424:	dc 01       	movw	r26, r24
 426:	18 96       	adiw	r26, 0x08	; 8
 428:	2d 91       	ld	r18, X+
 42a:	3c 91       	ld	r19, X
 42c:	19 97       	sbiw	r26, 0x09	; 9
 42e:	21 15       	cp	r18, r1
 430:	31 05       	cpc	r19, r1
 432:	09 f4       	brne	.+2      	; 0x436 <ds3231_init+0x28>
 434:	cc c0       	rjmp	.+408    	; 0x5ce <ds3231_init+0x1c0>
 436:	8c 01       	movw	r16, r24
 438:	ed 91       	ld	r30, X+
 43a:	fc 91       	ld	r31, X
 43c:	30 97       	sbiw	r30, 0x00	; 0
 43e:	69 f4       	brne	.+26     	; 0x45a <ds3231_init+0x4c>
 440:	8f e4       	ldi	r24, 0x4F	; 79
 442:	95 e0       	ldi	r25, 0x05	; 5
 444:	9f 93       	push	r25
 446:	8f 93       	push	r24
 448:	f9 01       	movw	r30, r18
 44a:	09 95       	icall
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	0f 2e       	mov	r0, r31
 452:	f3 e0       	ldi	r31, 0x03	; 3
 454:	ff 2e       	mov	r15, r31
 456:	f0 2d       	mov	r31, r0
 458:	be c0       	rjmp	.+380    	; 0x5d6 <ds3231_init+0x1c8>
 45a:	dc 01       	movw	r26, r24
 45c:	12 96       	adiw	r26, 0x02	; 2
 45e:	8d 91       	ld	r24, X+
 460:	9c 91       	ld	r25, X
 462:	13 97       	sbiw	r26, 0x03	; 3
 464:	89 2b       	or	r24, r25
 466:	69 f4       	brne	.+26     	; 0x482 <ds3231_init+0x74>
 468:	8a e6       	ldi	r24, 0x6A	; 106
 46a:	95 e0       	ldi	r25, 0x05	; 5
 46c:	9f 93       	push	r25
 46e:	8f 93       	push	r24
 470:	f9 01       	movw	r30, r18
 472:	09 95       	icall
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 2e       	mov	r0, r31
 47a:	f3 e0       	ldi	r31, 0x03	; 3
 47c:	ff 2e       	mov	r15, r31
 47e:	f0 2d       	mov	r31, r0
 480:	aa c0       	rjmp	.+340    	; 0x5d6 <ds3231_init+0x1c8>
 482:	d8 01       	movw	r26, r16
 484:	14 96       	adiw	r26, 0x04	; 4
 486:	8d 91       	ld	r24, X+
 488:	9c 91       	ld	r25, X
 48a:	15 97       	sbiw	r26, 0x05	; 5
 48c:	89 2b       	or	r24, r25
 48e:	69 f4       	brne	.+26     	; 0x4aa <ds3231_init+0x9c>
 490:	87 e8       	ldi	r24, 0x87	; 135
 492:	95 e0       	ldi	r25, 0x05	; 5
 494:	9f 93       	push	r25
 496:	8f 93       	push	r24
 498:	f9 01       	movw	r30, r18
 49a:	09 95       	icall
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 2e       	mov	r0, r31
 4a2:	f3 e0       	ldi	r31, 0x03	; 3
 4a4:	ff 2e       	mov	r15, r31
 4a6:	f0 2d       	mov	r31, r0
 4a8:	96 c0       	rjmp	.+300    	; 0x5d6 <ds3231_init+0x1c8>
 4aa:	d8 01       	movw	r26, r16
 4ac:	16 96       	adiw	r26, 0x06	; 6
 4ae:	8d 91       	ld	r24, X+
 4b0:	9c 91       	ld	r25, X
 4b2:	17 97       	sbiw	r26, 0x07	; 7
 4b4:	89 2b       	or	r24, r25
 4b6:	69 f4       	brne	.+26     	; 0x4d2 <ds3231_init+0xc4>
 4b8:	83 ea       	ldi	r24, 0xA3	; 163
 4ba:	95 e0       	ldi	r25, 0x05	; 5
 4bc:	9f 93       	push	r25
 4be:	8f 93       	push	r24
 4c0:	f9 01       	movw	r30, r18
 4c2:	09 95       	icall
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 2e       	mov	r0, r31
 4ca:	f3 e0       	ldi	r31, 0x03	; 3
 4cc:	ff 2e       	mov	r15, r31
 4ce:	f0 2d       	mov	r31, r0
 4d0:	82 c0       	rjmp	.+260    	; 0x5d6 <ds3231_init+0x1c8>
 4d2:	d8 01       	movw	r26, r16
 4d4:	1c 96       	adiw	r26, 0x0c	; 12
 4d6:	8d 91       	ld	r24, X+
 4d8:	9c 91       	ld	r25, X
 4da:	1d 97       	sbiw	r26, 0x0d	; 13
 4dc:	89 2b       	or	r24, r25
 4de:	69 f4       	brne	.+26     	; 0x4fa <ds3231_init+0xec>
 4e0:	8e eb       	ldi	r24, 0xBE	; 190
 4e2:	95 e0       	ldi	r25, 0x05	; 5
 4e4:	9f 93       	push	r25
 4e6:	8f 93       	push	r24
 4e8:	f9 01       	movw	r30, r18
 4ea:	09 95       	icall
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 2e       	mov	r0, r31
 4f2:	f3 e0       	ldi	r31, 0x03	; 3
 4f4:	ff 2e       	mov	r15, r31
 4f6:	f0 2d       	mov	r31, r0
 4f8:	6e c0       	rjmp	.+220    	; 0x5d6 <ds3231_init+0x1c8>
 4fa:	d8 01       	movw	r26, r16
 4fc:	1a 96       	adiw	r26, 0x0a	; 10
 4fe:	8d 91       	ld	r24, X+
 500:	9c 91       	ld	r25, X
 502:	1b 97       	sbiw	r26, 0x0b	; 11
 504:	89 2b       	or	r24, r25
 506:	69 f4       	brne	.+26     	; 0x522 <ds3231_init+0x114>
 508:	89 ed       	ldi	r24, 0xD9	; 217
 50a:	95 e0       	ldi	r25, 0x05	; 5
 50c:	9f 93       	push	r25
 50e:	8f 93       	push	r24
 510:	f9 01       	movw	r30, r18
 512:	09 95       	icall
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	0f 2e       	mov	r0, r31
 51a:	f3 e0       	ldi	r31, 0x03	; 3
 51c:	ff 2e       	mov	r15, r31
 51e:	f0 2d       	mov	r31, r0
 520:	5a c0       	rjmp	.+180    	; 0x5d6 <ds3231_init+0x1c8>
 522:	09 95       	icall
 524:	f8 2e       	mov	r15, r24
 526:	88 23       	and	r24, r24
 528:	79 f0       	breq	.+30     	; 0x548 <ds3231_init+0x13a>
 52a:	8c ef       	ldi	r24, 0xFC	; 252
 52c:	95 e0       	ldi	r25, 0x05	; 5
 52e:	9f 93       	push	r25
 530:	8f 93       	push	r24
 532:	d8 01       	movw	r26, r16
 534:	18 96       	adiw	r26, 0x08	; 8
 536:	ed 91       	ld	r30, X+
 538:	fc 91       	ld	r31, X
 53a:	19 97       	sbiw	r26, 0x09	; 9
 53c:	09 95       	icall
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	ff 24       	eor	r15, r15
 544:	f3 94       	inc	r15
 546:	47 c0       	rjmp	.+142    	; 0x5d6 <ds3231_init+0x1c8>
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	ae 01       	movw	r20, r28
 54c:	4f 5f       	subi	r20, 0xFF	; 255
 54e:	5f 4f       	sbci	r21, 0xFF	; 255
 550:	6f e0       	ldi	r22, 0x0F	; 15
 552:	c8 01       	movw	r24, r16
 554:	c0 dd       	rcall	.-1152   	; 0xd6 <a_ds3231_iic_multiple_read>
 556:	88 23       	and	r24, r24
 558:	a9 f0       	breq	.+42     	; 0x584 <ds3231_init+0x176>
 55a:	8e eb       	ldi	r24, 0xBE	; 190
 55c:	94 e0       	ldi	r25, 0x04	; 4
 55e:	9f 93       	push	r25
 560:	8f 93       	push	r24
 562:	d8 01       	movw	r26, r16
 564:	18 96       	adiw	r26, 0x08	; 8
 566:	ed 91       	ld	r30, X+
 568:	fc 91       	ld	r31, X
 56a:	19 97       	sbiw	r26, 0x09	; 9
 56c:	09 95       	icall
 56e:	d8 01       	movw	r26, r16
 570:	12 96       	adiw	r26, 0x02	; 2
 572:	ed 91       	ld	r30, X+
 574:	fc 91       	ld	r31, X
 576:	13 97       	sbiw	r26, 0x03	; 3
 578:	09 95       	icall
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	ff 24       	eor	r15, r15
 580:	f3 94       	inc	r15
 582:	29 c0       	rjmp	.+82     	; 0x5d6 <ds3231_init+0x1c8>
 584:	49 81       	ldd	r20, Y+1	; 0x01
 586:	4f 77       	andi	r20, 0x7F	; 127
 588:	49 83       	std	Y+1, r20	; 0x01
 58a:	6f e0       	ldi	r22, 0x0F	; 15
 58c:	c8 01       	movw	r24, r16
 58e:	88 dd       	rcall	.-1264   	; 0xa0 <a_ds3231_iic_write>
 590:	88 23       	and	r24, r24
 592:	a9 f0       	breq	.+42     	; 0x5be <ds3231_init+0x1b0>
 594:	86 e1       	ldi	r24, 0x16	; 22
 596:	96 e0       	ldi	r25, 0x06	; 6
 598:	9f 93       	push	r25
 59a:	8f 93       	push	r24
 59c:	d8 01       	movw	r26, r16
 59e:	18 96       	adiw	r26, 0x08	; 8
 5a0:	ed 91       	ld	r30, X+
 5a2:	fc 91       	ld	r31, X
 5a4:	19 97       	sbiw	r26, 0x09	; 9
 5a6:	09 95       	icall
 5a8:	d8 01       	movw	r26, r16
 5aa:	12 96       	adiw	r26, 0x02	; 2
 5ac:	ed 91       	ld	r30, X+
 5ae:	fc 91       	ld	r31, X
 5b0:	13 97       	sbiw	r26, 0x03	; 3
 5b2:	09 95       	icall
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	ff 24       	eor	r15, r15
 5ba:	f3 94       	inc	r15
 5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <ds3231_init+0x1c8>
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	f8 01       	movw	r30, r16
 5c2:	86 87       	std	Z+14, r24	; 0x0e
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <ds3231_init+0x1c8>
 5c6:	68 94       	set
 5c8:	ff 24       	eor	r15, r15
 5ca:	f1 f8       	bld	r15, 1
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <ds3231_init+0x1c8>
 5ce:	0f 2e       	mov	r0, r31
 5d0:	f3 e0       	ldi	r31, 0x03	; 3
 5d2:	ff 2e       	mov	r15, r31
 5d4:	f0 2d       	mov	r31, r0
 5d6:	8f 2d       	mov	r24, r15
 5d8:	0f 90       	pop	r0
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
 5e4:	08 95       	ret

000005e6 <ds3231_deinit>:
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	c1 f0       	breq	.+48     	; 0x620 <ds3231_deinit+0x3a>
 5f0:	fc 01       	movw	r30, r24
 5f2:	16 85       	ldd	r17, Z+14	; 0x0e
 5f4:	11 30       	cpi	r17, 0x01	; 1
 5f6:	b1 f4       	brne	.+44     	; 0x624 <ds3231_deinit+0x3e>
 5f8:	ec 01       	movw	r28, r24
 5fa:	02 80       	ldd	r0, Z+2	; 0x02
 5fc:	f3 81       	ldd	r31, Z+3	; 0x03
 5fe:	e0 2d       	mov	r30, r0
 600:	09 95       	icall
 602:	88 23       	and	r24, r24
 604:	59 f0       	breq	.+22     	; 0x61c <ds3231_deinit+0x36>
 606:	84 e3       	ldi	r24, 0x34	; 52
 608:	96 e0       	ldi	r25, 0x06	; 6
 60a:	9f 93       	push	r25
 60c:	8f 93       	push	r24
 60e:	e8 85       	ldd	r30, Y+8	; 0x08
 610:	f9 85       	ldd	r31, Y+9	; 0x09
 612:	09 95       	icall
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	81 2f       	mov	r24, r17
 61a:	05 c0       	rjmp	.+10     	; 0x626 <ds3231_deinit+0x40>
 61c:	1e 86       	std	Y+14, r1	; 0x0e
 61e:	03 c0       	rjmp	.+6      	; 0x626 <ds3231_deinit+0x40>
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	01 c0       	rjmp	.+2      	; 0x626 <ds3231_deinit+0x40>
 624:	83 e0       	ldi	r24, 0x03	; 3
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	08 95       	ret

0000062e <ds3231_set_32khz_output>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t ds3231_set_32khz_output(ds3231_handle_t *handle, ds3231_bool_t enable)
{
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	1f 92       	push	r1
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                      /* check handle */
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	b1 f1       	breq	.+108    	; 0x6b0 <ds3231_set_32khz_output+0x82>
    {
        return 2;                                                                            /* return error */
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
 644:	dc 01       	movw	r26, r24
 646:	1e 96       	adiw	r26, 0x0e	; 14
 648:	1c 91       	ld	r17, X
 64a:	11 30       	cpi	r17, 0x01	; 1
 64c:	99 f5       	brne	.+102    	; 0x6b4 <ds3231_set_32khz_output+0x86>
 64e:	06 2f       	mov	r16, r22
 650:	7c 01       	movw	r14, r24
    {
        return 3;                                                                            /* return error */
    }
    
    res = a_ds3231_iic_multiple_read(handle, DS3231_REG_STATUS, (uint8_t *)&prev, 1);        /* multiple read */
 652:	21 e0       	ldi	r18, 0x01	; 1
 654:	ae 01       	movw	r20, r28
 656:	4f 5f       	subi	r20, 0xFF	; 255
 658:	5f 4f       	sbci	r21, 0xFF	; 255
 65a:	6f e0       	ldi	r22, 0x0F	; 15
 65c:	3c dd       	rcall	.-1416   	; 0xd6 <a_ds3231_iic_multiple_read>
    if (res != 0)                                                                            /* check result */
 65e:	88 23       	and	r24, r24
 660:	69 f0       	breq	.+26     	; 0x67c <ds3231_set_32khz_output+0x4e>
    {
        handle->debug_print("ds3231: read status failed.\n");                                /* read status failed */
 662:	8e eb       	ldi	r24, 0xBE	; 190
 664:	94 e0       	ldi	r25, 0x04	; 4
 666:	9f 93       	push	r25
 668:	8f 93       	push	r24
 66a:	d7 01       	movw	r26, r14
 66c:	18 96       	adiw	r26, 0x08	; 8
 66e:	ed 91       	ld	r30, X+
 670:	fc 91       	ld	r31, X
 672:	19 97       	sbiw	r26, 0x09	; 9
 674:	09 95       	icall
        
        return 1;                                                                            /* return error */
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	1f c0       	rjmp	.+62     	; 0x6ba <ds3231_set_32khz_output+0x8c>
    }
    prev &= ~(1 << 3);                                                                       /* clear config */
    prev |= enable << 3;                                                                     /* set enable */
 67c:	49 81       	ldd	r20, Y+1	; 0x01
 67e:	47 7f       	andi	r20, 0xF7	; 247
 680:	60 2f       	mov	r22, r16
 682:	66 0f       	add	r22, r22
 684:	66 0f       	add	r22, r22
 686:	66 0f       	add	r22, r22
 688:	46 2b       	or	r20, r22
 68a:	49 83       	std	Y+1, r20	; 0x01
    res = a_ds3231_iic_write(handle, DS3231_REG_STATUS, prev);                               /* write status */
 68c:	6f e0       	ldi	r22, 0x0F	; 15
 68e:	c7 01       	movw	r24, r14
 690:	07 dd       	rcall	.-1522   	; 0xa0 <a_ds3231_iic_write>
    if (res != 0)                                                                            /* check result */
 692:	88 23       	and	r24, r24
 694:	89 f0       	breq	.+34     	; 0x6b8 <ds3231_set_32khz_output+0x8a>
    {
        handle->debug_print("ds3231: write status failed.\n");                               /* write status failed */
 696:	86 e1       	ldi	r24, 0x16	; 22
 698:	96 e0       	ldi	r25, 0x06	; 6
 69a:	9f 93       	push	r25
 69c:	8f 93       	push	r24
 69e:	d7 01       	movw	r26, r14
 6a0:	18 96       	adiw	r26, 0x08	; 8
 6a2:	ed 91       	ld	r30, X+
 6a4:	fc 91       	ld	r31, X
 6a6:	19 97       	sbiw	r26, 0x09	; 9
 6a8:	09 95       	icall
        
        return 1;                                                                            /* return error */
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	05 c0       	rjmp	.+10     	; 0x6ba <ds3231_set_32khz_output+0x8c>
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                      /* check handle */
    {
        return 2;                                                                            /* return error */
 6b0:	12 e0       	ldi	r17, 0x02	; 2
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <ds3231_set_32khz_output+0x8c>
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
    {
        return 3;                                                                            /* return error */
 6b4:	13 e0       	ldi	r17, 0x03	; 3
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <ds3231_set_32khz_output+0x8c>
        handle->debug_print("ds3231: write status failed.\n");                               /* write status failed */
        
        return 1;                                                                            /* return error */
    }
    
    return 0;                                                                                /* success return 0 */
 6b8:	10 e0       	ldi	r17, 0x00	; 0
}
 6ba:	81 2f       	mov	r24, r17
 6bc:	0f 90       	pop	r0
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	ff 90       	pop	r15
 6c8:	ef 90       	pop	r14
 6ca:	08 95       	ret

000006cc <ds3231_basic_init>:
 *         - 0 success
 *         - 1 init failed
 * @note   none
 */
uint8_t ds3231_basic_init(void)
{
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	1f 92       	push	r1
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
    uint8_t res;
    int8_t reg;
    
    /* link functions */
    DRIVER_DS3231_LINK_INIT(&gs_handle, ds3231_handle_t);
 6d6:	e2 ef       	ldi	r30, 0xF2	; 242
 6d8:	f7 e0       	ldi	r31, 0x07	; 7
 6da:	8f e0       	ldi	r24, 0x0F	; 15
 6dc:	df 01       	movw	r26, r30
 6de:	1d 92       	st	X+, r1
 6e0:	8a 95       	dec	r24
 6e2:	e9 f7       	brne	.-6      	; 0x6de <ds3231_basic_init+0x12>
    DRIVER_DS3231_LINK_IIC_INIT(&gs_handle, ds3231_interface_iic_init);
 6e4:	87 e3       	ldi	r24, 0x37	; 55
 6e6:	94 e0       	ldi	r25, 0x04	; 4
 6e8:	91 83       	std	Z+1, r25	; 0x01
 6ea:	80 83       	st	Z, r24
    DRIVER_DS3231_LINK_IIC_DEINIT(&gs_handle, ds3231_interface_iic_deinit);
 6ec:	8e e3       	ldi	r24, 0x3E	; 62
 6ee:	94 e0       	ldi	r25, 0x04	; 4
 6f0:	93 83       	std	Z+3, r25	; 0x03
 6f2:	82 83       	std	Z+2, r24	; 0x02
    DRIVER_DS3231_LINK_IIC_READ(&gs_handle, ds3231_interface_iic_read);
 6f4:	80 e4       	ldi	r24, 0x40	; 64
 6f6:	94 e0       	ldi	r25, 0x04	; 4
 6f8:	97 83       	std	Z+7, r25	; 0x07
 6fa:	86 83       	std	Z+6, r24	; 0x06
    DRIVER_DS3231_LINK_IIC_WRITE(&gs_handle, ds3231_interface_iic_write);
 6fc:	85 e7       	ldi	r24, 0x75	; 117
 6fe:	94 e0       	ldi	r25, 0x04	; 4
 700:	95 83       	std	Z+5, r25	; 0x05
 702:	84 83       	std	Z+4, r24	; 0x04
    DRIVER_DS3231_LINK_DELAY_MS(&gs_handle, ds3231_interface_delay_ms);
 704:	85 e8       	ldi	r24, 0x85	; 133
 706:	94 e0       	ldi	r25, 0x04	; 4
 708:	95 87       	std	Z+13, r25	; 0x0d
 70a:	84 87       	std	Z+12, r24	; 0x0c
    DRIVER_DS3231_LINK_DEBUG_PRINT(&gs_handle, ds3231_interface_debug_print);
 70c:	86 e8       	ldi	r24, 0x86	; 134
 70e:	94 e0       	ldi	r25, 0x04	; 4
 710:	91 87       	std	Z+9, r25	; 0x09
 712:	80 87       	std	Z+8, r24	; 0x08
    DRIVER_DS3231_LINK_RECEIVE_CALLBACK(&gs_handle, ds3231_interface_receive_callback);
 714:	8d e8       	ldi	r24, 0x8D	; 141
 716:	94 e0       	ldi	r25, 0x04	; 4
 718:	93 87       	std	Z+11, r25	; 0x0b
 71a:	82 87       	std	Z+10, r24	; 0x0a

    /* init ds3231 */
    res = ds3231_init(&gs_handle);
 71c:	cf 01       	movw	r24, r30
 71e:	77 de       	rcall	.-786    	; 0x40e <ds3231_init>
    if (res != 0)
 720:	88 23       	and	r24, r24
 722:	49 f0       	breq	.+18     	; 0x736 <ds3231_basic_init+0x6a>
    {
        ds3231_interface_debug_print("ds3231: init failed.\n");
 724:	8d e7       	ldi	r24, 0x7D	; 125
 726:	96 e0       	ldi	r25, 0x06	; 6
 728:	9f 93       	push	r25
 72a:	8f 93       	push	r24
 72c:	ef d0       	rcall	.+478    	; 0x90c <ds3231_interface_debug_print>
        
        return 1;
 72e:	0f 90       	pop	r0
 730:	0f 90       	pop	r0
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	98 c0       	rjmp	.+304    	; 0x866 <ds3231_basic_init+0x19a>
    }
    
    /* set oscillator */
    res = ds3231_set_oscillator(&gs_handle, DS3231_BOOL_TRUE);
 736:	61 e0       	ldi	r22, 0x01	; 1
 738:	82 ef       	ldi	r24, 0xF2	; 242
 73a:	97 e0       	ldi	r25, 0x07	; 7
 73c:	da dc       	rcall	.-1612   	; 0xf2 <ds3231_set_oscillator>
    if (res != 0)
 73e:	88 23       	and	r24, r24
 740:	61 f0       	breq	.+24     	; 0x75a <ds3231_basic_init+0x8e>
    {
        ds3231_interface_debug_print("ds3231: set oscillator failed.\n");
 742:	83 e9       	ldi	r24, 0x93	; 147
 744:	96 e0       	ldi	r25, 0x06	; 6
 746:	9f 93       	push	r25
 748:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
 74a:	e0 d0       	rcall	.+448    	; 0x90c <ds3231_interface_debug_print>
 74c:	82 ef       	ldi	r24, 0xF2	; 242
 74e:	97 e0       	ldi	r25, 0x07	; 7
 750:	4a df       	rcall	.-364    	; 0x5e6 <ds3231_deinit>
        
        return 1;
 752:	0f 90       	pop	r0
 754:	0f 90       	pop	r0
 756:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    /* disable alarm1 */
    res = ds3231_set_alarm_interrupt(&gs_handle, DS3231_ALARM_1, DS3231_BOOL_FALSE);
 758:	86 c0       	rjmp	.+268    	; 0x866 <ds3231_basic_init+0x19a>
 75a:	40 e0       	ldi	r20, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	82 ef       	ldi	r24, 0xF2	; 242
 760:	97 e0       	ldi	r25, 0x07	; 7
 762:	17 dd       	rcall	.-1490   	; 0x192 <ds3231_set_alarm_interrupt>
    if (res != 0)
 764:	88 23       	and	r24, r24
    {
        ds3231_interface_debug_print("ds3231: set alarm1 interrupt failed.\n");
 766:	61 f0       	breq	.+24     	; 0x780 <ds3231_basic_init+0xb4>
 768:	83 eb       	ldi	r24, 0xB3	; 179
 76a:	96 e0       	ldi	r25, 0x06	; 6
 76c:	9f 93       	push	r25
 76e:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
 770:	cd d0       	rcall	.+410    	; 0x90c <ds3231_interface_debug_print>
 772:	82 ef       	ldi	r24, 0xF2	; 242
 774:	97 e0       	ldi	r25, 0x07	; 7
 776:	37 df       	rcall	.-402    	; 0x5e6 <ds3231_deinit>
        
        return 1;
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	81 e0       	ldi	r24, 0x01	; 1
    }
    
    /* disable alarm2 */
    res = ds3231_set_alarm_interrupt(&gs_handle, DS3231_ALARM_2, DS3231_BOOL_FALSE);
 77e:	73 c0       	rjmp	.+230    	; 0x866 <ds3231_basic_init+0x19a>
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	61 e0       	ldi	r22, 0x01	; 1
 784:	82 ef       	ldi	r24, 0xF2	; 242
 786:	97 e0       	ldi	r25, 0x07	; 7
    if (res != 0)
 788:	04 dd       	rcall	.-1528   	; 0x192 <ds3231_set_alarm_interrupt>
    {
        ds3231_interface_debug_print("ds3231: set alarm2 interrupt failed.\n");
 78a:	88 23       	and	r24, r24
 78c:	61 f0       	breq	.+24     	; 0x7a6 <ds3231_basic_init+0xda>
 78e:	89 ed       	ldi	r24, 0xD9	; 217
 790:	96 e0       	ldi	r25, 0x06	; 6
 792:	9f 93       	push	r25
 794:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
 796:	ba d0       	rcall	.+372    	; 0x90c <ds3231_interface_debug_print>
 798:	82 ef       	ldi	r24, 0xF2	; 242
 79a:	97 e0       	ldi	r25, 0x07	; 7
        
        return 1;
 79c:	24 df       	rcall	.-440    	; 0x5e6 <ds3231_deinit>
 79e:	0f 90       	pop	r0
 7a0:	0f 90       	pop	r0
    }
    
    /* set square wave */
    res = ds3231_set_pin(&gs_handle, DS3231_PIN_SQUARE_WAVE);
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	60 c0       	rjmp	.+192    	; 0x866 <ds3231_basic_init+0x19a>
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	82 ef       	ldi	r24, 0xF2	; 242
    if (res != 0)
 7aa:	97 e0       	ldi	r25, 0x07	; 7
 7ac:	52 dd       	rcall	.-1372   	; 0x252 <ds3231_set_pin>
    {
        ds3231_interface_debug_print("ds3231: set pin failed.\n");
 7ae:	88 23       	and	r24, r24
 7b0:	61 f0       	breq	.+24     	; 0x7ca <ds3231_basic_init+0xfe>
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	96 e0       	ldi	r25, 0x06	; 6
 7b6:	9f 93       	push	r25
        (void)ds3231_deinit(&gs_handle);
 7b8:	8f 93       	push	r24
 7ba:	a8 d0       	rcall	.+336    	; 0x90c <ds3231_interface_debug_print>
 7bc:	82 ef       	ldi	r24, 0xF2	; 242
 7be:	97 e0       	ldi	r25, 0x07	; 7
        
        return 1;
 7c0:	12 df       	rcall	.-476    	; 0x5e6 <ds3231_deinit>
 7c2:	0f 90       	pop	r0
 7c4:	0f 90       	pop	r0
    }
    
    /* disable square wave */
    res = ds3231_set_square_wave(&gs_handle, DS3231_BOOL_FALSE);
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	4e c0       	rjmp	.+156    	; 0x866 <ds3231_basic_init+0x19a>
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	82 ef       	ldi	r24, 0xF2	; 242
 7ce:	97 e0       	ldi	r25, 0x07	; 7
    if (res != 0)
 7d0:	8e dd       	rcall	.-1252   	; 0x2ee <ds3231_set_square_wave>
 7d2:	88 23       	and	r24, r24
    {
        ds3231_interface_debug_print("ds3231: set square wave failed.\n");
 7d4:	61 f0       	breq	.+24     	; 0x7ee <ds3231_basic_init+0x122>
 7d6:	88 e1       	ldi	r24, 0x18	; 24
 7d8:	97 e0       	ldi	r25, 0x07	; 7
 7da:	9f 93       	push	r25
 7dc:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
 7de:	96 d0       	rcall	.+300    	; 0x90c <ds3231_interface_debug_print>
 7e0:	82 ef       	ldi	r24, 0xF2	; 242
 7e2:	97 e0       	ldi	r25, 0x07	; 7
        
        return 1;
 7e4:	00 df       	rcall	.-512    	; 0x5e6 <ds3231_deinit>
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
    }
    
    /* disable 32khz output */
    res = ds3231_set_32khz_output(&gs_handle, DS3231_BOOL_FALSE);
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	3c c0       	rjmp	.+120    	; 0x866 <ds3231_basic_init+0x19a>
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	82 ef       	ldi	r24, 0xF2	; 242
 7f2:	97 e0       	ldi	r25, 0x07	; 7
    if (res != 0)
 7f4:	1c df       	rcall	.-456    	; 0x62e <ds3231_set_32khz_output>
 7f6:	88 23       	and	r24, r24
    {
        ds3231_interface_debug_print("ds3231: set 32khz output failed.\n");
 7f8:	61 f0       	breq	.+24     	; 0x812 <ds3231_basic_init+0x146>
 7fa:	89 e3       	ldi	r24, 0x39	; 57
 7fc:	97 e0       	ldi	r25, 0x07	; 7
 7fe:	9f 93       	push	r25
 800:	8f 93       	push	r24
        (void)ds3231_deinit(&gs_handle);
 802:	84 d0       	rcall	.+264    	; 0x90c <ds3231_interface_debug_print>
 804:	82 ef       	ldi	r24, 0xF2	; 242
 806:	97 e0       	ldi	r25, 0x07	; 7
        
        return 1;
 808:	ee de       	rcall	.-548    	; 0x5e6 <ds3231_deinit>
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
    }
    
    /* convert to register */
    res = ds3231_aging_offset_convert_to_register(&gs_handle, DS3231_BASIC_DEFAULT_AGING_OFFSET, (int8_t *)&reg);
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	2a c0       	rjmp	.+84     	; 0x866 <ds3231_basic_init+0x19a>
 812:	9e 01       	movw	r18, r28
 814:	2f 5f       	subi	r18, 0xFF	; 255
 816:	3f 4f       	sbci	r19, 0xFF	; 255
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	ba 01       	movw	r22, r20
 81e:	82 ef       	ldi	r24, 0xF2	; 242
    if (res != 0)
 820:	97 e0       	ldi	r25, 0x07	; 7
 822:	db dd       	rcall	.-1098   	; 0x3da <ds3231_aging_offset_convert_to_register>
    {
        ds3231_interface_debug_print("ds3231: convert to register failed.\n");
 824:	88 23       	and	r24, r24
 826:	61 f0       	breq	.+24     	; 0x840 <ds3231_basic_init+0x174>
 828:	8b e5       	ldi	r24, 0x5B	; 91
 82a:	97 e0       	ldi	r25, 0x07	; 7
        (void)ds3231_deinit(&gs_handle);
 82c:	9f 93       	push	r25
 82e:	8f 93       	push	r24
 830:	6d d0       	rcall	.+218    	; 0x90c <ds3231_interface_debug_print>
 832:	82 ef       	ldi	r24, 0xF2	; 242
        
        return 1;
 834:	97 e0       	ldi	r25, 0x07	; 7
 836:	d7 de       	rcall	.-594    	; 0x5e6 <ds3231_deinit>
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
    }
    
    /* set aging offset */
    res = ds3231_set_aging_offset(&gs_handle, reg);
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	13 c0       	rjmp	.+38     	; 0x866 <ds3231_basic_init+0x19a>
 840:	69 81       	ldd	r22, Y+1	; 0x01
 842:	82 ef       	ldi	r24, 0xF2	; 242
 844:	97 e0       	ldi	r25, 0x07	; 7
    if (res != 0)
 846:	a2 dd       	rcall	.-1212   	; 0x38c <ds3231_set_aging_offset>
 848:	88 23       	and	r24, r24
    {
        ds3231_interface_debug_print("ds3231: set aging offset failed.\n");
 84a:	61 f0       	breq	.+24     	; 0x864 <ds3231_basic_init+0x198>
 84c:	80 e8       	ldi	r24, 0x80	; 128
 84e:	97 e0       	ldi	r25, 0x07	; 7
 850:	9f 93       	push	r25
 852:	8f 93       	push	r24
 854:	5b d0       	rcall	.+182    	; 0x90c <ds3231_interface_debug_print>
        (void)ds3231_deinit(&gs_handle);
 856:	82 ef       	ldi	r24, 0xF2	; 242
 858:	97 e0       	ldi	r25, 0x07	; 7
 85a:	c5 de       	rcall	.-630    	; 0x5e6 <ds3231_deinit>
 85c:	0f 90       	pop	r0
        
        return 1;
 85e:	0f 90       	pop	r0
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	01 c0       	rjmp	.+2      	; 0x866 <ds3231_basic_init+0x19a>
 864:	80 e0       	ldi	r24, 0x00	; 0
    }
    
    return 0;
 866:	0f 90       	pop	r0
}
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	08 95       	ret

0000086e <ds3231_interface_iic_init>:
 * @note   none
 */
uint8_t ds3231_interface_iic_init(void)
{
	/* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	TWSR = 0;                         /* no prescaler */
 86e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 872:	88 e4       	ldi	r24, 0x48	; 72
 874:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

    return 0;
}
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	08 95       	ret

0000087c <ds3231_interface_iic_deinit>:
 */
uint8_t ds3231_interface_iic_deinit(void)
{
	
    return 0;
}
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	08 95       	ret

00000880 <ds3231_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 880:	af 92       	push	r10
 882:	bf 92       	push	r11
 884:	cf 92       	push	r12
 886:	df 92       	push	r13
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
	for (uint8_t i = 0; i < len; i++)
 894:	21 15       	cp	r18, r1
 896:	31 05       	cpc	r19, r1
 898:	e1 f0       	breq	.+56     	; 0x8d2 <ds3231_interface_iic_read+0x52>
 89a:	79 01       	movw	r14, r18
 89c:	6a 01       	movw	r12, r20
 89e:	b6 2e       	mov	r11, r22
	{
		i2c_rep_start((addr<<1)+I2C_WRITE);
 8a0:	08 2f       	mov	r16, r24
 8a2:	00 0f       	add	r16, r16
		i2c_write(reg);
		/* Send START condition with SLA+R */
		i2c_rep_start((addr<<1)+I2C_READ);
 8a4:	aa 24       	eor	r10, r10
 8a6:	a3 94       	inc	r10
 8a8:	a0 0e       	add	r10, r16
 8aa:	16 2f       	mov	r17, r22
 8ac:	c0 e0       	ldi	r28, 0x00	; 0
 8ae:	d0 e0       	ldi	r29, 0x00	; 0
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
	for (uint8_t i = 0; i < len; i++)
	{
		i2c_rep_start((addr<<1)+I2C_WRITE);
 8b0:	80 2f       	mov	r24, r16
 8b2:	5b d0       	rcall	.+182    	; 0x96a <i2c_rep_start>
		i2c_write(reg);
 8b4:	81 2f       	mov	r24, r17
 8b6:	5b d0       	rcall	.+182    	; 0x96e <i2c_write>
		/* Send START condition with SLA+R */
		i2c_rep_start((addr<<1)+I2C_READ);
 8b8:	8a 2d       	mov	r24, r10
 8ba:	57 d0       	rcall	.+174    	; 0x96a <i2c_rep_start>
		/* Receive data */
		buf[i] = i2c_readNak();
 8bc:	cc 0d       	add	r28, r12
 8be:	dd 1d       	adc	r29, r13
 8c0:	68 d0       	rcall	.+208    	; 0x992 <i2c_readNak>
 8c2:	88 83       	st	Y, r24
 8c4:	1f 5f       	subi	r17, 0xFF	; 255
		reg += 1;
 8c6:	c1 2f       	mov	r28, r17
 *             - 1 read failed
 * @note       none
 */
uint8_t ds3231_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
	for (uint8_t i = 0; i < len; i++)
 8c8:	cb 19       	sub	r28, r11
 8ca:	d0 e0       	ldi	r29, 0x00	; 0
 8cc:	ce 15       	cp	r28, r14
 8ce:	df 05       	cpc	r29, r15
 8d0:	78 f3       	brcs	.-34     	; 0x8b0 <ds3231_interface_iic_read+0x30>
 8d2:	80 e0       	ldi	r24, 0x00	; 0
		/* Receive data */
		buf[i] = i2c_readNak();
		reg += 1;
	}
    return 0;
}
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	ff 90       	pop	r15
 8de:	ef 90       	pop	r14
 8e0:	df 90       	pop	r13
 8e2:	cf 90       	pop	r12
 8e4:	bf 90       	pop	r11
 8e6:	af 90       	pop	r10
 8e8:	08 95       	ret

000008ea <ds3231_interface_iic_write>:
 8ea:	1f 93       	push	r17
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t ds3231_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	16 2f       	mov	r17, r22
 8f2:	ea 01       	movw	r28, r20
	i2c_rep_start((addr<<1)+I2C_WRITE);
 8f4:	88 0f       	add	r24, r24
 8f6:	39 d0       	rcall	.+114    	; 0x96a <i2c_rep_start>
	i2c_write(reg);
 8f8:	81 2f       	mov	r24, r17
 8fa:	39 d0       	rcall	.+114    	; 0x96e <i2c_write>
	/* Write data */
	i2c_write(*buf);
 8fc:	88 81       	ld	r24, Y
 8fe:	37 d0       	rcall	.+110    	; 0x96e <i2c_write>
 900:	80 e0       	ldi	r24, 0x00	; 0
	
    return 0;
}
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	1f 91       	pop	r17
 908:	08 95       	ret

0000090a <ds3231_interface_delay_ms>:
 90a:	08 95       	ret

0000090c <ds3231_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void ds3231_interface_debug_print(const char *const fmt, ...)
{
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	cd b7       	in	r28, 0x3d	; 61
 912:	de b7       	in	r29, 0x3e	; 62
    
}
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <ds3231_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the interrupt type
 * @note      none
 */
void ds3231_interface_receive_callback(uint8_t type)
{
 91a:	08 95       	ret

0000091c <i2c_start>:
		if( twst == TW_SR_DATA_ACK)
		{
			return TWDR;
		}
	}
}
 91c:	94 ea       	ldi	r25, 0xA4	; 164
 91e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 922:	ec eb       	ldi	r30, 0xBC	; 188
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	90 81       	ld	r25, Z
 928:	99 23       	and	r25, r25
 92a:	ec f7       	brge	.-6      	; 0x926 <i2c_start+0xa>
 92c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 930:	98 7f       	andi	r25, 0xF8	; 248
 932:	98 30       	cpi	r25, 0x08	; 8
 934:	11 f0       	breq	.+4      	; 0x93a <i2c_start+0x1e>
 936:	90 31       	cpi	r25, 0x10	; 16
 938:	a1 f4       	brne	.+40     	; 0x962 <i2c_start+0x46>
 93a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 93e:	84 e8       	ldi	r24, 0x84	; 132
 940:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 944:	ec eb       	ldi	r30, 0xBC	; 188
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	80 81       	ld	r24, Z
 94a:	88 23       	and	r24, r24
 94c:	ec f7       	brge	.-6      	; 0x948 <i2c_start+0x2c>
 94e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 952:	98 7f       	andi	r25, 0xF8	; 248
 954:	98 31       	cpi	r25, 0x18	; 24
 956:	39 f0       	breq	.+14     	; 0x966 <i2c_start+0x4a>
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	90 34       	cpi	r25, 0x40	; 64
 95c:	29 f4       	brne	.+10     	; 0x968 <i2c_start+0x4c>
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	08 95       	ret
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	08 95       	ret
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	08 95       	ret

0000096a <i2c_rep_start>:
 96a:	d8 cf       	rjmp	.-80     	; 0x91c <i2c_start>
 96c:	08 95       	ret

0000096e <i2c_write>:
 96e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 972:	84 e8       	ldi	r24, 0x84	; 132
 974:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 978:	ec eb       	ldi	r30, 0xBC	; 188
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	88 23       	and	r24, r24
 980:	ec f7       	brge	.-6      	; 0x97c <i2c_write+0xe>
 982:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 986:	98 7f       	andi	r25, 0xF8	; 248
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	98 32       	cpi	r25, 0x28	; 40
 98c:	09 f4       	brne	.+2      	; 0x990 <i2c_write+0x22>
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	08 95       	ret

00000992 <i2c_readNak>:
Outputs:	Data received from I2C device
Description:Receives and returns the data from I2C device.
******************************************************************** */
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 992:	84 e8       	ldi	r24, 0x84	; 132
 994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 998:	ec eb       	ldi	r30, 0xBC	; 188
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	88 23       	and	r24, r24
 9a0:	ec f7       	brge	.-6      	; 0x99c <i2c_readNak+0xa>
	
	return TWDR;
 9a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 9a6:	08 95       	ret

000009a8 <enable_interrupts>:
 Outputs:	none
 Description:enables interrupt INT0 (pin D2 and sets falling condition for firing) 
 ******************************************************************** */
 void enable_interrupts()
 {
	 EIMSK |= (1<<INT0);	// Interrupt on pin D2
 9a8:	e8 9a       	sbi	0x1d, 0	; 29
	 EICRA |= (1<<ISC01);	// Falling condition
 9aa:	e9 e6       	ldi	r30, 0x69	; 105
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	82 60       	ori	r24, 0x02	; 2
 9b2:	80 83       	st	Z, r24
	 sei();
 9b4:	78 94       	sei
 9b6:	08 95       	ret

000009b8 <interruptConfig>:
 Outputs:	none
 Description:sets PIND2 as input 
 ******************************************************************** */
 void interruptConfig()
 {
	 DDRD &= ~(1<<PIND2);	// Input
 9b8:	52 98       	cbi	0x0a, 2	; 10
 9ba:	08 95       	ret

000009bc <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_IDLE);
 9bc:	83 b7       	in	r24, 0x33	; 51
 9be:	81 7f       	andi	r24, 0xF1	; 241
 9c0:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
 9c2:	83 b7       	in	r24, 0x33	; 51
 9c4:	81 60       	ori	r24, 0x01	; 1
 9c6:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
 9c8:	83 b7       	in	r24, 0x33	; 51
 9ca:	81 60       	ori	r24, 0x01	; 1
 9cc:	83 bf       	out	0x33, r24	; 51
 9ce:	88 95       	sleep
 9d0:	83 b7       	in	r24, 0x33	; 51
 9d2:	8e 7f       	andi	r24, 0xFE	; 254
 9d4:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
 9d6:	83 b7       	in	r24, 0x33	; 51
 9d8:	8e 7f       	andi	r24, 0xFE	; 254
 9da:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
 9dc:	e4 e6       	ldi	r30, 0x64	; 100
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	80 71       	andi	r24, 0x10	; 16
 9e4:	80 83       	st	Z, r24
 9e6:	08 95       	ret

000009e8 <__vector_1>:
Inputs:		none
Outputs:	none
Description:wakes up MCU when an external interrupt on pin PIND2 occurs
******************************************************************** */
ISR(INT0_vect)
{
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	8f 93       	push	r24
 9f4:	9f 93       	push	r25
	toggle = 1;
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 a02:	9f 91       	pop	r25
 a04:	8f 91       	pop	r24
 a06:	0f 90       	pop	r0
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	0f 90       	pop	r0
 a0c:	1f 90       	pop	r1
 a0e:	18 95       	reti

00000a10 <setRegistersAlarm1>:


void setRegistersAlarm1(void)
{
/*------- Alarm 1 ---------- */
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a10:	80 ed       	ldi	r24, 0xD0	; 208
 a12:	84 df       	rcall	.-248    	; 0x91c <i2c_start>
	i2c_write(DS3231_REG_ALARM1_SECOND);
 a14:	87 e0       	ldi	r24, 0x07	; 7
 a16:	ab df       	rcall	.-170    	; 0x96e <i2c_write>
	i2c_write(dec2bcd(7));	// Seconds in dec
 a18:	87 e0       	ldi	r24, 0x07	; 7
 a1a:	a9 df       	rcall	.-174    	; 0x96e <i2c_write>
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a1c:	80 ed       	ldi	r24, 0xD0	; 208
 a1e:	7e df       	rcall	.-260    	; 0x91c <i2c_start>
	i2c_write(DS3231_REG_ALARM1_MINUTE);
 a20:	88 e0       	ldi	r24, 0x08	; 8
 a22:	a5 df       	rcall	.-182    	; 0x96e <i2c_write>
	i2c_write(128);
 a24:	80 e8       	ldi	r24, 0x80	; 128
 a26:	a3 df       	rcall	.-186    	; 0x96e <i2c_write>
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a28:	80 ed       	ldi	r24, 0xD0	; 208
 a2a:	78 df       	rcall	.-272    	; 0x91c <i2c_start>
	i2c_write(DS3231_REG_ALARM1_HOUR);
 a2c:	89 e0       	ldi	r24, 0x09	; 9
 a2e:	9f df       	rcall	.-194    	; 0x96e <i2c_write>
	i2c_write(128);
 a30:	80 e8       	ldi	r24, 0x80	; 128
 a32:	9d df       	rcall	.-198    	; 0x96e <i2c_write>
 a34:	80 ed       	ldi	r24, 0xD0	; 208
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a36:	72 df       	rcall	.-284    	; 0x91c <i2c_start>
 a38:	8a e0       	ldi	r24, 0x0A	; 10
 a3a:	99 df       	rcall	.-206    	; 0x96e <i2c_write>
	i2c_write(DS3231_REG_ALARM1_WEEK);
 a3c:	80 e8       	ldi	r24, 0x80	; 128
 a3e:	97 cf       	rjmp	.-210    	; 0x96e <i2c_write>
 a40:	08 95       	ret

00000a42 <main>:
	i2c_write(128);
 a42:	44 de       	rcall	.-888    	; 0x6cc <ds3231_basic_init>
 a44:	b9 df       	rcall	.-142    	; 0x9b8 <interruptConfig>
 a46:	e4 df       	rcall	.-56     	; 0xa10 <setRegistersAlarm1>
 a48:	80 ed       	ldi	r24, 0xD0	; 208
	interruptConfig();
	
	/* Set alarm */
	setRegistersAlarm1();
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a4a:	68 df       	rcall	.-304    	; 0x91c <i2c_start>
	i2c_write(DS3231_REG_CONTROL);
 a4c:	8e e0       	ldi	r24, 0x0E	; 14
 a4e:	8f df       	rcall	.-226    	; 0x96e <i2c_write>
	i2c_write(0x5);		// Set bit 0 and 2 (alarm 1 and interrupt)
 a50:	85 e0       	ldi	r24, 0x05	; 5
 a52:	8d df       	rcall	.-230    	; 0x96e <i2c_write>

	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a54:	80 ed       	ldi	r24, 0xD0	; 208
 a56:	62 df       	rcall	.-316    	; 0x91c <i2c_start>
	i2c_write(DS3231_REG_STATUS);
 a58:	8f e0       	ldi	r24, 0x0F	; 15
 a5a:	89 df       	rcall	.-238    	; 0x96e <i2c_write>
	i2c_write(0x0);
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	87 df       	rcall	.-242    	; 0x96e <i2c_write>
	
	//displayRegistersAlarm1();
	/* Read and display current time */
		while(1)
		{
			setRegistersAlarm1();
 a60:	d7 df       	rcall	.-82     	; 0xa10 <setRegistersAlarm1>
			
			i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a62:	80 ed       	ldi	r24, 0xD0	; 208
 a64:	5b df       	rcall	.-330    	; 0x91c <i2c_start>
			i2c_write(DS3231_REG_CONTROL);
 a66:	8e e0       	ldi	r24, 0x0E	; 14
 a68:	82 df       	rcall	.-252    	; 0x96e <i2c_write>
 a6a:	85 e0       	ldi	r24, 0x05	; 5
			i2c_write(0x5);		// Set bit 0 and 2 (alarm 1 and interrupt)
 a6c:	80 df       	rcall	.-256    	; 0x96e <i2c_write>
 a6e:	80 ed       	ldi	r24, 0xD0	; 208

			i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a70:	55 df       	rcall	.-342    	; 0x91c <i2c_start>
 a72:	8f e0       	ldi	r24, 0x0F	; 15
			i2c_write(DS3231_REG_STATUS);
 a74:	7c df       	rcall	.-264    	; 0x96e <i2c_write>
 a76:	80 e0       	ldi	r24, 0x00	; 0
			i2c_write(0x0);
 a78:	7a df       	rcall	.-268    	; 0x96e <i2c_write>
 a7a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
			
			toggle = 0;
 a7e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			
			i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a82:	80 ed       	ldi	r24, 0xD0	; 208
 a84:	4b df       	rcall	.-362    	; 0x91c <i2c_start>
			i2c_write(DS3231_REG_STATUS);
 a86:	8f e0       	ldi	r24, 0x0F	; 15
 a88:	72 df       	rcall	.-284    	; 0x96e <i2c_write>
 a8a:	81 ed       	ldi	r24, 0xD1	; 209
			/* Send START condition with SLA+R */
			i2c_rep_start((DS3231_ADDRESS<<1)+I2C_READ);
 a8c:	6e df       	rcall	.-292    	; 0x96a <i2c_rep_start>
 a8e:	81 df       	rcall	.-254    	; 0x992 <i2c_readNak>
			/* Receive data */
			uint8_t st_reg = i2c_readNak();
 a90:	80 ff       	sbrs	r24, 0
		
			if ((st_reg & 0x01) > 0)
 a92:	06 c0       	rjmp	.+12     	; 0xaa0 <main+0x5e>
 a94:	80 ed       	ldi	r24, 0xD0	; 208
			{
				i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 a96:	42 df       	rcall	.-380    	; 0x91c <i2c_start>
 a98:	8f e0       	ldi	r24, 0x0F	; 15
 a9a:	69 df       	rcall	.-302    	; 0x96e <i2c_write>
				i2c_write(DS3231_REG_STATUS);
 a9c:	80 e0       	ldi	r24, 0x00	; 0
 a9e:	67 df       	rcall	.-306    	; 0x96e <i2c_write>
 aa0:	2f ef       	ldi	r18, 0xFF	; 255
				i2c_write(0x0);
 aa2:	8f e4       	ldi	r24, 0x4F	; 79
 aa4:	93 ec       	ldi	r25, 0xC3	; 195
 aa6:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 aa8:	80 40       	sbci	r24, 0x00	; 0
 aaa:	90 40       	sbci	r25, 0x00	; 0
 aac:	e1 f7       	brne	.-8      	; 0xaa6 <main+0x64>
 aae:	00 c0       	rjmp	.+0      	; 0xab0 <main+0x6e>
 ab0:	00 00       	nop
 ab2:	7a df       	rcall	.-268    	; 0x9a8 <enable_interrupts>
 ab4:	83 df       	rcall	.-250    	; 0x9bc <enterSleep>
 ab6:	d4 cf       	rjmp	.-88     	; 0xa60 <main+0x1e>

00000ab8 <__divsf3>:
 ab8:	0c d0       	rcall	.+24     	; 0xad2 <__divsf3x>
//   			updateLCDScreen(2, "Hour: ", t.hour, "NONE");
//   			updateLCDScreen(3, "Minutes:", t.minute, "NONE");
//   			updateLCDScreen(4, "Second:", t.second, "NONE");
			_delay_ms(4000);
			
			enable_interrupts();
 aba:	ae c0       	rjmp	.+348    	; 0xc18 <__fp_round>
 abc:	a6 d0       	rcall	.+332    	; 0xc0a <__fp_pscB>
			enterSleep();
 abe:	40 f0       	brcs	.+16     	; 0xad0 <__divsf3+0x18>
 ac0:	9d d0       	rcall	.+314    	; 0xbfc <__fp_pscA>
		}
 ac2:	30 f0       	brcs	.+12     	; 0xad0 <__divsf3+0x18>
 ac4:	21 f4       	brne	.+8      	; 0xace <__divsf3+0x16>
 ac6:	5f 3f       	cpi	r21, 0xFF	; 255
 ac8:	19 f0       	breq	.+6      	; 0xad0 <__divsf3+0x18>
 aca:	8f c0       	rjmp	.+286    	; 0xbea <__fp_inf>
 acc:	51 11       	cpse	r21, r1
 ace:	d8 c0       	rjmp	.+432    	; 0xc80 <__fp_szero>
 ad0:	92 c0       	rjmp	.+292    	; 0xbf6 <__fp_nan>

00000ad2 <__divsf3x>:
 ad2:	b3 d0       	rcall	.+358    	; 0xc3a <__fp_split3>
 ad4:	98 f3       	brcs	.-26     	; 0xabc <__divsf3+0x4>

00000ad6 <__divsf3_pse>:
 ad6:	99 23       	and	r25, r25
 ad8:	c9 f3       	breq	.-14     	; 0xacc <__divsf3+0x14>
 ada:	55 23       	and	r21, r21
 adc:	b1 f3       	breq	.-20     	; 0xaca <__divsf3+0x12>
 ade:	95 1b       	sub	r25, r21
 ae0:	55 0b       	sbc	r21, r21
 ae2:	bb 27       	eor	r27, r27
 ae4:	aa 27       	eor	r26, r26
 ae6:	62 17       	cp	r22, r18
 ae8:	73 07       	cpc	r23, r19
 aea:	84 07       	cpc	r24, r20
 aec:	38 f0       	brcs	.+14     	; 0xafc <__divsf3_pse+0x26>
 aee:	9f 5f       	subi	r25, 0xFF	; 255
 af0:	5f 4f       	sbci	r21, 0xFF	; 255
 af2:	22 0f       	add	r18, r18
 af4:	33 1f       	adc	r19, r19
 af6:	44 1f       	adc	r20, r20
 af8:	aa 1f       	adc	r26, r26
 afa:	a9 f3       	breq	.-22     	; 0xae6 <__divsf3_pse+0x10>
 afc:	33 d0       	rcall	.+102    	; 0xb64 <__divsf3_pse+0x8e>
 afe:	0e 2e       	mov	r0, r30
 b00:	3a f0       	brmi	.+14     	; 0xb10 <__divsf3_pse+0x3a>
 b02:	e0 e8       	ldi	r30, 0x80	; 128
 b04:	30 d0       	rcall	.+96     	; 0xb66 <__divsf3_pse+0x90>
 b06:	91 50       	subi	r25, 0x01	; 1
 b08:	50 40       	sbci	r21, 0x00	; 0
 b0a:	e6 95       	lsr	r30
 b0c:	00 1c       	adc	r0, r0
 b0e:	ca f7       	brpl	.-14     	; 0xb02 <__divsf3_pse+0x2c>
 b10:	29 d0       	rcall	.+82     	; 0xb64 <__divsf3_pse+0x8e>
 b12:	fe 2f       	mov	r31, r30
 b14:	27 d0       	rcall	.+78     	; 0xb64 <__divsf3_pse+0x8e>
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	bb 1f       	adc	r27, r27
 b1e:	26 17       	cp	r18, r22
 b20:	37 07       	cpc	r19, r23
 b22:	48 07       	cpc	r20, r24
 b24:	ab 07       	cpc	r26, r27
 b26:	b0 e8       	ldi	r27, 0x80	; 128
 b28:	09 f0       	breq	.+2      	; 0xb2c <__divsf3_pse+0x56>
 b2a:	bb 0b       	sbc	r27, r27
 b2c:	80 2d       	mov	r24, r0
 b2e:	bf 01       	movw	r22, r30
 b30:	ff 27       	eor	r31, r31
 b32:	93 58       	subi	r25, 0x83	; 131
 b34:	5f 4f       	sbci	r21, 0xFF	; 255
 b36:	2a f0       	brmi	.+10     	; 0xb42 <__divsf3_pse+0x6c>
 b38:	9e 3f       	cpi	r25, 0xFE	; 254
 b3a:	51 05       	cpc	r21, r1
 b3c:	68 f0       	brcs	.+26     	; 0xb58 <__divsf3_pse+0x82>
 b3e:	55 c0       	rjmp	.+170    	; 0xbea <__fp_inf>
 b40:	9f c0       	rjmp	.+318    	; 0xc80 <__fp_szero>
 b42:	5f 3f       	cpi	r21, 0xFF	; 255
 b44:	ec f3       	brlt	.-6      	; 0xb40 <__divsf3_pse+0x6a>
 b46:	98 3e       	cpi	r25, 0xE8	; 232
 b48:	dc f3       	brlt	.-10     	; 0xb40 <__divsf3_pse+0x6a>
 b4a:	86 95       	lsr	r24
 b4c:	77 95       	ror	r23
 b4e:	67 95       	ror	r22
 b50:	b7 95       	ror	r27
 b52:	f7 95       	ror	r31
 b54:	9f 5f       	subi	r25, 0xFF	; 255
 b56:	c9 f7       	brne	.-14     	; 0xb4a <__divsf3_pse+0x74>
 b58:	88 0f       	add	r24, r24
 b5a:	91 1d       	adc	r25, r1
 b5c:	96 95       	lsr	r25
 b5e:	87 95       	ror	r24
 b60:	97 f9       	bld	r25, 7
 b62:	08 95       	ret
 b64:	e1 e0       	ldi	r30, 0x01	; 1
 b66:	66 0f       	add	r22, r22
 b68:	77 1f       	adc	r23, r23
 b6a:	88 1f       	adc	r24, r24
 b6c:	bb 1f       	adc	r27, r27
 b6e:	62 17       	cp	r22, r18
 b70:	73 07       	cpc	r23, r19
 b72:	84 07       	cpc	r24, r20
 b74:	ba 07       	cpc	r27, r26
 b76:	20 f0       	brcs	.+8      	; 0xb80 <__divsf3_pse+0xaa>
 b78:	62 1b       	sub	r22, r18
 b7a:	73 0b       	sbc	r23, r19
 b7c:	84 0b       	sbc	r24, r20
 b7e:	ba 0b       	sbc	r27, r26
 b80:	ee 1f       	adc	r30, r30
 b82:	88 f7       	brcc	.-30     	; 0xb66 <__divsf3_pse+0x90>
 b84:	e0 95       	com	r30
 b86:	08 95       	ret

00000b88 <__fixsfsi>:
 b88:	04 d0       	rcall	.+8      	; 0xb92 <__fixunssfsi>
 b8a:	68 94       	set
 b8c:	b1 11       	cpse	r27, r1
 b8e:	78 c0       	rjmp	.+240    	; 0xc80 <__fp_szero>
 b90:	08 95       	ret

00000b92 <__fixunssfsi>:
 b92:	5b d0       	rcall	.+182    	; 0xc4a <__fp_splitA>
 b94:	88 f0       	brcs	.+34     	; 0xbb8 <__fixunssfsi+0x26>
 b96:	9f 57       	subi	r25, 0x7F	; 127
 b98:	90 f0       	brcs	.+36     	; 0xbbe <__fixunssfsi+0x2c>
 b9a:	b9 2f       	mov	r27, r25
 b9c:	99 27       	eor	r25, r25
 b9e:	b7 51       	subi	r27, 0x17	; 23
 ba0:	a0 f0       	brcs	.+40     	; 0xbca <__fixunssfsi+0x38>
 ba2:	d1 f0       	breq	.+52     	; 0xbd8 <__fixunssfsi+0x46>
 ba4:	66 0f       	add	r22, r22
 ba6:	77 1f       	adc	r23, r23
 ba8:	88 1f       	adc	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	1a f0       	brmi	.+6      	; 0xbb4 <__fixunssfsi+0x22>
 bae:	ba 95       	dec	r27
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__fixunssfsi+0x12>
 bb2:	12 c0       	rjmp	.+36     	; 0xbd8 <__fixunssfsi+0x46>
 bb4:	b1 30       	cpi	r27, 0x01	; 1
 bb6:	81 f0       	breq	.+32     	; 0xbd8 <__fixunssfsi+0x46>
 bb8:	62 d0       	rcall	.+196    	; 0xc7e <__fp_zero>
 bba:	b1 e0       	ldi	r27, 0x01	; 1
 bbc:	08 95       	ret
 bbe:	5f c0       	rjmp	.+190    	; 0xc7e <__fp_zero>
 bc0:	67 2f       	mov	r22, r23
 bc2:	78 2f       	mov	r23, r24
 bc4:	88 27       	eor	r24, r24
 bc6:	b8 5f       	subi	r27, 0xF8	; 248
 bc8:	39 f0       	breq	.+14     	; 0xbd8 <__fixunssfsi+0x46>
 bca:	b9 3f       	cpi	r27, 0xF9	; 249
 bcc:	cc f3       	brlt	.-14     	; 0xbc0 <__fixunssfsi+0x2e>
 bce:	86 95       	lsr	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	b3 95       	inc	r27
 bd6:	d9 f7       	brne	.-10     	; 0xbce <__fixunssfsi+0x3c>
 bd8:	3e f4       	brtc	.+14     	; 0xbe8 <__fixunssfsi+0x56>
 bda:	90 95       	com	r25
 bdc:	80 95       	com	r24
 bde:	70 95       	com	r23
 be0:	61 95       	neg	r22
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	08 95       	ret

00000bea <__fp_inf>:
 bea:	97 f9       	bld	r25, 7
 bec:	9f 67       	ori	r25, 0x7F	; 127
 bee:	80 e8       	ldi	r24, 0x80	; 128
 bf0:	70 e0       	ldi	r23, 0x00	; 0
 bf2:	60 e0       	ldi	r22, 0x00	; 0
 bf4:	08 95       	ret

00000bf6 <__fp_nan>:
 bf6:	9f ef       	ldi	r25, 0xFF	; 255
 bf8:	80 ec       	ldi	r24, 0xC0	; 192
 bfa:	08 95       	ret

00000bfc <__fp_pscA>:
 bfc:	00 24       	eor	r0, r0
 bfe:	0a 94       	dec	r0
 c00:	16 16       	cp	r1, r22
 c02:	17 06       	cpc	r1, r23
 c04:	18 06       	cpc	r1, r24
 c06:	09 06       	cpc	r0, r25
 c08:	08 95       	ret

00000c0a <__fp_pscB>:
 c0a:	00 24       	eor	r0, r0
 c0c:	0a 94       	dec	r0
 c0e:	12 16       	cp	r1, r18
 c10:	13 06       	cpc	r1, r19
 c12:	14 06       	cpc	r1, r20
 c14:	05 06       	cpc	r0, r21
 c16:	08 95       	ret

00000c18 <__fp_round>:
 c18:	09 2e       	mov	r0, r25
 c1a:	03 94       	inc	r0
 c1c:	00 0c       	add	r0, r0
 c1e:	11 f4       	brne	.+4      	; 0xc24 <__fp_round+0xc>
 c20:	88 23       	and	r24, r24
 c22:	52 f0       	brmi	.+20     	; 0xc38 <__fp_round+0x20>
 c24:	bb 0f       	add	r27, r27
 c26:	40 f4       	brcc	.+16     	; 0xc38 <__fp_round+0x20>
 c28:	bf 2b       	or	r27, r31
 c2a:	11 f4       	brne	.+4      	; 0xc30 <__fp_round+0x18>
 c2c:	60 ff       	sbrs	r22, 0
 c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__fp_round+0x20>
 c30:	6f 5f       	subi	r22, 0xFF	; 255
 c32:	7f 4f       	sbci	r23, 0xFF	; 255
 c34:	8f 4f       	sbci	r24, 0xFF	; 255
 c36:	9f 4f       	sbci	r25, 0xFF	; 255
 c38:	08 95       	ret

00000c3a <__fp_split3>:
 c3a:	57 fd       	sbrc	r21, 7
 c3c:	90 58       	subi	r25, 0x80	; 128
 c3e:	44 0f       	add	r20, r20
 c40:	55 1f       	adc	r21, r21
 c42:	59 f0       	breq	.+22     	; 0xc5a <__fp_splitA+0x10>
 c44:	5f 3f       	cpi	r21, 0xFF	; 255
 c46:	71 f0       	breq	.+28     	; 0xc64 <__fp_splitA+0x1a>
 c48:	47 95       	ror	r20

00000c4a <__fp_splitA>:
 c4a:	88 0f       	add	r24, r24
 c4c:	97 fb       	bst	r25, 7
 c4e:	99 1f       	adc	r25, r25
 c50:	61 f0       	breq	.+24     	; 0xc6a <__fp_splitA+0x20>
 c52:	9f 3f       	cpi	r25, 0xFF	; 255
 c54:	79 f0       	breq	.+30     	; 0xc74 <__fp_splitA+0x2a>
 c56:	87 95       	ror	r24
 c58:	08 95       	ret
 c5a:	12 16       	cp	r1, r18
 c5c:	13 06       	cpc	r1, r19
 c5e:	14 06       	cpc	r1, r20
 c60:	55 1f       	adc	r21, r21
 c62:	f2 cf       	rjmp	.-28     	; 0xc48 <__fp_split3+0xe>
 c64:	46 95       	lsr	r20
 c66:	f1 df       	rcall	.-30     	; 0xc4a <__fp_splitA>
 c68:	08 c0       	rjmp	.+16     	; 0xc7a <__fp_splitA+0x30>
 c6a:	16 16       	cp	r1, r22
 c6c:	17 06       	cpc	r1, r23
 c6e:	18 06       	cpc	r1, r24
 c70:	99 1f       	adc	r25, r25
 c72:	f1 cf       	rjmp	.-30     	; 0xc56 <__fp_splitA+0xc>
 c74:	86 95       	lsr	r24
 c76:	71 05       	cpc	r23, r1
 c78:	61 05       	cpc	r22, r1
 c7a:	08 94       	sec
 c7c:	08 95       	ret

00000c7e <__fp_zero>:
 c7e:	e8 94       	clt

00000c80 <__fp_szero>:
 c80:	bb 27       	eor	r27, r27
 c82:	66 27       	eor	r22, r22
 c84:	77 27       	eor	r23, r23
 c86:	cb 01       	movw	r24, r22
 c88:	97 f9       	bld	r25, 7
 c8a:	08 95       	ret

00000c8c <_exit>:
 c8c:	f8 94       	cli

00000c8e <__stop_program>:
 c8e:	ff cf       	rjmp	.-2      	; 0xc8e <__stop_program>
