
PwrMgmt-Atmega328p_DS3231.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ced  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000915  00000000  00000000  000010b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001210  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00012487  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000361  00000000  00000000  000151cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00015530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000f47  00000000  00000000  000155d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	d9 c0       	rjmp	.+434    	; 0x1b8 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	a5 d0       	rcall	.+330    	; 0x1e6 <main>
  9c:	bf c0       	rjmp	.+382    	; 0x21c <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <i2c_start>:
		if( twst == TW_SR_DATA_ACK)
		{
			return TWDR;
		}
	}
}
  a0:	94 ea       	ldi	r25, 0xA4	; 164
  a2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  a6:	ec eb       	ldi	r30, 0xBC	; 188
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	99 23       	and	r25, r25
  ae:	ec f7       	brge	.-6      	; 0xaa <i2c_start+0xa>
  b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  b4:	98 7f       	andi	r25, 0xF8	; 248
  b6:	98 30       	cpi	r25, 0x08	; 8
  b8:	11 f0       	breq	.+4      	; 0xbe <i2c_start+0x1e>
  ba:	90 31       	cpi	r25, 0x10	; 16
  bc:	a1 f4       	brne	.+40     	; 0xe6 <i2c_start+0x46>
  be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  c8:	ec eb       	ldi	r30, 0xBC	; 188
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 23       	and	r24, r24
  d0:	ec f7       	brge	.-6      	; 0xcc <i2c_start+0x2c>
  d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  d6:	98 7f       	andi	r25, 0xF8	; 248
  d8:	98 31       	cpi	r25, 0x18	; 24
  da:	39 f0       	breq	.+14     	; 0xea <i2c_start+0x4a>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 34       	cpi	r25, 0x40	; 64
  e0:	29 f4       	brne	.+10     	; 0xec <i2c_start+0x4c>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret

000000ee <i2c_rep_start>:
  ee:	d8 cf       	rjmp	.-80     	; 0xa0 <i2c_start>
  f0:	08 95       	ret

000000f2 <i2c_stop>:
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	84 fd       	sbrc	r24, 4
 100:	fd cf       	rjmp	.-6      	; 0xfc <i2c_stop+0xa>
 102:	08 95       	ret

00000104 <i2c_write>:
 104:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 108:	84 e8       	ldi	r24, 0x84	; 132
 10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <i2c_write+0xe>
 118:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 11c:	98 7f       	andi	r25, 0xF8	; 248
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	98 32       	cpi	r25, 0x28	; 40
 122:	09 f4       	brne	.+2      	; 0x126 <i2c_write+0x22>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret

00000128 <write_i2c>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	d8 2f       	mov	r29, r24
 12e:	c6 2f       	mov	r28, r22
 130:	80 ed       	ldi	r24, 0xD0	; 208
 132:	b6 df       	rcall	.-148    	; 0xa0 <i2c_start>
 134:	8d 2f       	mov	r24, r29
 136:	e6 df       	rcall	.-52     	; 0x104 <i2c_write>
 138:	8c 2f       	mov	r24, r28
 13a:	e4 df       	rcall	.-56     	; 0x104 <i2c_write>
 13c:	da df       	rcall	.-76     	; 0xf2 <i2c_stop>
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <i2c_readNak>:
Outputs:	Data received from I2C device
Description:Receives and returns the data from I2C device.
******************************************************************** */
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 144:	84 e8       	ldi	r24, 0x84	; 132
 146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 14a:	ec eb       	ldi	r30, 0xBC	; 188
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	ec f7       	brge	.-6      	; 0x14e <i2c_readNak+0xa>
	
	return TWDR;
 154:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 158:	08 95       	ret

0000015a <read_i2c>:
Inputs:		Register to read from
Outputs:	register value
Description:Reads the value of a register over SPI
******************************************************************** */
unsigned char read_i2c(unsigned char reg)
{
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
	uint8_t res = 0;
	
	/* Send START condition with SLA+W */
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 15e:	80 ed       	ldi	r24, 0xD0	; 208
 160:	9f df       	rcall	.-194    	; 0xa0 <i2c_start>
	/* Choose register */
	i2c_write(reg);
 162:	8c 2f       	mov	r24, r28
 164:	cf df       	rcall	.-98     	; 0x104 <i2c_write>
	/* Send START condition with SLA+R */
	i2c_rep_start((DS3231_ADDRESS<<1)+I2C_READ);
 166:	81 ed       	ldi	r24, 0xD1	; 209
 168:	c2 df       	rcall	.-124    	; 0xee <i2c_rep_start>
	/* Receive data */
	res = i2c_readNak();
 16a:	ec df       	rcall	.-40     	; 0x144 <i2c_readNak>
 16c:	c8 2f       	mov	r28, r24
 16e:	c1 df       	rcall	.-126    	; 0xf2 <i2c_stop>
	/* Send stop condition */
	i2c_stop();
 170:	8c 2f       	mov	r24, r28
 172:	cf 91       	pop	r28
	
	return res;
}
 174:	08 95       	ret

00000176 <enable_interrupts>:
 Outputs:	none
 Description:enables interrupt INT0 (pin D2 and sets falling condition for firing) 
 ******************************************************************** */
 void enable_interrupts()
 {
	 EIMSK |= (1<<INT0);	// Interrupt on pin D2
 176:	e8 9a       	sbi	0x1d, 0	; 29
	 EICRA |= (1<<ISC01);	// Falling condition
 178:	e9 e6       	ldi	r30, 0x69	; 105
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	80 83       	st	Z, r24
	 sei();
 182:	78 94       	sei
 184:	08 95       	ret

00000186 <interruptConfig>:
 Outputs:	none
 Description:sets PIND2 as input 
 ******************************************************************** */
 void interruptConfig()
 {
	 DDRD &= ~(1<<PIND2);	// Input
 186:	52 98       	cbi	0x0a, 2	; 10
 188:	08 95       	ret

0000018a <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 18a:	83 b7       	in	r24, 0x33	; 51
 18c:	81 7f       	andi	r24, 0xF1	; 241
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
 192:	83 b7       	in	r24, 0x33	; 51
 194:	81 60       	ori	r24, 0x01	; 1
 196:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	83 bf       	out	0x33, r24	; 51
 19e:	88 95       	sleep
 1a0:	83 b7       	in	r24, 0x33	; 51
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
 1a6:	83 b7       	in	r24, 0x33	; 51
 1a8:	8e 7f       	andi	r24, 0xFE	; 254
 1aa:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
 1ac:	e4 e6       	ldi	r30, 0x64	; 100
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 71       	andi	r24, 0x10	; 16
 1b4:	80 83       	st	Z, r24
 1b6:	08 95       	ret

000001b8 <__vector_1>:
Inputs:		none
Outputs:	none
Description:wakes up MCU when an external interrupt on pin PIND2 occurs
******************************************************************** */
ISR(INT0_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
	// Wake up
}
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <setRegistersAlarm1>:


void setRegistersAlarm1(void)
{
	/*------- Alarm 1 ---------- */
	write_i2c(DS3231_REG_ALARM1_SECOND, dec2bcd(7));
 1cc:	67 e0       	ldi	r22, 0x07	; 7
 1ce:	87 e0       	ldi	r24, 0x07	; 7
 1d0:	ab df       	rcall	.-170    	; 0x128 <write_i2c>
	write_i2c(DS3231_REG_ALARM1_MINUTE, 128);
 1d2:	60 e8       	ldi	r22, 0x80	; 128
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	a8 df       	rcall	.-176    	; 0x128 <write_i2c>
	write_i2c(DS3231_REG_ALARM1_HOUR, 128);
 1d8:	60 e8       	ldi	r22, 0x80	; 128
 1da:	89 e0       	ldi	r24, 0x09	; 9
 1dc:	a5 df       	rcall	.-182    	; 0x128 <write_i2c>
	write_i2c(DS3231_REG_ALARM1_WEEK, 128);
 1de:	60 e8       	ldi	r22, 0x80	; 128
 1e0:	8a e0       	ldi	r24, 0x0A	; 10
 1e2:	a2 cf       	rjmp	.-188    	; 0x128 <write_i2c>
 1e4:	08 95       	ret

000001e6 <main>:
 1e6:	cf df       	rcall	.-98     	; 0x186 <interruptConfig>
{
	uint8_t status_reg;
	/* Initialization of interrupt */
	interruptConfig();
	/* Set alarm */
	setRegistersAlarm1();
 1e8:	f1 df       	rcall	.-30     	; 0x1cc <setRegistersAlarm1>
 1ea:	60 e0       	ldi	r22, 0x00	; 0
	/* Reset status register */
	write_i2c(DS3231_REG_STATUS, 0x0);
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	9c df       	rcall	.-200    	; 0x128 <write_i2c>
 1f0:	65 e0       	ldi	r22, 0x05	; 5
	/* Set alarm 1 and interrupt */
	write_i2c(DS3231_REG_CONTROL, 0x5);
 1f2:	8e e0       	ldi	r24, 0x0E	; 14
 1f4:	99 df       	rcall	.-206    	; 0x128 <write_i2c>
 1f6:	8f e0       	ldi	r24, 0x0F	; 15

	while(1)
	{	
		/* Read status register */
		status_reg = read_i2c(DS3231_REG_STATUS);
 1f8:	b0 df       	rcall	.-160    	; 0x15a <read_i2c>
 1fa:	80 ff       	sbrs	r24, 0
		if ((status_reg & 0x01) > 0)
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <main+0x1e>
 1fe:	60 e0       	ldi	r22, 0x00	; 0
		{
			/* Reset Alarm flag*/
			write_i2c(DS3231_REG_STATUS, 0x0);
 200:	8f e0       	ldi	r24, 0x0F	; 15
 202:	92 df       	rcall	.-220    	; 0x128 <write_i2c>
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	8f e4       	ldi	r24, 0x4F	; 79
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	93 ec       	ldi	r25, 0xC3	; 195
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x24>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x2e>
 214:	00 00       	nop
		}

		_delay_ms(4000);
		/* Go to sleep */
		enable_interrupts();
 216:	af df       	rcall	.-162    	; 0x176 <enable_interrupts>
 218:	b8 df       	rcall	.-144    	; 0x18a <enterSleep>
		enterSleep();
 21a:	ed cf       	rjmp	.-38     	; 0x1f6 <main+0x10>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
	}
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
