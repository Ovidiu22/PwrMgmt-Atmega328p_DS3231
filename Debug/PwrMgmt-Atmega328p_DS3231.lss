
PwrMgmt-Atmega328p_DS3231.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf7  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c4  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fcc  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011d08  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ac  00000000  00000000  0001471c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000149c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000cb2  00000000  00000000  00014a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	71 d0       	rcall	.+226    	; 0x17e <main>
  9c:	83 c0       	rjmp	.+262    	; 0x1a4 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <i2c_start>:
	/* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
}
  a0:	94 ea       	ldi	r25, 0xA4	; 164
  a2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  a6:	ec eb       	ldi	r30, 0xBC	; 188
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	99 23       	and	r25, r25
  ae:	ec f7       	brge	.-6      	; 0xaa <i2c_start+0xa>
  b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  b4:	98 7f       	andi	r25, 0xF8	; 248
  b6:	98 30       	cpi	r25, 0x08	; 8
  b8:	11 f0       	breq	.+4      	; 0xbe <i2c_start+0x1e>
  ba:	90 31       	cpi	r25, 0x10	; 16
  bc:	a1 f4       	brne	.+40     	; 0xe6 <i2c_start+0x46>
  be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  c8:	ec eb       	ldi	r30, 0xBC	; 188
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 23       	and	r24, r24
  d0:	ec f7       	brge	.-6      	; 0xcc <i2c_start+0x2c>
  d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  d6:	98 7f       	andi	r25, 0xF8	; 248
  d8:	98 31       	cpi	r25, 0x18	; 24
  da:	39 f0       	breq	.+14     	; 0xea <i2c_start+0x4a>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 34       	cpi	r25, 0x40	; 64
  e0:	29 f4       	brne	.+10     	; 0xec <i2c_start+0x4c>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret

000000ee <i2c_write>:
uint8_t i2c_write( uint8_t data )
{	

	 uint8_t   twst;
	 // send data to the previously addressed device
	 TWDR = data;
  ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	 TWCR = (1<<TWINT) | (1<<TWEN);
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	 // wait until transmission completed
	 while(!(TWCR & (1<<TWINT)));
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 23       	and	r24, r24
 100:	ec f7       	brge	.-6      	; 0xfc <i2c_write+0xe>

	 // check value of TWI Status Register. Mask prescaler bits
	 twst = TW_STATUS & 0xF8;
 102:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 106:	98 7f       	andi	r25, 0xF8	; 248
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	98 32       	cpi	r25, 0x28	; 40
 10c:	09 f4       	brne	.+2      	; 0x110 <i2c_write+0x22>
 10e:	80 e0       	ldi	r24, 0x00	; 0
	 if( twst != TW_MT_DATA_ACK) return 1;

	 return 0;
}
 110:	08 95       	ret

00000112 <interruptConfig>:
 Outputs:	none
 Description:sets PIND2 as input 
 ******************************************************************** */
 void interruptConfig()
 {
	 DDRD &= ~(1<<PIND2);	// Input
 112:	52 98       	cbi	0x0a, 2	; 10
 114:	08 95       	ret

00000116 <__vector_1>:
Inputs:		none
Outputs:	none
Description:wakes up MCU when an external interrupt on pin PIND2 occurs
******************************************************************** */
ISR(INT0_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9c e9       	ldi	r25, 0x9C	; 156
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <__vector_1+0x12>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <__vector_1+0x18>
 12e:	00 00       	nop
	//cli();
	_delay_ms(10);
}
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <setRegistersAlarm1>:

void setRegistersAlarm1(void)
{
	/*------- Alarm 1 ---------- */
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 13e:	80 ed       	ldi	r24, 0xD0	; 208
 140:	af df       	rcall	.-162    	; 0xa0 <i2c_start>
	i2c_write(DS3231_REG_ALARM1_SECOND);
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	d4 df       	rcall	.-88     	; 0xee <i2c_write>
	i2c_write(dec2bcd(7));	// Seconds in dec
 146:	87 e0       	ldi	r24, 0x07	; 7
 148:	d2 df       	rcall	.-92     	; 0xee <i2c_write>
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 14a:	80 ed       	ldi	r24, 0xD0	; 208
 14c:	a9 df       	rcall	.-174    	; 0xa0 <i2c_start>
	i2c_write(DS3231_REG_ALARM1_MINUTE);
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	ce df       	rcall	.-100    	; 0xee <i2c_write>
	i2c_write(128);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	cc df       	rcall	.-104    	; 0xee <i2c_write>
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 156:	80 ed       	ldi	r24, 0xD0	; 208
 158:	a3 df       	rcall	.-186    	; 0xa0 <i2c_start>
	i2c_write(DS3231_REG_ALARM1_HOUR);
 15a:	89 e0       	ldi	r24, 0x09	; 9
 15c:	c8 df       	rcall	.-112    	; 0xee <i2c_write>
	i2c_write(128);
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	c6 df       	rcall	.-116    	; 0xee <i2c_write>
 162:	80 ed       	ldi	r24, 0xD0	; 208
	
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 164:	9d df       	rcall	.-198    	; 0xa0 <i2c_start>
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	c2 df       	rcall	.-124    	; 0xee <i2c_write>
	i2c_write(DS3231_REG_ALARM1_WEEK);
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	c0 cf       	rjmp	.-128    	; 0xee <i2c_write>
 16e:	08 95       	ret

00000170 <setAlarm1>:
	i2c_write(128);
 170:	80 ed       	ldi	r24, 0xD0	; 208
 172:	96 df       	rcall	.-212    	; 0xa0 <i2c_start>
 174:	8e e0       	ldi	r24, 0x0E	; 14
 176:	bb df       	rcall	.-138    	; 0xee <i2c_write>

void setAlarm1(void)
{
	i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
	i2c_write(DS3231_REG_CONTROL);
	i2c_write(0x5);		// Set bit 0 and 2 (alarm 1 and interrupt)
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	b9 cf       	rjmp	.-142    	; 0xee <i2c_write>
 17c:	08 95       	ret

0000017e <main>:
 17e:	c9 df       	rcall	.-110    	; 0x112 <interruptConfig>
	
	/* Main loop */
	while(1)
	{
		/* Set alarm 1*/
		setRegistersAlarm1();
 180:	de df       	rcall	.-68     	; 0x13e <setRegistersAlarm1>
		setAlarm1();
 182:	f6 df       	rcall	.-20     	; 0x170 <setAlarm1>
			
		i2c_start((DS3231_ADDRESS<<1)+I2C_WRITE);
 184:	80 ed       	ldi	r24, 0xD0	; 208
 186:	8c df       	rcall	.-232    	; 0xa0 <i2c_start>
		i2c_write(DS3231_REG_STATUS);
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	b1 df       	rcall	.-158    	; 0xee <i2c_write>
 18c:	80 e0       	ldi	r24, 0x00	; 0
		i2c_write(0x0);
 18e:	af df       	rcall	.-162    	; 0xee <i2c_write>
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	87 ea       	ldi	r24, 0xA7	; 167
 194:	91 e6       	ldi	r25, 0x61	; 97
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x18>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x22>
 1a0:	00 00       	nop
 1a2:	ee cf       	rjmp	.-36     	; 0x180 <main+0x2>

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
